
MIPS_Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800ae30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000084  0800aeb4  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000e4  0800af14  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  24000144  0800af74  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400157c  0800af74  0002157c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0f2  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  0003c264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0003f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00040228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037e02  00000000  00000000  00041188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001998a  00000000  00000000  00078f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e654  00000000  00000000  00092914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  001f0fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ac5c 	.word	0x0800ac5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800ac5c 	.word	0x0800ac5c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <HAL_UART_RxCpltCallback>:
int buffer_index = 0;
char buffer[MAX_BUFFER_SIZE] = {'0'};
int receive_flag = 0;
char cmdStr[] = "";
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart3, &temp, 1, 1000);
	buffer[buffer_index] = temp;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_UART_RxCpltCallback+0x4c>)
 80006c2:	7811      	ldrb	r1, [r2, #0]
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <HAL_UART_RxCpltCallback+0x50>)
 80006c6:	54d1      	strb	r1, [r2, r3]
	receive_flag = receive_flag + 1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_UART_RxCpltCallback+0x54>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_UART_RxCpltCallback+0x54>)
 80006d0:	6013      	str	r3, [r2, #0]
	//HAL_UART_Transmit(&huart3, writeStr, sprintf(writeStr, "%d", receive_flag), 1000);
	buffer_index++;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006da:	6013      	str	r3, [r2, #0]
	if (buffer_index >= MAX_BUFFER_SIZE) buffer_index = 0;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b0e      	cmp	r3, #14
 80006e2:	dd02      	ble.n	80006ea <HAL_UART_RxCpltCallback+0x36>
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_UART_RxCpltCallback+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &temp, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <HAL_UART_RxCpltCallback+0x4c>)
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <HAL_UART_RxCpltCallback+0x58>)
 80006f0:	f006 ffb8 	bl	8007664 <HAL_UART_Receive_IT>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	240007ec 	.word	0x240007ec
 8000700:	240007e8 	.word	0x240007e8
 8000704:	24000000 	.word	0x24000000
 8000708:	240007f0 	.word	0x240007f0
 800070c:	24000248 	.word	0x24000248

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f002 f9d2 	bl	8002abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f82e 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f976 	bl	8000a0c <MX_GPIO_Init>
  MX_ETH_Init();
 8000720:	f000 f8aa 	bl	8000878 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000724:	f000 f8f4 	bl	8000910 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000728:	f000 f93e 	bl	80009a8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_UART_Transmit(&huart3, "HELLO", 5, 1000);
  HAL_UART_Receive_IT(&huart3, &temp, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	490e      	ldr	r1, [pc, #56]	; (8000768 <main+0x58>)
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <main+0x5c>)
 8000732:	f006 ff97 	bl	8007664 <HAL_UART_Receive_IT>

  while (1)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <main+0x60>)
 800073e:	f003 fedb 	bl	80044f8 <HAL_GPIO_WritePin>
	  if (receive_flag > 0)
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <main+0x64>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dd06      	ble.n	8000758 <main+0x48>
	  {
		  //HAL_UART_Transmit(&huart3, writeStr, sprintf(writeStr, "%d", receive_flag), 1000);
		  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
		  receive_flag--;
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <main+0x64>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <main+0x64>)
 8000752:	6013      	str	r3, [r2, #0]
		  command_parser();
 8000754:	f001 ff4c 	bl	80025f0 <command_parser>
	  }
	  uart_communication(&huart3);
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <main+0x5c>)
 800075a:	f002 f96f 	bl	8002a3c <uart_communication>
	  emulator(&huart3);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <main+0x5c>)
 8000760:	f000 fadc 	bl	8000d1c <emulator>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000764:	e7e7      	b.n	8000736 <main+0x26>
 8000766:	bf00      	nop
 8000768:	240007e8 	.word	0x240007e8
 800076c:	24000248 	.word	0x24000248
 8000770:	58020400 	.word	0x58020400
 8000774:	240007f0 	.word	0x240007f0

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	; 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fdea 	bl	800a360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 fde4 	bl	800a360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000798:	2002      	movs	r0, #2
 800079a:	f004 f829 	bl	80047f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <SystemClock_Config+0xf8>)
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	4a32      	ldr	r2, [pc, #200]	; (8000870 <SystemClock_Config+0xf8>)
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <SystemClock_Config+0xf8>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <SystemClock_Config+0xfc>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <SystemClock_Config+0xfc>)
 80007c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <SystemClock_Config+0xfc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d4:	bf00      	nop
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SystemClock_Config+0xfc>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e2:	d1f8      	bne.n	80007d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007e4:	2303      	movs	r3, #3
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000802:	2318      	movs	r3, #24
 8000804:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080a:	2304      	movs	r3, #4
 800080c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000812:	230c      	movs	r3, #12
 8000814:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f82e 	bl	8004884 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800082e:	f000 f9c9 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	233f      	movs	r3, #63	; 0x3f
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fc6e 	bl	8005138 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000862:	f000 f9af 	bl	8000bc4 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3770      	adds	r7, #112	; 0x70
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	58000400 	.word	0x58000400
 8000874:	58024800 	.word	0x58024800

08000878 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ETH_Init+0x80>)
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <MX_ETH_Init+0x84>)
 8000880:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_ETH_Init+0x88>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_ETH_Init+0x88>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_ETH_Init+0x88>)
 8000890:	22e1      	movs	r2, #225	; 0xe1
 8000892:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_ETH_Init+0x88>)
 8000896:	2200      	movs	r2, #0
 8000898:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_ETH_Init+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_ETH_Init+0x88>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ETH_Init+0x80>)
 80008a8:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_ETH_Init+0x88>)
 80008aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_ETH_Init+0x80>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_ETH_Init+0x80>)
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <MX_ETH_Init+0x8c>)
 80008b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_ETH_Init+0x80>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_ETH_Init+0x90>)
 80008bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_ETH_Init+0x80>)
 80008c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_ETH_Init+0x80>)
 80008c8:	f003 f842 	bl	8003950 <HAL_ETH_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008d2:	f000 f977 	bl	8000bc4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008d6:	2238      	movs	r2, #56	; 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_ETH_Init+0x94>)
 80008dc:	f009 fd40 	bl	800a360 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_ETH_Init+0x94>)
 80008e2:	2221      	movs	r2, #33	; 0x21
 80008e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_ETH_Init+0x94>)
 80008e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_ETH_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24000198 	.word	0x24000198
 80008fc:	40028000 	.word	0x40028000
 8000900:	24000814 	.word	0x24000814
 8000904:	240000e4 	.word	0x240000e4
 8000908:	24000084 	.word	0x24000084
 800090c:	24000160 	.word	0x24000160

08000910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_USART3_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800091c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800095a:	f006 fda5 	bl	80074a8 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f92e 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800096c:	f009 f8f9 	bl	8009b62 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f925 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800097e:	f009 f92e 	bl	8009bde <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f91c 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_USART3_UART_Init+0x90>)
 800098e:	f009 f8af 	bl	8009af0 <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 f914 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000248 	.word	0x24000248
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	2209      	movs	r2, #9
 80009b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	f003 fdb5 	bl	800455e <HAL_PCD_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009fa:	f000 f8e3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	240002dc 	.word	0x240002dc
 8000a08:	40080000 	.word	0x40080000

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b62      	ldr	r3, [pc, #392]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	4a60      	ldr	r2, [pc, #384]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a32:	4b5e      	ldr	r3, [pc, #376]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a40:	4b5a      	ldr	r3, [pc, #360]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	4a59      	ldr	r2, [pc, #356]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a50:	4b56      	ldr	r3, [pc, #344]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b53      	ldr	r3, [pc, #332]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a51      	ldr	r2, [pc, #324]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b47      	ldr	r3, [pc, #284]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b44      	ldr	r3, [pc, #272]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a42      	ldr	r2, [pc, #264]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b40      	ldr	r3, [pc, #256]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4a3b      	ldr	r2, [pc, #236]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4b38      	ldr	r3, [pc, #224]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4b35      	ldr	r3, [pc, #212]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a33      	ldr	r2, [pc, #204]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b31      	ldr	r3, [pc, #196]	; (8000bac <MX_GPIO_Init+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000afa:	482d      	ldr	r0, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x1a4>)
 8000afc:	f003 fcfc 	bl	80044f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x1a8>)
 8000b08:	f003 fcf6 	bl	80044f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4829      	ldr	r0, [pc, #164]	; (8000bb8 <MX_GPIO_Init+0x1ac>)
 8000b12:	f003 fcf1 	bl	80044f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4824      	ldr	r0, [pc, #144]	; (8000bbc <MX_GPIO_Init+0x1b0>)
 8000b2c:	f003 fb34 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b30:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <MX_GPIO_Init+0x1a4>)
 8000b4a:	f003 fb25 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <MX_GPIO_Init+0x1a8>)
 8000b68:	f003 fb16 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <MX_GPIO_Init+0x1b4>)
 8000b82:	f003 fb09 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_GPIO_Init+0x1ac>)
 8000b9e:	f003 fafb 	bl	8004198 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	; 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58020400 	.word	0x58020400
 8000bb4:	58020c00 	.word	0x58020c00
 8000bb8:	58021000 	.word	0x58021000
 8000bbc:	58020800 	.word	0x58020800
 8000bc0:	58021800 	.word	0x58021800

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <inst_en_queue>:
int inst_num = 0;
int pc = 0;
char writeStr1[50];

void inst_en_queue(char str[])
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	strcpy(instruction_queue[inst_num], str);
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <inst_en_queue+0x2c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	015b      	lsls	r3, r3, #5
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <inst_en_queue+0x30>)
 8000be0:	4413      	add	r3, r2
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f009 fbe3 	bl	800a3b0 <strcpy>
	inst_num++;
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <inst_en_queue+0x2c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a02      	ldr	r2, [pc, #8]	; (8000bfc <inst_en_queue+0x2c>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2400151c 	.word	0x2400151c
 8000c00:	2400089c 	.word	0x2400089c

08000c04 <substr>:

void substr(char dest[], char src[], int start, int length)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
	int i = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
	int dest_i = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
	for (i = start; i < (start + length); i++)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e00d      	b.n	8000c3c <substr+0x38>
	{
		dest[dest_i] = src[i];
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	441a      	add	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	440b      	add	r3, r1
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	701a      	strb	r2, [r3, #0]
		dest_i++;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	3301      	adds	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
	for (i = start; i < (start + length); i++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbeb      	blt.n	8000c20 <substr+0x1c>
	}
	dest[dest_i] = '\0';
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <binToDec_signed>:

int32_t binToDec_signed(char bin[])
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	int32_t out = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
	int exponent = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
	for (int i = (strlen(bin) - 1); i >= 0; i--)
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fb40 	bl	80002f4 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	3b01      	subs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e01f      	b.n	8000cbc <binToDec_signed+0x5e>
	{
		if (bin[i] == '1' && i != 0) out = out + exponent;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b31      	cmp	r3, #49	; 0x31
 8000c86:	d106      	bne.n	8000c96 <binToDec_signed+0x38>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <binToDec_signed+0x38>
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4413      	add	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
		if (bin[i] == '1' && i == 0) out = out - exponent;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b31      	cmp	r3, #49	; 0x31
 8000ca0:	d106      	bne.n	8000cb0 <binToDec_signed+0x52>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <binToDec_signed+0x52>
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
		exponent = exponent * 2;
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
	for (int i = (strlen(bin) - 1); i >= 0; i--)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dadc      	bge.n	8000c7c <binToDec_signed+0x1e>
	}
	return out;
 8000cc2:	697b      	ldr	r3, [r7, #20]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <binToDec_unsigned>:

uint32_t binToDec_unsigned(char bin[])
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
	int exponent = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
	for (int i = (strlen(bin) - 1); i >= 0; i--)
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fb09 	bl	80002f4 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e00f      	b.n	8000d0a <binToDec_unsigned+0x3e>
	{
		if (bin[i] == '1') out = out + exponent;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b31      	cmp	r3, #49	; 0x31
 8000cf4:	d103      	bne.n	8000cfe <binToDec_unsigned+0x32>
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
		exponent = exponent * 2;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
	for (int i = (strlen(bin) - 1); i >= 0; i--)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	daec      	bge.n	8000cea <binToDec_unsigned+0x1e>
	}
	return out;
 8000d10:	697b      	ldr	r3, [r7, #20]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <emulator>:

void emulator(UART_HandleTypeDef *huart)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000d28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8000d2c:	6018      	str	r0, [r3, #0]
	if ((pc / 4) < inst_num)
 8000d2e:	4bcb      	ldr	r3, [pc, #812]	; (800105c <emulator+0x340>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da00      	bge.n	8000d38 <emulator+0x1c>
 8000d36:	3303      	adds	r3, #3
 8000d38:	109b      	asrs	r3, r3, #2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4bc8      	ldr	r3, [pc, #800]	; (8001060 <emulator+0x344>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f281 817e 	bge.w	8002042 <emulator+0x1326>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d46:	2102      	movs	r1, #2
 8000d48:	48c6      	ldr	r0, [pc, #792]	; (8001064 <emulator+0x348>)
 8000d4a:	f003 fbee 	bl	800452a <HAL_GPIO_TogglePin>
		char opcode[6] = "ffffff";
 8000d4e:	4ac6      	ldr	r2, [pc, #792]	; (8001068 <emulator+0x34c>)
 8000d50:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d58:	6018      	str	r0, [r3, #0]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	8019      	strh	r1, [r3, #0]
		substr(opcode, instruction_queue[(pc) / 4], 0, 6);
 8000d5e:	4bbf      	ldr	r3, [pc, #764]	; (800105c <emulator+0x340>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da00      	bge.n	8000d68 <emulator+0x4c>
 8000d66:	3303      	adds	r3, #3
 8000d68:	109b      	asrs	r3, r3, #2
 8000d6a:	015b      	lsls	r3, r3, #5
 8000d6c:	4abf      	ldr	r2, [pc, #764]	; (800106c <emulator+0x350>)
 8000d6e:	1899      	adds	r1, r3, r2
 8000d70:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8000d74:	2306      	movs	r3, #6
 8000d76:	2200      	movs	r2, #0
 8000d78:	f7ff ff44 	bl	8000c04 <substr>
		if (strcmp(opcode, "000000") == 0) //R-format
 8000d7c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000d80:	49bb      	ldr	r1, [pc, #748]	; (8001070 <emulator+0x354>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff faac 	bl	80002e0 <strcmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8525 	bne.w	80017da <emulator+0xabe>
		{
			char funct[6] = "ffffff";
 8000d90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000d94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d98:	4ab3      	ldr	r2, [pc, #716]	; (8001068 <emulator+0x34c>)
 8000d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9e:	6018      	str	r0, [r3, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	8019      	strh	r1, [r3, #0]
			substr(funct, instruction_queue[(pc) / 4], 26, 6);
 8000da4:	4bad      	ldr	r3, [pc, #692]	; (800105c <emulator+0x340>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	da00      	bge.n	8000dae <emulator+0x92>
 8000dac:	3303      	adds	r3, #3
 8000dae:	109b      	asrs	r3, r3, #2
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	4aae      	ldr	r2, [pc, #696]	; (800106c <emulator+0x350>)
 8000db4:	1899      	adds	r1, r3, r2
 8000db6:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8000dba:	2306      	movs	r3, #6
 8000dbc:	221a      	movs	r2, #26
 8000dbe:	f7ff ff21 	bl	8000c04 <substr>
			if (strcmp(funct, ADD) == 0)
 8000dc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000dc6:	49ab      	ldr	r1, [pc, #684]	; (8001074 <emulator+0x358>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fa89 	bl	80002e0 <strcmp>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d159      	bne.n	8000e88 <emulator+0x16c>
			{
				//HAL_UART_Transmit(huart, "ADD", 3, 1000);
				char reg_temp[5] = "";
 8000dd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8000de4:	4b9d      	ldr	r3, [pc, #628]	; (800105c <emulator+0x340>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <emulator+0xd2>
 8000dec:	3303      	adds	r3, #3
 8000dee:	109b      	asrs	r3, r3, #2
 8000df0:	015b      	lsls	r3, r3, #5
 8000df2:	4a9e      	ldr	r2, [pc, #632]	; (800106c <emulator+0x350>)
 8000df4:	1899      	adds	r1, r3, r2
 8000df6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	f7ff ff01 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8000e02:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff60 	bl	8000ccc <binToDec_unsigned>
 8000e0c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8000e10:	4b92      	ldr	r3, [pc, #584]	; (800105c <emulator+0x340>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da00      	bge.n	8000e1a <emulator+0xfe>
 8000e18:	3303      	adds	r3, #3
 8000e1a:	109b      	asrs	r3, r3, #2
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	4a93      	ldr	r2, [pc, #588]	; (800106c <emulator+0x350>)
 8000e20:	1899      	adds	r1, r3, r2
 8000e22:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000e26:	2305      	movs	r3, #5
 8000e28:	220b      	movs	r2, #11
 8000e2a:	f7ff feeb 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8000e2e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff4a 	bl	8000ccc <binToDec_unsigned>
 8000e38:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8000e3c:	4b87      	ldr	r3, [pc, #540]	; (800105c <emulator+0x340>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	da00      	bge.n	8000e46 <emulator+0x12a>
 8000e44:	3303      	adds	r3, #3
 8000e46:	109b      	asrs	r3, r3, #2
 8000e48:	015b      	lsls	r3, r3, #5
 8000e4a:	4a88      	ldr	r2, [pc, #544]	; (800106c <emulator+0x350>)
 8000e4c:	1899      	adds	r1, r3, r2
 8000e4e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000e52:	2305      	movs	r3, #5
 8000e54:	2210      	movs	r2, #16
 8000e56:	f7ff fed5 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 8000e5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fefd 	bl	8000c5e <binToDec_signed>
 8000e64:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
				MIPS_reg[rd] = MIPS_reg[rs] + MIPS_reg[rt];
 8000e68:	4a83      	ldr	r2, [pc, #524]	; (8001078 <emulator+0x35c>)
 8000e6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e72:	4981      	ldr	r1, [pc, #516]	; (8001078 <emulator+0x35c>)
 8000e74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7c:	441a      	add	r2, r3
 8000e7e:	497e      	ldr	r1, [pc, #504]	; (8001078 <emulator+0x35c>)
 8000e80:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, ADDU) == 0)
 8000e88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000e8c:	497b      	ldr	r1, [pc, #492]	; (800107c <emulator+0x360>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fa26 	bl	80002e0 <strcmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d159      	bne.n	8000f4e <emulator+0x232>
			{
				char reg_temp[5] = "";
 8000e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000e9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8000eaa:	4b6c      	ldr	r3, [pc, #432]	; (800105c <emulator+0x340>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da00      	bge.n	8000eb4 <emulator+0x198>
 8000eb2:	3303      	adds	r3, #3
 8000eb4:	109b      	asrs	r3, r3, #2
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	4a6c      	ldr	r2, [pc, #432]	; (800106c <emulator+0x350>)
 8000eba:	1899      	adds	r1, r3, r2
 8000ebc:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	f7ff fe9e 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8000ec8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fefd 	bl	8000ccc <binToDec_unsigned>
 8000ed2:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <emulator+0x340>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da00      	bge.n	8000ee0 <emulator+0x1c4>
 8000ede:	3303      	adds	r3, #3
 8000ee0:	109b      	asrs	r3, r3, #2
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	4a61      	ldr	r2, [pc, #388]	; (800106c <emulator+0x350>)
 8000ee6:	1899      	adds	r1, r3, r2
 8000ee8:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8000eec:	2305      	movs	r3, #5
 8000eee:	220b      	movs	r2, #11
 8000ef0:	f7ff fe88 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8000ef4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee7 	bl	8000ccc <binToDec_unsigned>
 8000efe:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <emulator+0x340>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da00      	bge.n	8000f0c <emulator+0x1f0>
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	109b      	asrs	r3, r3, #2
 8000f0e:	015b      	lsls	r3, r3, #5
 8000f10:	4a56      	ldr	r2, [pc, #344]	; (800106c <emulator+0x350>)
 8000f12:	1899      	adds	r1, r3, r2
 8000f14:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8000f18:	2305      	movs	r3, #5
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	f7ff fe72 	bl	8000c04 <substr>
				uint32_t rd = binToDec_unsigned(reg_temp);
 8000f20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fed1 	bl	8000ccc <binToDec_unsigned>
 8000f2a:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
				MIPS_reg[rd] = MIPS_reg[rs] + MIPS_reg[rt];
 8000f2e:	4a52      	ldr	r2, [pc, #328]	; (8001078 <emulator+0x35c>)
 8000f30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f38:	494f      	ldr	r1, [pc, #316]	; (8001078 <emulator+0x35c>)
 8000f3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f42:	441a      	add	r2, r3
 8000f44:	494c      	ldr	r1, [pc, #304]	; (8001078 <emulator+0x35c>)
 8000f46:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rd], "%d", sum);
				//MIPS_reg[reg_dest] = MIPS_reg[reg_src1] + MIPS_reg[reg_src2];
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SUB) == 0)
 8000f4e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000f52:	494b      	ldr	r1, [pc, #300]	; (8001080 <emulator+0x364>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f9c3 	bl	80002e0 <strcmp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d159      	bne.n	8001014 <emulator+0x2f8>
			{
				//HAL_UART_Transmit(huart, "ADD", 3, 1000);
				char reg_temp[5] = "";
 8000f60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000f64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <emulator+0x340>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <emulator+0x25e>
 8000f78:	3303      	adds	r3, #3
 8000f7a:	109b      	asrs	r3, r3, #2
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4a3b      	ldr	r2, [pc, #236]	; (800106c <emulator+0x350>)
 8000f80:	1899      	adds	r1, r3, r2
 8000f82:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8000f86:	2305      	movs	r3, #5
 8000f88:	2206      	movs	r2, #6
 8000f8a:	f7ff fe3b 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8000f8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fe9a 	bl	8000ccc <binToDec_unsigned>
 8000f98:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <emulator+0x340>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da00      	bge.n	8000fa6 <emulator+0x28a>
 8000fa4:	3303      	adds	r3, #3
 8000fa6:	109b      	asrs	r3, r3, #2
 8000fa8:	015b      	lsls	r3, r3, #5
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <emulator+0x350>)
 8000fac:	1899      	adds	r1, r3, r2
 8000fae:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	220b      	movs	r2, #11
 8000fb6:	f7ff fe25 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8000fba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe84 	bl	8000ccc <binToDec_unsigned>
 8000fc4:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <emulator+0x340>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da00      	bge.n	8000fd2 <emulator+0x2b6>
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	109b      	asrs	r3, r3, #2
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <emulator+0x350>)
 8000fd8:	1899      	adds	r1, r3, r2
 8000fda:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8000fde:	2305      	movs	r3, #5
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	f7ff fe0f 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 8000fe6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe37 	bl	8000c5e <binToDec_signed>
 8000ff0:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
				MIPS_reg[rd] = MIPS_reg[rs] - MIPS_reg[rt];
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <emulator+0x35c>)
 8000ff6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8000ffa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ffe:	491e      	ldr	r1, [pc, #120]	; (8001078 <emulator+0x35c>)
 8001000:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001004:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001008:	1ad2      	subs	r2, r2, r3
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <emulator+0x35c>)
 800100c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rd], "%d", sum);
				//MIPS_reg[reg_dest] = MIPS_reg[reg_src1] + MIPS_reg[reg_src2];
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SUBU) == 0)
 8001014:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001018:	491a      	ldr	r1, [pc, #104]	; (8001084 <emulator+0x368>)
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f960 	bl	80002e0 <strcmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d170      	bne.n	8001108 <emulator+0x3ec>
			{
				char reg_temp[5] = "";
 8001026:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800102a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <emulator+0x340>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da00      	bge.n	8001040 <emulator+0x324>
 800103e:	3303      	adds	r3, #3
 8001040:	109b      	asrs	r3, r3, #2
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <emulator+0x350>)
 8001046:	1899      	adds	r1, r3, r2
 8001048:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800104c:	2305      	movs	r3, #5
 800104e:	2206      	movs	r2, #6
 8001050:	f7ff fdd8 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001054:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001058:	4618      	mov	r0, r3
 800105a:	e015      	b.n	8001088 <emulator+0x36c>
 800105c:	24001520 	.word	0x24001520
 8001060:	2400151c 	.word	0x2400151c
 8001064:	58021000 	.word	0x58021000
 8001068:	0800ad2c 	.word	0x0800ad2c
 800106c:	2400089c 	.word	0x2400089c
 8001070:	0800ac74 	.word	0x0800ac74
 8001074:	0800ac7c 	.word	0x0800ac7c
 8001078:	2400081c 	.word	0x2400081c
 800107c:	0800ac84 	.word	0x0800ac84
 8001080:	0800ac8c 	.word	0x0800ac8c
 8001084:	0800ac94 	.word	0x0800ac94
 8001088:	f7ff fe20 	bl	8000ccc <binToDec_unsigned>
 800108c:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001090:	4bce      	ldr	r3, [pc, #824]	; (80013cc <emulator+0x6b0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <emulator+0x37e>
 8001098:	3303      	adds	r3, #3
 800109a:	109b      	asrs	r3, r3, #2
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	4acc      	ldr	r2, [pc, #816]	; (80013d0 <emulator+0x6b4>)
 80010a0:	1899      	adds	r1, r3, r2
 80010a2:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80010a6:	2305      	movs	r3, #5
 80010a8:	220b      	movs	r2, #11
 80010aa:	f7ff fdab 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 80010ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe0a 	bl	8000ccc <binToDec_unsigned>
 80010b8:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 80010bc:	4bc3      	ldr	r3, [pc, #780]	; (80013cc <emulator+0x6b0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	da00      	bge.n	80010c6 <emulator+0x3aa>
 80010c4:	3303      	adds	r3, #3
 80010c6:	109b      	asrs	r3, r3, #2
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	4ac1      	ldr	r2, [pc, #772]	; (80013d0 <emulator+0x6b4>)
 80010cc:	1899      	adds	r1, r3, r2
 80010ce:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80010d2:	2305      	movs	r3, #5
 80010d4:	2210      	movs	r2, #16
 80010d6:	f7ff fd95 	bl	8000c04 <substr>
				uint32_t rd = binToDec_unsigned(reg_temp);
 80010da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fdf4 	bl	8000ccc <binToDec_unsigned>
 80010e4:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
				MIPS_reg[rd] = MIPS_reg[rs] - MIPS_reg[rt];
 80010e8:	4aba      	ldr	r2, [pc, #744]	; (80013d4 <emulator+0x6b8>)
 80010ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f2:	49b8      	ldr	r1, [pc, #736]	; (80013d4 <emulator+0x6b8>)
 80010f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	49b5      	ldr	r1, [pc, #724]	; (80013d4 <emulator+0x6b8>)
 8001100:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rd], "%d", sum);
				//MIPS_reg[reg_dest] = MIPS_reg[reg_src1] + MIPS_reg[reg_src2];
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, AND) == 0)
 8001108:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800110c:	49b2      	ldr	r1, [pc, #712]	; (80013d8 <emulator+0x6bc>)
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f8e6 	bl	80002e0 <strcmp>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d159      	bne.n	80011ce <emulator+0x4b2>
			{
				//HAL_UART_Transmit(huart, "AND", 3, 1000);
				char reg_temp[5] = "";
 800111a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800111e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 800112a:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <emulator+0x6b0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da00      	bge.n	8001134 <emulator+0x418>
 8001132:	3303      	adds	r3, #3
 8001134:	109b      	asrs	r3, r3, #2
 8001136:	015b      	lsls	r3, r3, #5
 8001138:	4aa5      	ldr	r2, [pc, #660]	; (80013d0 <emulator+0x6b4>)
 800113a:	1899      	adds	r1, r3, r2
 800113c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001140:	2305      	movs	r3, #5
 8001142:	2206      	movs	r2, #6
 8001144:	f7ff fd5e 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001148:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdbd 	bl	8000ccc <binToDec_unsigned>
 8001152:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001156:	4b9d      	ldr	r3, [pc, #628]	; (80013cc <emulator+0x6b0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	da00      	bge.n	8001160 <emulator+0x444>
 800115e:	3303      	adds	r3, #3
 8001160:	109b      	asrs	r3, r3, #2
 8001162:	015b      	lsls	r3, r3, #5
 8001164:	4a9a      	ldr	r2, [pc, #616]	; (80013d0 <emulator+0x6b4>)
 8001166:	1899      	adds	r1, r3, r2
 8001168:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800116c:	2305      	movs	r3, #5
 800116e:	220b      	movs	r2, #11
 8001170:	f7ff fd48 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001174:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fda7 	bl	8000ccc <binToDec_unsigned>
 800117e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8001182:	4b92      	ldr	r3, [pc, #584]	; (80013cc <emulator+0x6b0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <emulator+0x470>
 800118a:	3303      	adds	r3, #3
 800118c:	109b      	asrs	r3, r3, #2
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	4a8f      	ldr	r2, [pc, #572]	; (80013d0 <emulator+0x6b4>)
 8001192:	1899      	adds	r1, r3, r2
 8001194:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001198:	2305      	movs	r3, #5
 800119a:	2210      	movs	r2, #16
 800119c:	f7ff fd32 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 80011a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fd5a 	bl	8000c5e <binToDec_signed>
 80011aa:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
				MIPS_reg[rd] = MIPS_reg[rs] & MIPS_reg[rt];
 80011ae:	4a89      	ldr	r2, [pc, #548]	; (80013d4 <emulator+0x6b8>)
 80011b0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80011b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b8:	4986      	ldr	r1, [pc, #536]	; (80013d4 <emulator+0x6b8>)
 80011ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011c2:	401a      	ands	r2, r3
 80011c4:	4983      	ldr	r1, [pc, #524]	; (80013d4 <emulator+0x6b8>)
 80011c6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, OR) == 0)
 80011ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80011d2:	4982      	ldr	r1, [pc, #520]	; (80013dc <emulator+0x6c0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f883 	bl	80002e0 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d159      	bne.n	8001294 <emulator+0x578>
			{
				//HAL_UART_Transmit(huart, "OR", 2, 1000);
				//HAL_UART_Transmit(huart, "AND", 3, 1000);
				char reg_temp[5] = "";
 80011e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <emulator+0x6b0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da00      	bge.n	80011fa <emulator+0x4de>
 80011f8:	3303      	adds	r3, #3
 80011fa:	109b      	asrs	r3, r3, #2
 80011fc:	015b      	lsls	r3, r3, #5
 80011fe:	4a74      	ldr	r2, [pc, #464]	; (80013d0 <emulator+0x6b4>)
 8001200:	1899      	adds	r1, r3, r2
 8001202:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001206:	2305      	movs	r3, #5
 8001208:	2206      	movs	r2, #6
 800120a:	f7ff fcfb 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 800120e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd5a 	bl	8000ccc <binToDec_unsigned>
 8001218:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <emulator+0x6b0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da00      	bge.n	8001226 <emulator+0x50a>
 8001224:	3303      	adds	r3, #3
 8001226:	109b      	asrs	r3, r3, #2
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	4a69      	ldr	r2, [pc, #420]	; (80013d0 <emulator+0x6b4>)
 800122c:	1899      	adds	r1, r3, r2
 800122e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001232:	2305      	movs	r3, #5
 8001234:	220b      	movs	r2, #11
 8001236:	f7ff fce5 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 800123a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd44 	bl	8000ccc <binToDec_unsigned>
 8001244:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <emulator+0x6b0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <emulator+0x536>
 8001250:	3303      	adds	r3, #3
 8001252:	109b      	asrs	r3, r3, #2
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <emulator+0x6b4>)
 8001258:	1899      	adds	r1, r3, r2
 800125a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800125e:	2305      	movs	r3, #5
 8001260:	2210      	movs	r2, #16
 8001262:	f7ff fccf 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 8001266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fcf7 	bl	8000c5e <binToDec_signed>
 8001270:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
				MIPS_reg[rd] = MIPS_reg[rs] | MIPS_reg[rt];
 8001274:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <emulator+0x6b8>)
 8001276:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800127a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800127e:	4955      	ldr	r1, [pc, #340]	; (80013d4 <emulator+0x6b8>)
 8001280:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001288:	431a      	orrs	r2, r3
 800128a:	4952      	ldr	r1, [pc, #328]	; (80013d4 <emulator+0x6b8>)
 800128c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, NOR) == 0)
 8001294:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001298:	4951      	ldr	r1, [pc, #324]	; (80013e0 <emulator+0x6c4>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f820 	bl	80002e0 <strcmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d15a      	bne.n	800135c <emulator+0x640>
			{
				//HAL_UART_Transmit(huart, "NOR", 3, 1000);
				//HAL_UART_Transmit(huart, "AND", 3, 1000);
				char reg_temp[5] = "";
 80012a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80012aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <emulator+0x6b0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da00      	bge.n	80012c0 <emulator+0x5a4>
 80012be:	3303      	adds	r3, #3
 80012c0:	109b      	asrs	r3, r3, #2
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	4a42      	ldr	r2, [pc, #264]	; (80013d0 <emulator+0x6b4>)
 80012c6:	1899      	adds	r1, r3, r2
 80012c8:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80012cc:	2305      	movs	r3, #5
 80012ce:	2206      	movs	r2, #6
 80012d0:	f7ff fc98 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 80012d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcf7 	bl	8000ccc <binToDec_unsigned>
 80012de:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <emulator+0x6b0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da00      	bge.n	80012ec <emulator+0x5d0>
 80012ea:	3303      	adds	r3, #3
 80012ec:	109b      	asrs	r3, r3, #2
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <emulator+0x6b4>)
 80012f2:	1899      	adds	r1, r3, r2
 80012f4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80012f8:	2305      	movs	r3, #5
 80012fa:	220b      	movs	r2, #11
 80012fc:	f7ff fc82 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001300:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fce1 	bl	8000ccc <binToDec_unsigned>
 800130a:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <emulator+0x6b0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da00      	bge.n	8001318 <emulator+0x5fc>
 8001316:	3303      	adds	r3, #3
 8001318:	109b      	asrs	r3, r3, #2
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <emulator+0x6b4>)
 800131e:	1899      	adds	r1, r3, r2
 8001320:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001324:	2305      	movs	r3, #5
 8001326:	2210      	movs	r2, #16
 8001328:	f7ff fc6c 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 800132c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fc94 	bl	8000c5e <binToDec_signed>
 8001336:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
				MIPS_reg[rd] = ~(MIPS_reg[rs] | MIPS_reg[rt]);
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <emulator+0x6b8>)
 800133c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001344:	4923      	ldr	r1, [pc, #140]	; (80013d4 <emulator+0x6b8>)
 8001346:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800134a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134e:	4313      	orrs	r3, r2
 8001350:	43da      	mvns	r2, r3
 8001352:	4920      	ldr	r1, [pc, #128]	; (80013d4 <emulator+0x6b8>)
 8001354:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, JR) == 0)
 800135c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001360:	4920      	ldr	r1, [pc, #128]	; (80013e4 <emulator+0x6c8>)
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ffbc 	bl	80002e0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d124      	bne.n	80013b8 <emulator+0x69c>
			{
				//HAL_UART_Transmit(huart, "JR", 2, 1000);
				char reg_temp[5] = "";
 800136e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001372:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <emulator+0x6b0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <emulator+0x66c>
 8001386:	3303      	adds	r3, #3
 8001388:	109b      	asrs	r3, r3, #2
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <emulator+0x6b4>)
 800138e:	1899      	adds	r1, r3, r2
 8001390:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001394:	2305      	movs	r3, #5
 8001396:	2206      	movs	r2, #6
 8001398:	f7ff fc34 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 800139c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc93 	bl	8000ccc <binToDec_unsigned>
 80013a6:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
				pc = MIPS_reg[rs];
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <emulator+0x6b8>)
 80013ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <emulator+0x6b0>)
 80013b6:	6013      	str	r3, [r2, #0]
			}
			if (strcmp(funct, SLL) == 0)
 80013b8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013bc:	490a      	ldr	r1, [pc, #40]	; (80013e8 <emulator+0x6cc>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff8e 	bl	80002e0 <strcmp>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d167      	bne.n	800149a <emulator+0x77e>
 80013ca:	e00f      	b.n	80013ec <emulator+0x6d0>
 80013cc:	24001520 	.word	0x24001520
 80013d0:	2400089c 	.word	0x2400089c
 80013d4:	2400081c 	.word	0x2400081c
 80013d8:	0800ac9c 	.word	0x0800ac9c
 80013dc:	0800aca4 	.word	0x0800aca4
 80013e0:	0800acac 	.word	0x0800acac
 80013e4:	0800acb4 	.word	0x0800acb4
 80013e8:	0800ac74 	.word	0x0800ac74
			{
				//HAL_UART_Transmit(huart, "SLL", 3, 1000);
				char reg_temp[5] = "";
 80013ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80013f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 80013fc:	4bc0      	ldr	r3, [pc, #768]	; (8001700 <emulator+0x9e4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da00      	bge.n	8001406 <emulator+0x6ea>
 8001404:	3303      	adds	r3, #3
 8001406:	109b      	asrs	r3, r3, #2
 8001408:	015b      	lsls	r3, r3, #5
 800140a:	4abe      	ldr	r2, [pc, #760]	; (8001704 <emulator+0x9e8>)
 800140c:	1899      	adds	r1, r3, r2
 800140e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001412:	2305      	movs	r3, #5
 8001414:	220b      	movs	r2, #11
 8001416:	f7ff fbf5 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 800141a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fc54 	bl	8000ccc <binToDec_unsigned>
 8001424:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
				substr(reg_temp, instruction_queue[(pc) / 4], 21, 5);
 8001428:	4bb5      	ldr	r3, [pc, #724]	; (8001700 <emulator+0x9e4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da00      	bge.n	8001432 <emulator+0x716>
 8001430:	3303      	adds	r3, #3
 8001432:	109b      	asrs	r3, r3, #2
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	4ab3      	ldr	r2, [pc, #716]	; (8001704 <emulator+0x9e8>)
 8001438:	1899      	adds	r1, r3, r2
 800143a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800143e:	2305      	movs	r3, #5
 8001440:	2215      	movs	r2, #21
 8001442:	f7ff fbdf 	bl	8000c04 <substr>
				uint32_t shamt = binToDec_unsigned(reg_temp);
 8001446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc3e 	bl	8000ccc <binToDec_unsigned>
 8001450:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8001454:	4baa      	ldr	r3, [pc, #680]	; (8001700 <emulator+0x9e4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da00      	bge.n	800145e <emulator+0x742>
 800145c:	3303      	adds	r3, #3
 800145e:	109b      	asrs	r3, r3, #2
 8001460:	015b      	lsls	r3, r3, #5
 8001462:	4aa8      	ldr	r2, [pc, #672]	; (8001704 <emulator+0x9e8>)
 8001464:	1899      	adds	r1, r3, r2
 8001466:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800146a:	2305      	movs	r3, #5
 800146c:	2210      	movs	r2, #16
 800146e:	f7ff fbc9 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 8001472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fbf1 	bl	8000c5e <binToDec_signed>
 800147c:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
				MIPS_reg[rd] = MIPS_reg[rt] << shamt;
 8001480:	4aa1      	ldr	r2, [pc, #644]	; (8001708 <emulator+0x9ec>)
 8001482:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800148e:	409a      	lsls	r2, r3
 8001490:	499d      	ldr	r1, [pc, #628]	; (8001708 <emulator+0x9ec>)
 8001492:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SRL) == 0)
 800149a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800149e:	499b      	ldr	r1, [pc, #620]	; (800170c <emulator+0x9f0>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ff1d 	bl	80002e0 <strcmp>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d156      	bne.n	800155a <emulator+0x83e>
			{
				//HAL_UART_Transmit(huart, "SRL", 3, 1000);
				char reg_temp[5] = "";
 80014ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80014b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 80014bc:	4b90      	ldr	r3, [pc, #576]	; (8001700 <emulator+0x9e4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da00      	bge.n	80014c6 <emulator+0x7aa>
 80014c4:	3303      	adds	r3, #3
 80014c6:	109b      	asrs	r3, r3, #2
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	4a8e      	ldr	r2, [pc, #568]	; (8001704 <emulator+0x9e8>)
 80014cc:	1899      	adds	r1, r3, r2
 80014ce:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80014d2:	2305      	movs	r3, #5
 80014d4:	220b      	movs	r2, #11
 80014d6:	f7ff fb95 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 80014da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbf4 	bl	8000ccc <binToDec_unsigned>
 80014e4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
				substr(reg_temp, instruction_queue[(pc) / 4], 21, 5);
 80014e8:	4b85      	ldr	r3, [pc, #532]	; (8001700 <emulator+0x9e4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da00      	bge.n	80014f2 <emulator+0x7d6>
 80014f0:	3303      	adds	r3, #3
 80014f2:	109b      	asrs	r3, r3, #2
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	4a83      	ldr	r2, [pc, #524]	; (8001704 <emulator+0x9e8>)
 80014f8:	1899      	adds	r1, r3, r2
 80014fa:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80014fe:	2305      	movs	r3, #5
 8001500:	2215      	movs	r2, #21
 8001502:	f7ff fb7f 	bl	8000c04 <substr>
				uint32_t shamt = binToDec_unsigned(reg_temp);
 8001506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fbde 	bl	8000ccc <binToDec_unsigned>
 8001510:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 8001514:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <emulator+0x9e4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da00      	bge.n	800151e <emulator+0x802>
 800151c:	3303      	adds	r3, #3
 800151e:	109b      	asrs	r3, r3, #2
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	4a78      	ldr	r2, [pc, #480]	; (8001704 <emulator+0x9e8>)
 8001524:	1899      	adds	r1, r3, r2
 8001526:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800152a:	2305      	movs	r3, #5
 800152c:	2210      	movs	r2, #16
 800152e:	f7ff fb69 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 8001532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb91 	bl	8000c5e <binToDec_signed>
 800153c:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
				MIPS_reg[rd] = MIPS_reg[rt] >> shamt;
 8001540:	4a71      	ldr	r2, [pc, #452]	; (8001708 <emulator+0x9ec>)
 8001542:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800154a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800154e:	411a      	asrs	r2, r3
 8001550:	496d      	ldr	r1, [pc, #436]	; (8001708 <emulator+0x9ec>)
 8001552:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SLT) == 0)
 800155a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800155e:	496c      	ldr	r1, [pc, #432]	; (8001710 <emulator+0x9f4>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe febd 	bl	80002e0 <strcmp>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d162      	bne.n	8001632 <emulator+0x916>
			{
				//HAL_UART_Transmit(huart, "SLT", 3, 1000);
				char reg_temp[5] = "";
 800156c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001570:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <emulator+0x9e4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da00      	bge.n	8001586 <emulator+0x86a>
 8001584:	3303      	adds	r3, #3
 8001586:	109b      	asrs	r3, r3, #2
 8001588:	015b      	lsls	r3, r3, #5
 800158a:	4a5e      	ldr	r2, [pc, #376]	; (8001704 <emulator+0x9e8>)
 800158c:	1899      	adds	r1, r3, r2
 800158e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001592:	2305      	movs	r3, #5
 8001594:	2206      	movs	r2, #6
 8001596:	f7ff fb35 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 800159a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb94 	bl	8000ccc <binToDec_unsigned>
 80015a4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <emulator+0x9e4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da00      	bge.n	80015b2 <emulator+0x896>
 80015b0:	3303      	adds	r3, #3
 80015b2:	109b      	asrs	r3, r3, #2
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <emulator+0x9e8>)
 80015b8:	1899      	adds	r1, r3, r2
 80015ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80015be:	2305      	movs	r3, #5
 80015c0:	220b      	movs	r2, #11
 80015c2:	f7ff fb1f 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 80015c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb7e 	bl	8000ccc <binToDec_unsigned>
 80015d0:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 80015d4:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <emulator+0x9e4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <emulator+0x8c2>
 80015dc:	3303      	adds	r3, #3
 80015de:	109b      	asrs	r3, r3, #2
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <emulator+0x9e8>)
 80015e4:	1899      	adds	r1, r3, r2
 80015e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80015ea:	2305      	movs	r3, #5
 80015ec:	2210      	movs	r2, #16
 80015ee:	f7ff fb09 	bl	8000c04 <substr>
				int32_t rd = binToDec_signed(reg_temp);
 80015f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb31 	bl	8000c5e <binToDec_signed>
 80015fc:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
				if (MIPS_reg[rs] < MIPS_reg[rt]) MIPS_reg[rd] = 0x00000001;
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <emulator+0x9ec>)
 8001602:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001606:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800160a:	493f      	ldr	r1, [pc, #252]	; (8001708 <emulator+0x9ec>)
 800160c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001614:	429a      	cmp	r2, r3
 8001616:	da06      	bge.n	8001626 <emulator+0x90a>
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <emulator+0x9ec>)
 800161a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800161e:	2101      	movs	r1, #1
 8001620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001624:	e005      	b.n	8001632 <emulator+0x916>
				else MIPS_reg[rd] = 0x00000000;
 8001626:	4a38      	ldr	r2, [pc, #224]	; (8001708 <emulator+0x9ec>)
 8001628:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800162c:	2100      	movs	r1, #0
 800162e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SLTU) == 0)
 8001632:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001636:	4937      	ldr	r1, [pc, #220]	; (8001714 <emulator+0x9f8>)
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fe51 	bl	80002e0 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d16f      	bne.n	8001724 <emulator+0xa08>
			{
				//HAL_UART_Transmit(huart, "SLTU", 3, 1000);
				char reg_temp[5] = "";
 8001644:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001648:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	711a      	strb	r2, [r3, #4]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <emulator+0x9e4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da00      	bge.n	800165e <emulator+0x942>
 800165c:	3303      	adds	r3, #3
 800165e:	109b      	asrs	r3, r3, #2
 8001660:	015b      	lsls	r3, r3, #5
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <emulator+0x9e8>)
 8001664:	1899      	adds	r1, r3, r2
 8001666:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800166a:	2305      	movs	r3, #5
 800166c:	2206      	movs	r2, #6
 800166e:	f7ff fac9 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001672:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb28 	bl	8000ccc <binToDec_unsigned>
 800167c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <emulator+0x9e4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da00      	bge.n	800168a <emulator+0x96e>
 8001688:	3303      	adds	r3, #3
 800168a:	109b      	asrs	r3, r3, #2
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <emulator+0x9e8>)
 8001690:	1899      	adds	r1, r3, r2
 8001692:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001696:	2305      	movs	r3, #5
 8001698:	220b      	movs	r2, #11
 800169a:	f7ff fab3 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 800169e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb12 	bl	8000ccc <binToDec_unsigned>
 80016a8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
				substr(reg_temp, instruction_queue[(pc) / 4], 16, 5);
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <emulator+0x9e4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <emulator+0x99a>
 80016b4:	3303      	adds	r3, #3
 80016b6:	109b      	asrs	r3, r3, #2
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <emulator+0x9e8>)
 80016bc:	1899      	adds	r1, r3, r2
 80016be:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80016c2:	2305      	movs	r3, #5
 80016c4:	2210      	movs	r2, #16
 80016c6:	f7ff fa9d 	bl	8000c04 <substr>
				uint32_t rd = binToDec_unsigned(reg_temp);
 80016ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fafc 	bl	8000ccc <binToDec_unsigned>
 80016d4:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
				if (MIPS_reg[rs] < MIPS_reg[rt]) MIPS_reg[rd] = 0x00000001;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <emulator+0x9ec>)
 80016da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80016de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016e2:	4909      	ldr	r1, [pc, #36]	; (8001708 <emulator+0x9ec>)
 80016e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80016e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	da13      	bge.n	8001718 <emulator+0x9fc>
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <emulator+0x9ec>)
 80016f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80016f6:	2101      	movs	r1, #1
 80016f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016fc:	e012      	b.n	8001724 <emulator+0xa08>
 80016fe:	bf00      	nop
 8001700:	24001520 	.word	0x24001520
 8001704:	2400089c 	.word	0x2400089c
 8001708:	2400081c 	.word	0x2400081c
 800170c:	0800acbc 	.word	0x0800acbc
 8001710:	0800acc4 	.word	0x0800acc4
 8001714:	0800accc 	.word	0x0800accc
				else MIPS_reg[rd] = 0x00000000;
 8001718:	4a6f      	ldr	r2, [pc, #444]	; (80018d8 <emulator+0xbbc>)
 800171a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800171e:	2100      	movs	r1, #0
 8001720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rd]), 1000);
			}
			if (strcmp(funct, SYSCALL) == 0)
 8001724:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001728:	496c      	ldr	r1, [pc, #432]	; (80018dc <emulator+0xbc0>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fdd8 	bl	80002e0 <strcmp>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 8480 	bne.w	8002038 <emulator+0x131c>
			{
				//HAL_UART_Transmit(huart, "Syscall", 7, 1000);
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001738:	2101      	movs	r1, #1
 800173a:	4869      	ldr	r0, [pc, #420]	; (80018e0 <emulator+0xbc4>)
 800173c:	f002 fef5 	bl	800452a <HAL_GPIO_TogglePin>
				if (MIPS_reg[2] == 1) //print integer
 8001740:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <emulator+0xbbc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d112      	bne.n	800176e <emulator+0xa52>
				{
					HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "!o:%d#", MIPS_reg[4]), 1000);
 8001748:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <emulator+0xbbc>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	461a      	mov	r2, r3
 800174e:	4965      	ldr	r1, [pc, #404]	; (80018e4 <emulator+0xbc8>)
 8001750:	4865      	ldr	r0, [pc, #404]	; (80018e8 <emulator+0xbcc>)
 8001752:	f008 fe0d 	bl	800a370 <siprintf>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800175e:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	4960      	ldr	r1, [pc, #384]	; (80018e8 <emulator+0xbcc>)
 8001768:	6800      	ldr	r0, [r0, #0]
 800176a:	f005 feed 	bl	8007548 <HAL_UART_Transmit>
				}
				if (MIPS_reg[2] == 11) //print char
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <emulator+0xbbc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b0b      	cmp	r3, #11
 8001774:	d112      	bne.n	800179c <emulator+0xa80>
				{
					HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "!o:%c#", MIPS_reg[4]), 1000);
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <emulator+0xbbc>)
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	461a      	mov	r2, r3
 800177c:	495b      	ldr	r1, [pc, #364]	; (80018ec <emulator+0xbd0>)
 800177e:	485a      	ldr	r0, [pc, #360]	; (80018e8 <emulator+0xbcc>)
 8001780:	f008 fdf6 	bl	800a370 <siprintf>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800178c:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001794:	4954      	ldr	r1, [pc, #336]	; (80018e8 <emulator+0xbcc>)
 8001796:	6800      	ldr	r0, [r0, #0]
 8001798:	f005 fed6 	bl	8007548 <HAL_UART_Transmit>
				}
				if (MIPS_reg[2] == 10) //end program, delete all inst in array
 800179c:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <emulator+0xbbc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b0a      	cmp	r3, #10
 80017a2:	f040 8449 	bne.w	8002038 <emulator+0x131c>
				{
					inst_num = 0;
 80017a6:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <emulator+0xbd4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
					pc = 0 - 4;
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <emulator+0xbd8>)
 80017ae:	f06f 0203 	mvn.w	r2, #3
 80017b2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "!e:%c#", '1'), 1000);
 80017b4:	2231      	movs	r2, #49	; 0x31
 80017b6:	4950      	ldr	r1, [pc, #320]	; (80018f8 <emulator+0xbdc>)
 80017b8:	484b      	ldr	r0, [pc, #300]	; (80018e8 <emulator+0xbcc>)
 80017ba:	f008 fdd9 	bl	800a370 <siprintf>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80017c6:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	4946      	ldr	r1, [pc, #280]	; (80018e8 <emulator+0xbcc>)
 80017d0:	6800      	ldr	r0, [r0, #0]
 80017d2:	f005 feb9 	bl	8007548 <HAL_UART_Transmit>
 80017d6:	f000 bc2f 	b.w	8002038 <emulator+0x131c>
				}
			}
		}
		else if (strcmp(opcode, "000010") == 0) // Jump
 80017da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017de:	4947      	ldr	r1, [pc, #284]	; (80018fc <emulator+0xbe0>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd7d 	bl	80002e0 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d133      	bne.n	8001854 <emulator+0xb38>
		{
			//HAL_UART_Transmit(huart, "I", 1, 1000);
			char reg_temp[26] = "";
 80017ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80017f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	829a      	strh	r2, [r3, #20]
			substr(reg_temp, instruction_queue[(pc) / 4], 6, 26);
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <emulator+0xbd8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <emulator+0xaf6>
 8001810:	3303      	adds	r3, #3
 8001812:	109b      	asrs	r3, r3, #2
 8001814:	015b      	lsls	r3, r3, #5
 8001816:	4a3a      	ldr	r2, [pc, #232]	; (8001900 <emulator+0xbe4>)
 8001818:	1899      	adds	r1, r3, r2
 800181a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800181e:	231a      	movs	r3, #26
 8001820:	2206      	movs	r2, #6
 8001822:	f7ff f9ef 	bl	8000c04 <substr>
			uint32_t address = ((pc & 0xf0000000) + binToDec_unsigned(reg_temp) * 4) - 0x00400000;
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <emulator+0xbd8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 4470 	and.w	r4, r3, #4026531840	; 0xf0000000
 800182e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa4a 	bl	8000ccc <binToDec_unsigned>
 8001838:	4603      	mov	r3, r0
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4423      	add	r3, r4
 800183e:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8001842:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			pc = address - 4;
 8001846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184a:	3b04      	subs	r3, #4
 800184c:	461a      	mov	r2, r3
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <emulator+0xbd8>)
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e3f1      	b.n	8002038 <emulator+0x131c>
		}
		else if (strcmp(opcode, "000011") == 0)
 8001854:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001858:	492a      	ldr	r1, [pc, #168]	; (8001904 <emulator+0xbe8>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fd40 	bl	80002e0 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d150      	bne.n	8001908 <emulator+0xbec>
		{
			char reg_temp[26] = "";
 8001866:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800186a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	3304      	adds	r3, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	829a      	strh	r2, [r3, #20]
			substr(reg_temp, instruction_queue[(pc) / 4], 6, 26);
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <emulator+0xbd8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da00      	bge.n	800188c <emulator+0xb70>
 800188a:	3303      	adds	r3, #3
 800188c:	109b      	asrs	r3, r3, #2
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <emulator+0xbe4>)
 8001892:	1899      	adds	r1, r3, r2
 8001894:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001898:	231a      	movs	r3, #26
 800189a:	2206      	movs	r2, #6
 800189c:	f7ff f9b2 	bl	8000c04 <substr>
			uint32_t address = ((pc & 0xf0000000) + binToDec_unsigned(reg_temp) * 4) - 0x00400000;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <emulator+0xbd8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 4470 	and.w	r4, r3, #4026531840	; 0xf0000000
 80018a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa0d 	bl	8000ccc <binToDec_unsigned>
 80018b2:	4603      	mov	r3, r0
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4423      	add	r3, r4
 80018b8:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 80018bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			MIPS_reg[31] = pc;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <emulator+0xbd8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <emulator+0xbbc>)
 80018c6:	67d3      	str	r3, [r2, #124]	; 0x7c
			pc = address - 4;
 80018c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018cc:	3b04      	subs	r3, #4
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <emulator+0xbd8>)
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e3b0      	b.n	8002038 <emulator+0x131c>
 80018d6:	bf00      	nop
 80018d8:	2400081c 	.word	0x2400081c
 80018dc:	0800acd4 	.word	0x0800acd4
 80018e0:	58020400 	.word	0x58020400
 80018e4:	0800acdc 	.word	0x0800acdc
 80018e8:	24001524 	.word	0x24001524
 80018ec:	0800ace4 	.word	0x0800ace4
 80018f0:	2400151c 	.word	0x2400151c
 80018f4:	24001520 	.word	0x24001520
 80018f8:	0800acec 	.word	0x0800acec
 80018fc:	0800acbc 	.word	0x0800acbc
 8001900:	2400089c 	.word	0x2400089c
 8001904:	0800acf4 	.word	0x0800acf4
		}
		else
		{
			//HAL_UART_Transmit(huart, opcode, strlen(opcode), 1000);
			if (strcmp(opcode, ADDI) == 0)
 8001908:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800190c:	49cd      	ldr	r1, [pc, #820]	; (8001c44 <emulator+0xf28>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fce6 	bl	80002e0 <strcmp>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d161      	bne.n	80019de <emulator+0xcc2>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 800191a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800191e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	2200      	movs	r2, #0
 8001928:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 800192a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800192e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	3304      	adds	r3, #4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001940:	4bc1      	ldr	r3, [pc, #772]	; (8001c48 <emulator+0xf2c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da00      	bge.n	800194a <emulator+0xc2e>
 8001948:	3303      	adds	r3, #3
 800194a:	109b      	asrs	r3, r3, #2
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	4abf      	ldr	r2, [pc, #764]	; (8001c4c <emulator+0xf30>)
 8001950:	1899      	adds	r1, r3, r2
 8001952:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001956:	2305      	movs	r3, #5
 8001958:	2206      	movs	r2, #6
 800195a:	f7ff f953 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 800195e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f9b2 	bl	8000ccc <binToDec_unsigned>
 8001968:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 800196c:	4bb6      	ldr	r3, [pc, #728]	; (8001c48 <emulator+0xf2c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <emulator+0xc5a>
 8001974:	3303      	adds	r3, #3
 8001976:	109b      	asrs	r3, r3, #2
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4ab4      	ldr	r2, [pc, #720]	; (8001c4c <emulator+0xf30>)
 800197c:	1899      	adds	r1, r3, r2
 800197e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001982:	2305      	movs	r3, #5
 8001984:	220b      	movs	r2, #11
 8001986:	f7ff f93d 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 800198a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f99c 	bl	8000ccc <binToDec_unsigned>
 8001994:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001998:	4bab      	ldr	r3, [pc, #684]	; (8001c48 <emulator+0xf2c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da00      	bge.n	80019a2 <emulator+0xc86>
 80019a0:	3303      	adds	r3, #3
 80019a2:	109b      	asrs	r3, r3, #2
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	4aa9      	ldr	r2, [pc, #676]	; (8001c4c <emulator+0xf30>)
 80019a8:	1899      	adds	r1, r3, r2
 80019aa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80019ae:	2310      	movs	r3, #16
 80019b0:	2210      	movs	r2, #16
 80019b2:	f7ff f927 	bl	8000c04 <substr>
				int32_t const_num = binToDec_signed(constant);
 80019b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f94f 	bl	8000c5e <binToDec_signed>
 80019c0:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				MIPS_reg[rt] = MIPS_reg[rs] + const_num;
 80019c4:	4aa2      	ldr	r2, [pc, #648]	; (8001c50 <emulator+0xf34>)
 80019c6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80019ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80019d2:	441a      	add	r2, r3
 80019d4:	499e      	ldr	r1, [pc, #632]	; (8001c50 <emulator+0xf34>)
 80019d6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, ADDIU) == 0)
 80019de:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019e2:	499c      	ldr	r1, [pc, #624]	; (8001c54 <emulator+0xf38>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc7b 	bl	80002e0 <strcmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d163      	bne.n	8001ab8 <emulator+0xd9c>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 80019f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 8001a00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a04:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001a16:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <emulator+0xf2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da00      	bge.n	8001a20 <emulator+0xd04>
 8001a1e:	3303      	adds	r3, #3
 8001a20:	109b      	asrs	r3, r3, #2
 8001a22:	015b      	lsls	r3, r3, #5
 8001a24:	4a89      	ldr	r2, [pc, #548]	; (8001c4c <emulator+0xf30>)
 8001a26:	1899      	adds	r1, r3, r2
 8001a28:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	2206      	movs	r2, #6
 8001a30:	f7ff f8e8 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001a34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f947 	bl	8000ccc <binToDec_unsigned>
 8001a3e:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <emulator+0xf2c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da00      	bge.n	8001a4c <emulator+0xd30>
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	109b      	asrs	r3, r3, #2
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	4a7e      	ldr	r2, [pc, #504]	; (8001c4c <emulator+0xf30>)
 8001a52:	1899      	adds	r1, r3, r2
 8001a54:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001a58:	2305      	movs	r3, #5
 8001a5a:	220b      	movs	r2, #11
 8001a5c:	f7ff f8d2 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001a60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f931 	bl	8000ccc <binToDec_unsigned>
 8001a6a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <emulator+0xf2c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da00      	bge.n	8001a78 <emulator+0xd5c>
 8001a76:	3303      	adds	r3, #3
 8001a78:	109b      	asrs	r3, r3, #2
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	4a73      	ldr	r2, [pc, #460]	; (8001c4c <emulator+0xf30>)
 8001a7e:	1899      	adds	r1, r3, r2
 8001a80:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001a84:	2310      	movs	r3, #16
 8001a86:	2210      	movs	r2, #16
 8001a88:	f7ff f8bc 	bl	8000c04 <substr>
				uint32_t const_num = binToDec_unsigned(constant);
 8001a8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f91b 	bl	8000ccc <binToDec_unsigned>
 8001a96:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				MIPS_reg[rt] = MIPS_reg[rs] + const_num;
 8001a9a:	4a6d      	ldr	r2, [pc, #436]	; (8001c50 <emulator+0xf34>)
 8001a9c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001aaa:	4413      	add	r3, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <emulator+0xf34>)
 8001ab0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001ab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, ANDI) == 0)
 8001ab8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001abc:	4966      	ldr	r1, [pc, #408]	; (8001c58 <emulator+0xf3c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fc0e 	bl	80002e0 <strcmp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d161      	bne.n	8001b8e <emulator+0xe72>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 8001aca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ace:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 8001ada:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ade:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <emulator+0xf2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da00      	bge.n	8001afa <emulator+0xdde>
 8001af8:	3303      	adds	r3, #3
 8001afa:	109b      	asrs	r3, r3, #2
 8001afc:	015b      	lsls	r3, r3, #5
 8001afe:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <emulator+0xf30>)
 8001b00:	1899      	adds	r1, r3, r2
 8001b02:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001b06:	2305      	movs	r3, #5
 8001b08:	2206      	movs	r2, #6
 8001b0a:	f7ff f87b 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001b0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8da 	bl	8000ccc <binToDec_unsigned>
 8001b18:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <emulator+0xf2c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <emulator+0xe0a>
 8001b24:	3303      	adds	r3, #3
 8001b26:	109b      	asrs	r3, r3, #2
 8001b28:	015b      	lsls	r3, r3, #5
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <emulator+0xf30>)
 8001b2c:	1899      	adds	r1, r3, r2
 8001b2e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001b32:	2305      	movs	r3, #5
 8001b34:	220b      	movs	r2, #11
 8001b36:	f7ff f865 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001b3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f8c4 	bl	8000ccc <binToDec_unsigned>
 8001b44:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <emulator+0xf2c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <emulator+0xe36>
 8001b50:	3303      	adds	r3, #3
 8001b52:	109b      	asrs	r3, r3, #2
 8001b54:	015b      	lsls	r3, r3, #5
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <emulator+0xf30>)
 8001b58:	1899      	adds	r1, r3, r2
 8001b5a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001b5e:	2310      	movs	r3, #16
 8001b60:	2210      	movs	r2, #16
 8001b62:	f7ff f84f 	bl	8000c04 <substr>
				int32_t const_num = binToDec_signed(constant);
 8001b66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f877 	bl	8000c5e <binToDec_signed>
 8001b70:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				MIPS_reg[rt] = MIPS_reg[rs] & const_num;
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <emulator+0xf34>)
 8001b76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001b7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b7e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001b82:	401a      	ands	r2, r3
 8001b84:	4932      	ldr	r1, [pc, #200]	; (8001c50 <emulator+0xf34>)
 8001b86:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, ORI) == 0)
 8001b8e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b92:	4932      	ldr	r1, [pc, #200]	; (8001c5c <emulator+0xf40>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fba3 	bl	80002e0 <strcmp>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d171      	bne.n	8001c84 <emulator+0xf68>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 8001ba0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ba4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 8001bb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bb4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <emulator+0xf2c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da00      	bge.n	8001bd0 <emulator+0xeb4>
 8001bce:	3303      	adds	r3, #3
 8001bd0:	109b      	asrs	r3, r3, #2
 8001bd2:	015b      	lsls	r3, r3, #5
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <emulator+0xf30>)
 8001bd6:	1899      	adds	r1, r3, r2
 8001bd8:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001bdc:	2305      	movs	r3, #5
 8001bde:	2206      	movs	r2, #6
 8001be0:	f7ff f810 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001be4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f86f 	bl	8000ccc <binToDec_unsigned>
 8001bee:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <emulator+0xf2c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da00      	bge.n	8001bfc <emulator+0xee0>
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	109b      	asrs	r3, r3, #2
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <emulator+0xf30>)
 8001c02:	1899      	adds	r1, r3, r2
 8001c04:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001c08:	2305      	movs	r3, #5
 8001c0a:	220b      	movs	r2, #11
 8001c0c:	f7fe fffa 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001c10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f859 	bl	8000ccc <binToDec_unsigned>
 8001c1a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <emulator+0xf2c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da00      	bge.n	8001c28 <emulator+0xf0c>
 8001c26:	3303      	adds	r3, #3
 8001c28:	109b      	asrs	r3, r3, #2
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <emulator+0xf30>)
 8001c2e:	1899      	adds	r1, r3, r2
 8001c30:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001c34:	2310      	movs	r3, #16
 8001c36:	2210      	movs	r2, #16
 8001c38:	f7fe ffe4 	bl	8000c04 <substr>
				int32_t const_num = binToDec_signed(constant);
 8001c3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c40:	e00e      	b.n	8001c60 <emulator+0xf44>
 8001c42:	bf00      	nop
 8001c44:	0800acb4 	.word	0x0800acb4
 8001c48:	24001520 	.word	0x24001520
 8001c4c:	2400089c 	.word	0x2400089c
 8001c50:	2400081c 	.word	0x2400081c
 8001c54:	0800acfc 	.word	0x0800acfc
 8001c58:	0800acd4 	.word	0x0800acd4
 8001c5c:	0800ad04 	.word	0x0800ad04
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fffc 	bl	8000c5e <binToDec_signed>
 8001c66:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				MIPS_reg[rt] = MIPS_reg[rs] | const_num;
 8001c6a:	4a78      	ldr	r2, [pc, #480]	; (8001e4c <emulator+0x1130>)
 8001c6c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001c70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c74:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	4974      	ldr	r1, [pc, #464]	; (8001e4c <emulator+0x1130>)
 8001c7c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, SLTI) == 0)
 8001c84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c88:	4971      	ldr	r1, [pc, #452]	; (8001e50 <emulator+0x1134>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fb28 	bl	80002e0 <strcmp>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d16a      	bne.n	8001d6c <emulator+0x1050>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 8001c96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c9a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 8001ca6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001caa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001cbc:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <emulator+0x1138>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da00      	bge.n	8001cc6 <emulator+0xfaa>
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	109b      	asrs	r3, r3, #2
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <emulator+0x113c>)
 8001ccc:	1899      	adds	r1, r3, r2
 8001cce:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	f7fe ff95 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fff4 	bl	8000ccc <binToDec_unsigned>
 8001ce4:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <emulator+0x1138>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da00      	bge.n	8001cf2 <emulator+0xfd6>
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	109b      	asrs	r3, r3, #2
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <emulator+0x113c>)
 8001cf8:	1899      	adds	r1, r3, r2
 8001cfa:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001cfe:	2305      	movs	r3, #5
 8001d00:	220b      	movs	r2, #11
 8001d02:	f7fe ff7f 	bl	8000c04 <substr>
				uint32_t rd = binToDec_unsigned(reg_temp);
 8001d06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ffde 	bl	8000ccc <binToDec_unsigned>
 8001d10:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <emulator+0x1138>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da00      	bge.n	8001d1e <emulator+0x1002>
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	109b      	asrs	r3, r3, #2
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <emulator+0x113c>)
 8001d24:	1899      	adds	r1, r3, r2
 8001d26:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	f7fe ff69 	bl	8000c04 <substr>
				int32_t const_num = binToDec_signed(constant);
 8001d32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff91 	bl	8000c5e <binToDec_signed>
 8001d3c:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				if (MIPS_reg[rt] < const_num) MIPS_reg[rd] = 0x00000001;
 8001d40:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <emulator+0x1130>)
 8001d42:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dd06      	ble.n	8001d60 <emulator+0x1044>
 8001d52:	4a3e      	ldr	r2, [pc, #248]	; (8001e4c <emulator+0x1130>)
 8001d54:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001d58:	2101      	movs	r1, #1
 8001d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001d5e:	e005      	b.n	8001d6c <emulator+0x1050>
				else MIPS_reg[rd] = 0x00000000;
 8001d60:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <emulator+0x1130>)
 8001d62:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001d66:	2100      	movs	r1, #0
 8001d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, SLTIU) == 0)
 8001d6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d70:	493a      	ldr	r1, [pc, #232]	; (8001e5c <emulator+0x1140>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fab4 	bl	80002e0 <strcmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d176      	bne.n	8001e6c <emulator+0x1150>
			{
				//HAL_UART_Transmit(huart, "ADDI", 4, 1000);
				char reg_temp[5] = "";
 8001d7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d82:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	711a      	strb	r2, [r3, #4]
				char constant[16] = "";
 8001d8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d92:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <emulator+0x1138>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da00      	bge.n	8001dae <emulator+0x1092>
 8001dac:	3303      	adds	r3, #3
 8001dae:	109b      	asrs	r3, r3, #2
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <emulator+0x113c>)
 8001db4:	1899      	adds	r1, r3, r2
 8001db6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001dba:	2305      	movs	r3, #5
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	f7fe ff21 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ff80 	bl	8000ccc <binToDec_unsigned>
 8001dcc:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <emulator+0x1138>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da00      	bge.n	8001dda <emulator+0x10be>
 8001dd8:	3303      	adds	r3, #3
 8001dda:	109b      	asrs	r3, r3, #2
 8001ddc:	015b      	lsls	r3, r3, #5
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <emulator+0x113c>)
 8001de0:	1899      	adds	r1, r3, r2
 8001de2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001de6:	2305      	movs	r3, #5
 8001de8:	220b      	movs	r2, #11
 8001dea:	f7fe ff0b 	bl	8000c04 <substr>
				uint32_t rd = binToDec_unsigned(reg_temp);
 8001dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ff6a 	bl	8000ccc <binToDec_unsigned>
 8001df8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
				substr(constant, instruction_queue[(pc) / 4], 16, 16);
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <emulator+0x1138>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da00      	bge.n	8001e06 <emulator+0x10ea>
 8001e04:	3303      	adds	r3, #3
 8001e06:	109b      	asrs	r3, r3, #2
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <emulator+0x113c>)
 8001e0c:	1899      	adds	r1, r3, r2
 8001e0e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e12:	2310      	movs	r3, #16
 8001e14:	2210      	movs	r2, #16
 8001e16:	f7fe fef5 	bl	8000c04 <substr>
				uint32_t const_num = binToDec_unsigned(constant);
 8001e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ff54 	bl	8000ccc <binToDec_unsigned>
 8001e24:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%ld", rt), 2000);
				if (MIPS_reg[rt] < const_num) MIPS_reg[rd] = 0x00000001;
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <emulator+0x1130>)
 8001e2a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d911      	bls.n	8001e60 <emulator+0x1144>
 8001e3c:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <emulator+0x1130>)
 8001e3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e42:	2101      	movs	r1, #1
 8001e44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e48:	e010      	b.n	8001e6c <emulator+0x1150>
 8001e4a:	bf00      	nop
 8001e4c:	2400081c 	.word	0x2400081c
 8001e50:	0800ad0c 	.word	0x0800ad0c
 8001e54:	24001520 	.word	0x24001520
 8001e58:	2400089c 	.word	0x2400089c
 8001e5c:	0800ad14 	.word	0x0800ad14
				else MIPS_reg[rd] = 0x00000000;
 8001e60:	4a7a      	ldr	r2, [pc, #488]	; (800204c <emulator+0x1330>)
 8001e62:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e66:	2100      	movs	r1, #0
 8001e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//sprintf(MIPS_reg[rt], "%d", sum);
				//HAL_UART_Transmit(huart, writeStr1, sprintf(writeStr1, "%d", MIPS_reg[rt]), 1000);
			}
			if (strcmp(opcode, BEQ) == 0)
 8001e6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001e70:	4977      	ldr	r1, [pc, #476]	; (8002050 <emulator+0x1334>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fa34 	bl	80002e0 <strcmp>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d169      	bne.n	8001f52 <emulator+0x1236>
			{
				char reg_temp[5] = "";
 8001e7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	711a      	strb	r2, [r3, #4]
				char target_address[16] = "";
 8001e8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e92:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <emulator+0x1338>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da00      	bge.n	8001eae <emulator+0x1192>
 8001eac:	3303      	adds	r3, #3
 8001eae:	109b      	asrs	r3, r3, #2
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	4a69      	ldr	r2, [pc, #420]	; (8002058 <emulator+0x133c>)
 8001eb4:	1899      	adds	r1, r3, r2
 8001eb6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001eba:	2305      	movs	r3, #5
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	f7fe fea1 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ff00 	bl	8000ccc <binToDec_unsigned>
 8001ecc:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <emulator+0x1338>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da00      	bge.n	8001eda <emulator+0x11be>
 8001ed8:	3303      	adds	r3, #3
 8001eda:	109b      	asrs	r3, r3, #2
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4a5e      	ldr	r2, [pc, #376]	; (8002058 <emulator+0x133c>)
 8001ee0:	1899      	adds	r1, r3, r2
 8001ee2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	220b      	movs	r2, #11
 8001eea:	f7fe fe8b 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe feea 	bl	8000ccc <binToDec_unsigned>
 8001ef8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
				substr(target_address, instruction_queue[(pc) / 4], 16, 16);
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <emulator+0x1338>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	da00      	bge.n	8001f06 <emulator+0x11ea>
 8001f04:	3303      	adds	r3, #3
 8001f06:	109b      	asrs	r3, r3, #2
 8001f08:	015b      	lsls	r3, r3, #5
 8001f0a:	4a53      	ldr	r2, [pc, #332]	; (8002058 <emulator+0x133c>)
 8001f0c:	1899      	adds	r1, r3, r2
 8001f0e:	f107 0020 	add.w	r0, r7, #32
 8001f12:	2310      	movs	r3, #16
 8001f14:	2210      	movs	r2, #16
 8001f16:	f7fe fe75 	bl	8000c04 <substr>
				int32_t address = pc + binToDec_signed(target_address) * 4;
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fe9d 	bl	8000c5e <binToDec_signed>
 8001f24:	4603      	mov	r3, r0
 8001f26:	009a      	lsls	r2, r3, #2
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <emulator+0x1338>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
				if (MIPS_reg[rs] == MIPS_reg[rt]) pc = address;
 8001f32:	4a46      	ldr	r2, [pc, #280]	; (800204c <emulator+0x1330>)
 8001f34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f3c:	4943      	ldr	r1, [pc, #268]	; (800204c <emulator+0x1330>)
 8001f3e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d103      	bne.n	8001f52 <emulator+0x1236>
 8001f4a:	4a42      	ldr	r2, [pc, #264]	; (8002054 <emulator+0x1338>)
 8001f4c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001f50:	6013      	str	r3, [r2, #0]
			}
			if (strcmp(opcode, BNE) == 0)
 8001f52:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f56:	4941      	ldr	r1, [pc, #260]	; (800205c <emulator+0x1340>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe f9c1 	bl	80002e0 <strcmp>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d169      	bne.n	8002038 <emulator+0x131c>
			{
				char reg_temp[5] = "";
 8001f64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f68:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	711a      	strb	r2, [r3, #4]
				char target_address[16] = "";
 8001f74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
				substr(reg_temp, instruction_queue[(pc) / 4], 6, 5);
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <emulator+0x1338>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da00      	bge.n	8001f94 <emulator+0x1278>
 8001f92:	3303      	adds	r3, #3
 8001f94:	109b      	asrs	r3, r3, #2
 8001f96:	015b      	lsls	r3, r3, #5
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <emulator+0x133c>)
 8001f9a:	1899      	adds	r1, r3, r2
 8001f9c:	f107 0018 	add.w	r0, r7, #24
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	f7fe fe2e 	bl	8000c04 <substr>
				uint32_t rs = binToDec_unsigned(reg_temp);
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fe8d 	bl	8000ccc <binToDec_unsigned>
 8001fb2:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
				substr(reg_temp, instruction_queue[(pc) / 4], 11, 5);
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <emulator+0x1338>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da00      	bge.n	8001fc0 <emulator+0x12a4>
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	109b      	asrs	r3, r3, #2
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <emulator+0x133c>)
 8001fc6:	1899      	adds	r1, r3, r2
 8001fc8:	f107 0018 	add.w	r0, r7, #24
 8001fcc:	2305      	movs	r3, #5
 8001fce:	220b      	movs	r2, #11
 8001fd0:	f7fe fe18 	bl	8000c04 <substr>
				uint32_t rt = binToDec_unsigned(reg_temp);
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe77 	bl	8000ccc <binToDec_unsigned>
 8001fde:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
				substr(target_address, instruction_queue[(pc) / 4], 16, 16);
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <emulator+0x1338>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da00      	bge.n	8001fec <emulator+0x12d0>
 8001fea:	3303      	adds	r3, #3
 8001fec:	109b      	asrs	r3, r3, #2
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	4a19      	ldr	r2, [pc, #100]	; (8002058 <emulator+0x133c>)
 8001ff2:	1899      	adds	r1, r3, r2
 8001ff4:	f107 0008 	add.w	r0, r7, #8
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	f7fe fe02 	bl	8000c04 <substr>
				int32_t address = pc + binToDec_signed(target_address) * 4;
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fe2a 	bl	8000c5e <binToDec_signed>
 800200a:	4603      	mov	r3, r0
 800200c:	009a      	lsls	r2, r3, #2
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <emulator+0x1338>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
				if (MIPS_reg[rs] != MIPS_reg[rt]) pc = address;
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <emulator+0x1330>)
 800201a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800201e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <emulator+0x1330>)
 8002024:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800202c:	429a      	cmp	r2, r3
 800202e:	d003      	beq.n	8002038 <emulator+0x131c>
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <emulator+0x1338>)
 8002032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
			}

		}
		pc += 4;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <emulator+0x1338>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3304      	adds	r3, #4
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <emulator+0x1338>)
 8002040:	6013      	str	r3, [r2, #0]
	}
}
 8002042:	bf00      	nop
 8002044:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	2400081c 	.word	0x2400081c
 8002050:	0800ad1c 	.word	0x0800ad1c
 8002054:	24001520 	.word	0x24001520
 8002058:	2400089c 	.word	0x2400089c
 800205c:	0800ad24 	.word	0x0800ad24

08002060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_MspInit+0x30>)
 8002068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800206c:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_MspInit+0x30>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_MspInit+0x30>)
 8002078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	58024400 	.word	0x58024400

08002094 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a59      	ldr	r2, [pc, #356]	; (8002218 <HAL_ETH_MspInit+0x184>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f040 80ab 	bne.w	800220e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80020b8:	4b58      	ldr	r3, [pc, #352]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020be:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020c8:	4b54      	ldr	r3, [pc, #336]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_ETH_MspInit+0x188>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	4a40      	ldr	r2, [pc, #256]	; (800221c <HAL_ETH_MspInit+0x188>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	4a39      	ldr	r2, [pc, #228]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002154:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_ETH_MspInit+0x188>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_ETH_MspInit+0x188>)
 8002174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_ETH_MspInit+0x188>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800218a:	2332      	movs	r3, #50	; 0x32
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800219a:	230b      	movs	r3, #11
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	481e      	ldr	r0, [pc, #120]	; (8002220 <HAL_ETH_MspInit+0x18c>)
 80021a6:	f001 fff7 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80021aa:	2386      	movs	r3, #134	; 0x86
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ba:	230b      	movs	r3, #11
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c2:	4619      	mov	r1, r3
 80021c4:	4817      	ldr	r0, [pc, #92]	; (8002224 <HAL_ETH_MspInit+0x190>)
 80021c6:	f001 ffe7 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021dc:	230b      	movs	r3, #11
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4810      	ldr	r0, [pc, #64]	; (8002228 <HAL_ETH_MspInit+0x194>)
 80021e8:	f001 ffd6 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80021ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021fe:	230b      	movs	r3, #11
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002206:	4619      	mov	r1, r3
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <HAL_ETH_MspInit+0x198>)
 800220a:	f001 ffc5 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3738      	adds	r7, #56	; 0x38
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40028000 	.word	0x40028000
 800221c:	58024400 	.word	0x58024400
 8002220:	58020800 	.word	0x58020800
 8002224:	58020000 	.word	0x58020000
 8002228:	58020400 	.word	0x58020400
 800222c:	58021800 	.word	0x58021800

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0ba      	sub	sp, #232	; 0xe8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	22c0      	movs	r2, #192	; 0xc0
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f008 f885 	bl	800a360 <memset>
  if(huart->Instance==USART3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_UART_MspInit+0xd8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d14e      	bne.n	80022fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002260:	f04f 0202 	mov.w	r2, #2
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4618      	mov	r0, r3
 8002278:	f003 faea 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002282:	f7fe fc9f 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_UART_MspInit+0xdc>)
 8002288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_UART_MspInit+0xdc>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_UART_MspInit+0xdc>)
 8002298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800229c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_UART_MspInit+0xdc>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_UART_MspInit+0xdc>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_UART_MspInit+0xdc>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022dc:	2307      	movs	r3, #7
 80022de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <HAL_UART_MspInit+0xe0>)
 80022ea:	f001 ff55 	bl	8004198 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2027      	movs	r0, #39	; 0x27
 80022f4:	f000 fd93 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022f8:	2027      	movs	r0, #39	; 0x27
 80022fa:	f000 fdaa 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	37e8      	adds	r7, #232	; 0xe8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40004800 	.word	0x40004800
 800230c:	58024400 	.word	0x58024400
 8002310:	58020c00 	.word	0x58020c00

08002314 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0ba      	sub	sp, #232	; 0xe8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	22c0      	movs	r2, #192	; 0xc0
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f008 f813 	bl	800a360 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_PCD_MspInit+0xec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d159      	bne.n	80023f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fa77 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002368:	f7fe fc2c 	bl	8000bc4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800236c:	f002 fa7a 	bl	8004864 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800238e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80023a8:	230a      	movs	r3, #10
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4814      	ldr	r0, [pc, #80]	; (8002408 <HAL_PCD_MspInit+0xf4>)
 80023b6:	f001 feef 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023d2:	4619      	mov	r1, r3
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <HAL_PCD_MspInit+0xf4>)
 80023d6:	f001 fedf 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 80023dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023e0:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 80023e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_PCD_MspInit+0xf0>)
 80023ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	37e8      	adds	r7, #232	; 0xe8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40080000 	.word	0x40080000
 8002404:	58024400 	.word	0x58024400
 8002408:	58020000 	.word	0x58020000

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 fba2 	bl	8002ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART3_IRQHandler+0x10>)
 8002466:	f005 f949 	bl	80076fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	24000248 	.word	0x24000248

08002474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <_sbrk+0x5c>)
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <_sbrk+0x60>)
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_sbrk+0x64>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <_sbrk+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a4:	f007 ff32 	bl	800a30c <__errno>
 80024a8:	4603      	mov	r3, r0
 80024aa:	220c      	movs	r2, #12
 80024ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e009      	b.n	80024c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <_sbrk+0x64>)
 80024c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	24080000 	.word	0x24080000
 80024d4:	00000400 	.word	0x00000400
 80024d8:	24001558 	.word	0x24001558
 80024dc:	24001580 	.word	0x24001580

080024e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <SystemInit+0xe4>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	4a36      	ldr	r2, [pc, #216]	; (80025c4 <SystemInit+0xe4>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <SystemInit+0xe8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d807      	bhi.n	8002510 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <SystemInit+0xe8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 030f 	bic.w	r3, r3, #15
 8002508:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <SystemInit+0xe8>)
 800250a:	f043 0307 	orr.w	r3, r3, #7
 800250e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <SystemInit+0xec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <SystemInit+0xec>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800251c:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <SystemInit+0xec>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <SystemInit+0xec>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4929      	ldr	r1, [pc, #164]	; (80025cc <SystemInit+0xec>)
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <SystemInit+0xf0>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <SystemInit+0xe8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <SystemInit+0xe8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 030f 	bic.w	r3, r3, #15
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <SystemInit+0xe8>)
 8002544:	f043 0307 	orr.w	r3, r3, #7
 8002548:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <SystemInit+0xec>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <SystemInit+0xec>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <SystemInit+0xec>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <SystemInit+0xec>)
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <SystemInit+0xf4>)
 8002560:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <SystemInit+0xec>)
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <SystemInit+0xf8>)
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <SystemInit+0xec>)
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <SystemInit+0xfc>)
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <SystemInit+0xec>)
 8002570:	2200      	movs	r2, #0
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <SystemInit+0xec>)
 8002576:	4a19      	ldr	r2, [pc, #100]	; (80025dc <SystemInit+0xfc>)
 8002578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <SystemInit+0xec>)
 800257c:	2200      	movs	r2, #0
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <SystemInit+0xec>)
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <SystemInit+0xfc>)
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <SystemInit+0xec>)
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <SystemInit+0xec>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <SystemInit+0xec>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <SystemInit+0xec>)
 800259a:	2200      	movs	r2, #0
 800259c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <SystemInit+0x100>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <SystemInit+0x104>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025aa:	d202      	bcs.n	80025b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <SystemInit+0x108>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <SystemInit+0x10c>)
 80025b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00
 80025c8:	52002000 	.word	0x52002000
 80025cc:	58024400 	.word	0x58024400
 80025d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d4:	02020200 	.word	0x02020200
 80025d8:	01ff0000 	.word	0x01ff0000
 80025dc:	01010280 	.word	0x01010280
 80025e0:	5c001000 	.word	0x5c001000
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	51008108 	.word	0x51008108
 80025ec:	52004000 	.word	0x52004000

080025f0 <command_parser>:
char hexToBin[16][4] = {"0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001",
						"1010", "1011", "1100", "1101", "1110", "1111"};
int CMD_flag = 0;

void command_parser()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(huart, buffer[idx], 1, 1000);
	switch (cmdParserState)
 80025f4:	4bbd      	ldr	r3, [pc, #756]	; (80028ec <command_parser+0x2fc>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <command_parser+0x12>
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d01b      	beq.n	8002638 <command_parser+0x48>
//			buffer_index = 0;
//			cmdParserState = IDLE;
//		}
		break;
	}
}
 8002600:	e206      	b.n	8002a10 <command_parser+0x420>
		strcpy(cmdStr, "");
 8002602:	4bbb      	ldr	r3, [pc, #748]	; (80028f0 <command_parser+0x300>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!')
 8002608:	4bba      	ldr	r3, [pc, #744]	; (80028f4 <command_parser+0x304>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4aba      	ldr	r2, [pc, #744]	; (80028f8 <command_parser+0x308>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	2b21      	cmp	r3, #33	; 0x21
 8002612:	d108      	bne.n	8002626 <command_parser+0x36>
			cmdParserState = CMD_WAITING;
 8002614:	4bb5      	ldr	r3, [pc, #724]	; (80028ec <command_parser+0x2fc>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800261a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261e:	48b7      	ldr	r0, [pc, #732]	; (80028fc <command_parser+0x30c>)
 8002620:	f001 ff83 	bl	800452a <HAL_GPIO_TogglePin>
 8002624:	e002      	b.n	800262c <command_parser+0x3c>
		else cmdParserState = IDLE;
 8002626:	4bb1      	ldr	r3, [pc, #708]	; (80028ec <command_parser+0x2fc>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
		idx++;
 800262c:	4bb1      	ldr	r3, [pc, #708]	; (80028f4 <command_parser+0x304>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4ab0      	ldr	r2, [pc, #704]	; (80028f4 <command_parser+0x304>)
 8002634:	6013      	str	r3, [r2, #0]
		break;
 8002636:	e1eb      	b.n	8002a10 <command_parser+0x420>
		switch (buffer[idx])
 8002638:	4bae      	ldr	r3, [pc, #696]	; (80028f4 <command_parser+0x304>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4aae      	ldr	r2, [pc, #696]	; (80028f8 <command_parser+0x308>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	3b23      	subs	r3, #35	; 0x23
 8002642:	2b43      	cmp	r3, #67	; 0x43
 8002644:	f200 81d9 	bhi.w	80029fa <command_parser+0x40a>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <command_parser+0x60>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	080029e1 	.word	0x080029e1
 8002654:	080029fb 	.word	0x080029fb
 8002658:	080029fb 	.word	0x080029fb
 800265c:	080029fb 	.word	0x080029fb
 8002660:	080029fb 	.word	0x080029fb
 8002664:	080029fb 	.word	0x080029fb
 8002668:	080029fb 	.word	0x080029fb
 800266c:	080029fb 	.word	0x080029fb
 8002670:	080029fb 	.word	0x080029fb
 8002674:	080029fb 	.word	0x080029fb
 8002678:	080029fb 	.word	0x080029fb
 800267c:	080029fb 	.word	0x080029fb
 8002680:	080029fb 	.word	0x080029fb
 8002684:	08002761 	.word	0x08002761
 8002688:	08002785 	.word	0x08002785
 800268c:	080027a9 	.word	0x080027a9
 8002690:	080027cd 	.word	0x080027cd
 8002694:	080027f1 	.word	0x080027f1
 8002698:	08002815 	.word	0x08002815
 800269c:	08002839 	.word	0x08002839
 80026a0:	0800285d 	.word	0x0800285d
 80026a4:	08002881 	.word	0x08002881
 80026a8:	080028a5 	.word	0x080028a5
 80026ac:	080029fb 	.word	0x080029fb
 80026b0:	080029fb 	.word	0x080029fb
 80026b4:	080029fb 	.word	0x080029fb
 80026b8:	080029fb 	.word	0x080029fb
 80026bc:	080029fb 	.word	0x080029fb
 80026c0:	080029fb 	.word	0x080029fb
 80026c4:	080029fb 	.word	0x080029fb
 80026c8:	080029fb 	.word	0x080029fb
 80026cc:	080029fb 	.word	0x080029fb
 80026d0:	080029fb 	.word	0x080029fb
 80026d4:	080029fb 	.word	0x080029fb
 80026d8:	080029fb 	.word	0x080029fb
 80026dc:	080029fb 	.word	0x080029fb
 80026e0:	080029fb 	.word	0x080029fb
 80026e4:	080029fb 	.word	0x080029fb
 80026e8:	080029fb 	.word	0x080029fb
 80026ec:	080029fb 	.word	0x080029fb
 80026f0:	080029fb 	.word	0x080029fb
 80026f4:	080029fb 	.word	0x080029fb
 80026f8:	080029fb 	.word	0x080029fb
 80026fc:	080029fb 	.word	0x080029fb
 8002700:	080029fb 	.word	0x080029fb
 8002704:	080029fb 	.word	0x080029fb
 8002708:	080029fb 	.word	0x080029fb
 800270c:	080029fb 	.word	0x080029fb
 8002710:	080029fb 	.word	0x080029fb
 8002714:	080029fb 	.word	0x080029fb
 8002718:	080029fb 	.word	0x080029fb
 800271c:	080029fb 	.word	0x080029fb
 8002720:	080029fb 	.word	0x080029fb
 8002724:	080029fb 	.word	0x080029fb
 8002728:	080029fb 	.word	0x080029fb
 800272c:	080029fb 	.word	0x080029fb
 8002730:	080029fb 	.word	0x080029fb
 8002734:	080029fb 	.word	0x080029fb
 8002738:	080029fb 	.word	0x080029fb
 800273c:	080029fb 	.word	0x080029fb
 8002740:	080029fb 	.word	0x080029fb
 8002744:	080029fb 	.word	0x080029fb
 8002748:	080028c9 	.word	0x080028c9
 800274c:	0800292d 	.word	0x0800292d
 8002750:	08002951 	.word	0x08002951
 8002754:	08002975 	.word	0x08002975
 8002758:	08002999 	.word	0x08002999
 800275c:	080029bd 	.word	0x080029bd
			strcat(cmdStr, "0000");
 8002760:	4863      	ldr	r0, [pc, #396]	; (80028f0 <command_parser+0x300>)
 8002762:	f7fd fdc7 	bl	80002f4 <strlen>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <command_parser+0x300>)
 800276c:	4413      	add	r3, r2
 800276e:	4a64      	ldr	r2, [pc, #400]	; (8002900 <command_parser+0x310>)
 8002770:	6810      	ldr	r0, [r2, #0]
 8002772:	6018      	str	r0, [r3, #0]
 8002774:	7912      	ldrb	r2, [r2, #4]
 8002776:	711a      	strb	r2, [r3, #4]
			idx++;
 8002778:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <command_parser+0x304>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <command_parser+0x304>)
 8002780:	6013      	str	r3, [r2, #0]
			break;
 8002782:	e144      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0001");
 8002784:	485a      	ldr	r0, [pc, #360]	; (80028f0 <command_parser+0x300>)
 8002786:	f7fd fdb5 	bl	80002f4 <strlen>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <command_parser+0x300>)
 8002790:	4413      	add	r3, r2
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <command_parser+0x314>)
 8002794:	6810      	ldr	r0, [r2, #0]
 8002796:	6018      	str	r0, [r3, #0]
 8002798:	7912      	ldrb	r2, [r2, #4]
 800279a:	711a      	strb	r2, [r3, #4]
			idx++;
 800279c:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <command_parser+0x304>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <command_parser+0x304>)
 80027a4:	6013      	str	r3, [r2, #0]
			break;
 80027a6:	e132      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0010");
 80027a8:	4851      	ldr	r0, [pc, #324]	; (80028f0 <command_parser+0x300>)
 80027aa:	f7fd fda3 	bl	80002f4 <strlen>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b4f      	ldr	r3, [pc, #316]	; (80028f0 <command_parser+0x300>)
 80027b4:	4413      	add	r3, r2
 80027b6:	4a54      	ldr	r2, [pc, #336]	; (8002908 <command_parser+0x318>)
 80027b8:	6810      	ldr	r0, [r2, #0]
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	7912      	ldrb	r2, [r2, #4]
 80027be:	711a      	strb	r2, [r3, #4]
			idx++;
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <command_parser+0x304>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <command_parser+0x304>)
 80027c8:	6013      	str	r3, [r2, #0]
			break;
 80027ca:	e120      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0011");
 80027cc:	4848      	ldr	r0, [pc, #288]	; (80028f0 <command_parser+0x300>)
 80027ce:	f7fd fd91 	bl	80002f4 <strlen>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <command_parser+0x300>)
 80027d8:	4413      	add	r3, r2
 80027da:	4a4c      	ldr	r2, [pc, #304]	; (800290c <command_parser+0x31c>)
 80027dc:	6810      	ldr	r0, [r2, #0]
 80027de:	6018      	str	r0, [r3, #0]
 80027e0:	7912      	ldrb	r2, [r2, #4]
 80027e2:	711a      	strb	r2, [r3, #4]
			idx++;
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <command_parser+0x304>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a42      	ldr	r2, [pc, #264]	; (80028f4 <command_parser+0x304>)
 80027ec:	6013      	str	r3, [r2, #0]
			break;
 80027ee:	e10e      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0100");
 80027f0:	483f      	ldr	r0, [pc, #252]	; (80028f0 <command_parser+0x300>)
 80027f2:	f7fd fd7f 	bl	80002f4 <strlen>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <command_parser+0x300>)
 80027fc:	4413      	add	r3, r2
 80027fe:	4a44      	ldr	r2, [pc, #272]	; (8002910 <command_parser+0x320>)
 8002800:	6810      	ldr	r0, [r2, #0]
 8002802:	6018      	str	r0, [r3, #0]
 8002804:	7912      	ldrb	r2, [r2, #4]
 8002806:	711a      	strb	r2, [r3, #4]
			idx++;
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <command_parser+0x304>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <command_parser+0x304>)
 8002810:	6013      	str	r3, [r2, #0]
			break;
 8002812:	e0fc      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0101");
 8002814:	4836      	ldr	r0, [pc, #216]	; (80028f0 <command_parser+0x300>)
 8002816:	f7fd fd6d 	bl	80002f4 <strlen>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <command_parser+0x300>)
 8002820:	4413      	add	r3, r2
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <command_parser+0x324>)
 8002824:	6810      	ldr	r0, [r2, #0]
 8002826:	6018      	str	r0, [r3, #0]
 8002828:	7912      	ldrb	r2, [r2, #4]
 800282a:	711a      	strb	r2, [r3, #4]
			idx++;
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <command_parser+0x304>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <command_parser+0x304>)
 8002834:	6013      	str	r3, [r2, #0]
			break;
 8002836:	e0ea      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0110");
 8002838:	482d      	ldr	r0, [pc, #180]	; (80028f0 <command_parser+0x300>)
 800283a:	f7fd fd5b 	bl	80002f4 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <command_parser+0x300>)
 8002844:	4413      	add	r3, r2
 8002846:	4a34      	ldr	r2, [pc, #208]	; (8002918 <command_parser+0x328>)
 8002848:	6810      	ldr	r0, [r2, #0]
 800284a:	6018      	str	r0, [r3, #0]
 800284c:	7912      	ldrb	r2, [r2, #4]
 800284e:	711a      	strb	r2, [r3, #4]
			idx++;
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <command_parser+0x304>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <command_parser+0x304>)
 8002858:	6013      	str	r3, [r2, #0]
			break;
 800285a:	e0d8      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "0111");
 800285c:	4824      	ldr	r0, [pc, #144]	; (80028f0 <command_parser+0x300>)
 800285e:	f7fd fd49 	bl	80002f4 <strlen>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <command_parser+0x300>)
 8002868:	4413      	add	r3, r2
 800286a:	4a2c      	ldr	r2, [pc, #176]	; (800291c <command_parser+0x32c>)
 800286c:	6810      	ldr	r0, [r2, #0]
 800286e:	6018      	str	r0, [r3, #0]
 8002870:	7912      	ldrb	r2, [r2, #4]
 8002872:	711a      	strb	r2, [r3, #4]
			idx++;
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <command_parser+0x304>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <command_parser+0x304>)
 800287c:	6013      	str	r3, [r2, #0]
			break;
 800287e:	e0c6      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1000");
 8002880:	481b      	ldr	r0, [pc, #108]	; (80028f0 <command_parser+0x300>)
 8002882:	f7fd fd37 	bl	80002f4 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <command_parser+0x300>)
 800288c:	4413      	add	r3, r2
 800288e:	4a24      	ldr	r2, [pc, #144]	; (8002920 <command_parser+0x330>)
 8002890:	6810      	ldr	r0, [r2, #0]
 8002892:	6018      	str	r0, [r3, #0]
 8002894:	7912      	ldrb	r2, [r2, #4]
 8002896:	711a      	strb	r2, [r3, #4]
			idx++;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <command_parser+0x304>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <command_parser+0x304>)
 80028a0:	6013      	str	r3, [r2, #0]
			break;
 80028a2:	e0b4      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1001");
 80028a4:	4812      	ldr	r0, [pc, #72]	; (80028f0 <command_parser+0x300>)
 80028a6:	f7fd fd25 	bl	80002f4 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <command_parser+0x300>)
 80028b0:	4413      	add	r3, r2
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <command_parser+0x334>)
 80028b4:	6810      	ldr	r0, [r2, #0]
 80028b6:	6018      	str	r0, [r3, #0]
 80028b8:	7912      	ldrb	r2, [r2, #4]
 80028ba:	711a      	strb	r2, [r3, #4]
			idx++;
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <command_parser+0x304>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <command_parser+0x304>)
 80028c4:	6013      	str	r3, [r2, #0]
			break;
 80028c6:	e0a2      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1010");
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <command_parser+0x300>)
 80028ca:	f7fd fd13 	bl	80002f4 <strlen>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <command_parser+0x300>)
 80028d4:	4413      	add	r3, r2
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <command_parser+0x338>)
 80028d8:	6810      	ldr	r0, [r2, #0]
 80028da:	6018      	str	r0, [r3, #0]
 80028dc:	7912      	ldrb	r2, [r2, #4]
 80028de:	711a      	strb	r2, [r3, #4]
			idx++;
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <command_parser+0x304>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <command_parser+0x304>)
 80028e8:	6013      	str	r3, [r2, #0]
			break;
 80028ea:	e090      	b.n	8002a0e <command_parser+0x41e>
 80028ec:	2400155c 	.word	0x2400155c
 80028f0:	240007f4 	.word	0x240007f4
 80028f4:	24001560 	.word	0x24001560
 80028f8:	24000000 	.word	0x24000000
 80028fc:	58020400 	.word	0x58020400
 8002900:	0800ad34 	.word	0x0800ad34
 8002904:	0800ad3c 	.word	0x0800ad3c
 8002908:	0800ad44 	.word	0x0800ad44
 800290c:	0800ad4c 	.word	0x0800ad4c
 8002910:	0800ad54 	.word	0x0800ad54
 8002914:	0800ad5c 	.word	0x0800ad5c
 8002918:	0800ad64 	.word	0x0800ad64
 800291c:	0800ad6c 	.word	0x0800ad6c
 8002920:	0800ad74 	.word	0x0800ad74
 8002924:	0800ad7c 	.word	0x0800ad7c
 8002928:	0800ad84 	.word	0x0800ad84
			strcat(cmdStr, "1011");
 800292c:	4839      	ldr	r0, [pc, #228]	; (8002a14 <command_parser+0x424>)
 800292e:	f7fd fce1 	bl	80002f4 <strlen>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <command_parser+0x424>)
 8002938:	4413      	add	r3, r2
 800293a:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <command_parser+0x428>)
 800293c:	6810      	ldr	r0, [r2, #0]
 800293e:	6018      	str	r0, [r3, #0]
 8002940:	7912      	ldrb	r2, [r2, #4]
 8002942:	711a      	strb	r2, [r3, #4]
			idx++;
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <command_parser+0x42c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <command_parser+0x42c>)
 800294c:	6013      	str	r3, [r2, #0]
			break;
 800294e:	e05e      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1100");
 8002950:	4830      	ldr	r0, [pc, #192]	; (8002a14 <command_parser+0x424>)
 8002952:	f7fd fccf 	bl	80002f4 <strlen>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <command_parser+0x424>)
 800295c:	4413      	add	r3, r2
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <command_parser+0x430>)
 8002960:	6810      	ldr	r0, [r2, #0]
 8002962:	6018      	str	r0, [r3, #0]
 8002964:	7912      	ldrb	r2, [r2, #4]
 8002966:	711a      	strb	r2, [r3, #4]
			idx++;
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <command_parser+0x42c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <command_parser+0x42c>)
 8002970:	6013      	str	r3, [r2, #0]
			break;
 8002972:	e04c      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1101");
 8002974:	4827      	ldr	r0, [pc, #156]	; (8002a14 <command_parser+0x424>)
 8002976:	f7fd fcbd 	bl	80002f4 <strlen>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <command_parser+0x424>)
 8002980:	4413      	add	r3, r2
 8002982:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <command_parser+0x434>)
 8002984:	6810      	ldr	r0, [r2, #0]
 8002986:	6018      	str	r0, [r3, #0]
 8002988:	7912      	ldrb	r2, [r2, #4]
 800298a:	711a      	strb	r2, [r3, #4]
			idx++;
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <command_parser+0x42c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <command_parser+0x42c>)
 8002994:	6013      	str	r3, [r2, #0]
			break;
 8002996:	e03a      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1110");
 8002998:	481e      	ldr	r0, [pc, #120]	; (8002a14 <command_parser+0x424>)
 800299a:	f7fd fcab 	bl	80002f4 <strlen>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <command_parser+0x424>)
 80029a4:	4413      	add	r3, r2
 80029a6:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <command_parser+0x438>)
 80029a8:	6810      	ldr	r0, [r2, #0]
 80029aa:	6018      	str	r0, [r3, #0]
 80029ac:	7912      	ldrb	r2, [r2, #4]
 80029ae:	711a      	strb	r2, [r3, #4]
			idx++;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <command_parser+0x42c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <command_parser+0x42c>)
 80029b8:	6013      	str	r3, [r2, #0]
			break;
 80029ba:	e028      	b.n	8002a0e <command_parser+0x41e>
			strcat(cmdStr, "1111");
 80029bc:	4815      	ldr	r0, [pc, #84]	; (8002a14 <command_parser+0x424>)
 80029be:	f7fd fc99 	bl	80002f4 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <command_parser+0x424>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <command_parser+0x43c>)
 80029cc:	6810      	ldr	r0, [r2, #0]
 80029ce:	6018      	str	r0, [r3, #0]
 80029d0:	7912      	ldrb	r2, [r2, #4]
 80029d2:	711a      	strb	r2, [r3, #4]
			idx++;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <command_parser+0x42c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <command_parser+0x42c>)
 80029dc:	6013      	str	r3, [r2, #0]
			break;
 80029de:	e016      	b.n	8002a0e <command_parser+0x41e>
			CMD_flag = 1;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <command_parser+0x440>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
			idx = 0;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <command_parser+0x42c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
			buffer_index = 0;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <command_parser+0x444>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
			cmdParserState = IDLE;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <command_parser+0x448>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
			break;
 80029f8:	e009      	b.n	8002a0e <command_parser+0x41e>
			cmdParserState = IDLE;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <command_parser+0x448>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <command_parser+0x42c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
			buffer_index = 0;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <command_parser+0x444>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
			break;
 8002a0c:	bf00      	nop
		break;
 8002a0e:	bf00      	nop
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	240007f4 	.word	0x240007f4
 8002a18:	0800ad8c 	.word	0x0800ad8c
 8002a1c:	24001560 	.word	0x24001560
 8002a20:	0800ad94 	.word	0x0800ad94
 8002a24:	0800ad9c 	.word	0x0800ad9c
 8002a28:	0800ada4 	.word	0x0800ada4
 8002a2c:	0800adac 	.word	0x0800adac
 8002a30:	24001564 	.word	0x24001564
 8002a34:	240007ec 	.word	0x240007ec
 8002a38:	2400155c 	.word	0x2400155c

08002a3c <uart_communication>:

void uart_communication(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	if (CMD_flag == 1)
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <uart_communication+0x24>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <uart_communication+0x1c>
	{
		CMD_flag = 0;
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <uart_communication+0x24>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(huart, cmdStr, strlen(cmdStr), 1000);
		inst_en_queue(cmdStr);
 8002a52:	4804      	ldr	r0, [pc, #16]	; (8002a64 <uart_communication+0x28>)
 8002a54:	f7fe f8bc 	bl	8000bd0 <inst_en_queue>
	}
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	24001564 	.word	0x24001564
 8002a64:	240007f4 	.word	0x240007f4

08002a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a6c:	f7ff fd38 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a72:	490d      	ldr	r1, [pc, #52]	; (8002aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a88:	4c0a      	ldr	r4, [pc, #40]	; (8002ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f007 fc3f 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9a:	f7fd fe39 	bl	8000710 <main>
  bx  lr
 8002a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002aa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aa8:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002aac:	0800ae30 	.word	0x0800ae30
  ldr r2, =_sbss
 8002ab0:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002ab4:	2400157c 	.word	0x2400157c

08002ab8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC3_IRQHandler>
	...

08002abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	f000 f9a0 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ac8:	f002 fcec 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_Init+0x68>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	4913      	ldr	r1, [pc, #76]	; (8002b28 <HAL_Init+0x6c>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_Init+0x68>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <HAL_Init+0x6c>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_Init+0x70>)
 8002afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <HAL_Init+0x74>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 f814 	bl	8002b34 <HAL_InitTick>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e002      	b.n	8002b1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b16:	f7ff faa3 	bl	8002060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58024400 	.word	0x58024400
 8002b28:	0800adb4 	.word	0x0800adb4
 8002b2c:	24000014 	.word	0x24000014
 8002b30:	24000010 	.word	0x24000010

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_InitTick+0x60>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e021      	b.n	8002b8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_InitTick+0x64>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_InitTick+0x60>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f985 	bl	8002e6e <HAL_SYSTICK_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00e      	b.n	8002b8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0f      	cmp	r3, #15
 8002b72:	d80a      	bhi.n	8002b8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b74:	2200      	movs	r2, #0
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f000 f94f 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <HAL_InitTick+0x68>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2400001c 	.word	0x2400001c
 8002b98:	24000010 	.word	0x24000010
 8002b9c:	24000018 	.word	0x24000018

08002ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x20>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2400001c 	.word	0x2400001c
 8002bc4:	24001568 	.word	0x24001568

08002bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return uwTick;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_GetTick+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	24001568 	.word	0x24001568

08002be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff ffee 	bl	8002bc8 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d005      	beq.n	8002c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_Delay+0x44>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c06:	bf00      	nop
 8002c08:	f7ff ffde 	bl	8002bc8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d8f7      	bhi.n	8002c08 <HAL_Delay+0x28>
  {
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2400001c 	.word	0x2400001c

08002c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_GetREVID+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0c1b      	lsrs	r3, r3, #16
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	5c001000 	.word	0x5c001000

08002c40 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c50:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	58000400 	.word	0x58000400

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00
 8002cac:	05fa0000 	.word	0x05fa0000

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	; (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff40 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff90 	bl	8002d5c <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5f 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff33 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffa4 	bl	8002dc4 <SysTick_Config>
 8002e7c:	4603      	mov	r3, r0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff fe9a 	bl	8002bc8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e2dc      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e2cd      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_DMA_Abort+0x214>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04a      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6b      	ldr	r2, [pc, #428]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_DMA_Abort+0x240>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a64      	ldr	r2, [pc, #400]	; (80030cc <HAL_DMA_Abort+0x244>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a62      	ldr	r2, [pc, #392]	; (80030d0 <HAL_DMA_Abort+0x248>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA_Abort+0xda>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_Abort+0xdc>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 021e 	bic.w	r2, r2, #30
 8002f76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e00a      	b.n	8002fa6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020e 	bic.w	r2, r2, #14
 8002f9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DMA_Abort+0x214>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d072      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d06d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d068      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d063      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d059      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d054      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04f      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_DMA_Abort+0x240>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_DMA_Abort+0x244>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_DMA_Abort+0x248>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_DMA_Abort+0x254>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_DMA_Abort+0x258>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_DMA_Abort+0x25c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_DMA_Abort+0x260>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_DMA_Abort+0x264>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_DMA_Abort+0x268>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_DMA_Abort+0x26c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_DMA_Abort+0x270>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d132      	bne.n	80030fc <HAL_DMA_Abort+0x274>
 8003096:	2301      	movs	r3, #1
 8003098:	e031      	b.n	80030fe <HAL_DMA_Abort+0x276>
 800309a:	bf00      	nop
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
 80030dc:	58025408 	.word	0x58025408
 80030e0:	5802541c 	.word	0x5802541c
 80030e4:	58025430 	.word	0x58025430
 80030e8:	58025444 	.word	0x58025444
 80030ec:	58025458 	.word	0x58025458
 80030f0:	5802546c 	.word	0x5802546c
 80030f4:	58025480 	.word	0x58025480
 80030f8:	58025494 	.word	0x58025494
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_DMA_Abort+0x448>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6a      	ldr	r2, [pc, #424]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_DMA_Abort+0x450>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_DMA_Abort+0x458>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <HAL_DMA_Abort+0x460>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_DMA_Abort+0x468>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_DMA_Abort+0x470>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_DMA_Abort+0x478>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_DMA_Abort+0x47c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_DMA_Abort+0x480>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_Abort+0x33c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DMA_Abort+0x34c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031d4:	e013      	b.n	80031fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7ff fcf7 	bl	8002bc8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d90c      	bls.n	80031fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e12d      	b.n	800345a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e5      	bne.n	80031d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_DMA_Abort+0x448>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_DMA_Abort+0x450>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_DMA_Abort+0x458>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_DMA_Abort+0x460>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_DMA_Abort+0x468>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_DMA_Abort+0x470>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_DMA_Abort+0x478>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_DMA_Abort+0x47c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_DMA_Abort+0x480>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_DMA_Abort+0x426>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_DMA_Abort+0x428>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	e02a      	b.n	8003322 <HAL_DMA_Abort+0x49a>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_DMA_Abort+0x5dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d072      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_DMA_Abort+0x5e0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4c      	ldr	r2, [pc, #304]	; (800346c <HAL_DMA_Abort+0x5e4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d068      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_DMA_Abort+0x5e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d063      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a49      	ldr	r2, [pc, #292]	; (8003474 <HAL_DMA_Abort+0x5ec>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a47      	ldr	r2, [pc, #284]	; (8003478 <HAL_DMA_Abort+0x5f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d059      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_DMA_Abort+0x5f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d054      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a44      	ldr	r2, [pc, #272]	; (8003480 <HAL_DMA_Abort+0x5f8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_DMA_Abort+0x5fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_DMA_Abort+0x600>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_DMA_Abort+0x604>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <HAL_DMA_Abort+0x608>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_DMA_Abort+0x60c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <HAL_DMA_Abort+0x610>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <HAL_DMA_Abort+0x614>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <HAL_DMA_Abort+0x618>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_DMA_Abort+0x61c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_DMA_Abort+0x620>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_DMA_Abort+0x624>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <HAL_DMA_Abort+0x628>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_DMA_Abort+0x62c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <HAL_DMA_Abort+0x630>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_Abort+0x634>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_DMA_Abort+0x638>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Abort+0x58e>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Abort+0x590>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003424:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003446:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494

080034c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e237      	b.n	8003946 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e22c      	b.n	8003946 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_DMA_Abort_IT+0x1a0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d04a      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_DMA_Abort_IT+0x1a4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d045      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_DMA_Abort_IT+0x1a8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d040      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_DMA_Abort_IT+0x1ac>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d03b      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_DMA_Abort_IT+0x1b0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d036      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_DMA_Abort_IT+0x1b4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d031      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a53      	ldr	r2, [pc, #332]	; (800367c <HAL_DMA_Abort_IT+0x1b8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d02c      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_DMA_Abort_IT+0x1bc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d027      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a50      	ldr	r2, [pc, #320]	; (8003684 <HAL_DMA_Abort_IT+0x1c0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <HAL_DMA_Abort_IT+0x1c4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_DMA_Abort_IT+0x1c8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_DMA_Abort_IT+0x1cc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_DMA_Abort_IT+0x1d0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_DMA_Abort_IT+0x1d4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a47      	ldr	r2, [pc, #284]	; (800369c <HAL_DMA_Abort_IT+0x1d8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a46      	ldr	r2, [pc, #280]	; (80036a0 <HAL_DMA_Abort_IT+0x1dc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Abort_IT+0xcc>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_DMA_Abort_IT+0xce>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8086 	beq.w	80036a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2204      	movs	r2, #4
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_DMA_Abort_IT+0x1a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d04a      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_DMA_Abort_IT+0x1a4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d045      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <HAL_DMA_Abort_IT+0x1a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d040      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <HAL_DMA_Abort_IT+0x1ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d03b      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a29      	ldr	r2, [pc, #164]	; (8003674 <HAL_DMA_Abort_IT+0x1b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d036      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a28      	ldr	r2, [pc, #160]	; (8003678 <HAL_DMA_Abort_IT+0x1b4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d031      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_DMA_Abort_IT+0x1b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02c      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a25      	ldr	r2, [pc, #148]	; (8003680 <HAL_DMA_Abort_IT+0x1bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d027      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <HAL_DMA_Abort_IT+0x1c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d022      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_DMA_Abort_IT+0x1c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01d      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_DMA_Abort_IT+0x1c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d018      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_DMA_Abort_IT+0x1cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_DMA_Abort_IT+0x1d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <HAL_DMA_Abort_IT+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1a      	ldr	r2, [pc, #104]	; (800369c <HAL_DMA_Abort_IT+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0x17c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_DMA_Abort_IT+0x1dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <HAL_DMA_Abort_IT+0x18e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e178      	b.n	8003944 <HAL_DMA_Abort_IT+0x480>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e16f      	b.n	8003944 <HAL_DMA_Abort_IT+0x480>
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 020e 	bic.w	r2, r2, #14
 80036b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_DMA_Abort_IT+0x3a8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d04a      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6b      	ldr	r2, [pc, #428]	; (8003870 <HAL_DMA_Abort_IT+0x3ac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d045      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_DMA_Abort_IT+0x3b0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d040      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a68      	ldr	r2, [pc, #416]	; (8003878 <HAL_DMA_Abort_IT+0x3b4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d03b      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a66      	ldr	r2, [pc, #408]	; (800387c <HAL_DMA_Abort_IT+0x3b8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d036      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a65      	ldr	r2, [pc, #404]	; (8003880 <HAL_DMA_Abort_IT+0x3bc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d031      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a63      	ldr	r2, [pc, #396]	; (8003884 <HAL_DMA_Abort_IT+0x3c0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02c      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a62      	ldr	r2, [pc, #392]	; (8003888 <HAL_DMA_Abort_IT+0x3c4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d027      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_DMA_Abort_IT+0x3c8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d022      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5f      	ldr	r2, [pc, #380]	; (8003890 <HAL_DMA_Abort_IT+0x3cc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01d      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_DMA_Abort_IT+0x3d0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5c      	ldr	r2, [pc, #368]	; (8003898 <HAL_DMA_Abort_IT+0x3d4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5a      	ldr	r2, [pc, #360]	; (800389c <HAL_DMA_Abort_IT+0x3d8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a59      	ldr	r2, [pc, #356]	; (80038a0 <HAL_DMA_Abort_IT+0x3dc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_DMA_Abort_IT+0x3e0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_DMA_Abort_IT+0x290>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_DMA_Abort_IT+0x3e4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <HAL_DMA_Abort_IT+0x2a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e007      	b.n	8003776 <HAL_DMA_Abort_IT+0x2b2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3c      	ldr	r2, [pc, #240]	; (800386c <HAL_DMA_Abort_IT+0x3a8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d072      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <HAL_DMA_Abort_IT+0x3ac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d06d      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a39      	ldr	r2, [pc, #228]	; (8003874 <HAL_DMA_Abort_IT+0x3b0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d068      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_DMA_Abort_IT+0x3b4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d063      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a36      	ldr	r2, [pc, #216]	; (800387c <HAL_DMA_Abort_IT+0x3b8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d05e      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a34      	ldr	r2, [pc, #208]	; (8003880 <HAL_DMA_Abort_IT+0x3bc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d059      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a33      	ldr	r2, [pc, #204]	; (8003884 <HAL_DMA_Abort_IT+0x3c0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d054      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a31      	ldr	r2, [pc, #196]	; (8003888 <HAL_DMA_Abort_IT+0x3c4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04f      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_DMA_Abort_IT+0x3c8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2e      	ldr	r2, [pc, #184]	; (8003890 <HAL_DMA_Abort_IT+0x3cc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_DMA_Abort_IT+0x3d0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_DMA_Abort_IT+0x3d4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2a      	ldr	r2, [pc, #168]	; (800389c <HAL_DMA_Abort_IT+0x3d8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_DMA_Abort_IT+0x3dc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <HAL_DMA_Abort_IT+0x3e0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <HAL_DMA_Abort_IT+0x3e4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_DMA_Abort_IT+0x3e8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Abort_IT+0x3ec>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <HAL_DMA_Abort_IT+0x3f0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_DMA_Abort_IT+0x3f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_DMA_Abort_IT+0x3f8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_DMA_Abort_IT+0x3fc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_DMA_Abort_IT+0x400>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_Abort_IT+0x3a2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_DMA_Abort_IT+0x404>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d132      	bne.n	80038cc <HAL_DMA_Abort_IT+0x408>
 8003866:	2301      	movs	r3, #1
 8003868:	e031      	b.n	80038ce <HAL_DMA_Abort_IT+0x40a>
 800386a:	bf00      	nop
 800386c:	40020010 	.word	0x40020010
 8003870:	40020028 	.word	0x40020028
 8003874:	40020040 	.word	0x40020040
 8003878:	40020058 	.word	0x40020058
 800387c:	40020070 	.word	0x40020070
 8003880:	40020088 	.word	0x40020088
 8003884:	400200a0 	.word	0x400200a0
 8003888:	400200b8 	.word	0x400200b8
 800388c:	40020410 	.word	0x40020410
 8003890:	40020428 	.word	0x40020428
 8003894:	40020440 	.word	0x40020440
 8003898:	40020458 	.word	0x40020458
 800389c:	40020470 	.word	0x40020470
 80038a0:	40020488 	.word	0x40020488
 80038a4:	400204a0 	.word	0x400204a0
 80038a8:	400204b8 	.word	0x400204b8
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d028      	beq.n	8003924 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003900:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003918:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003922:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop

08003950 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0cf      	b.n	8003b02 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2223      	movs	r2, #35	; 0x23
 8003970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fe fb8d 	bl	8002094 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <HAL_ETH_Init+0x1bc>)
 800397c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003980:	4a62      	ldr	r2, [pc, #392]	; (8003b0c <HAL_ETH_Init+0x1bc>)
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800398a:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <HAL_ETH_Init+0x1bc>)
 800398c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7a1b      	ldrb	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff f94d 	bl	8002c40 <HAL_SYSCFG_ETHInterfaceSelect>
 80039a6:	e003      	b.n	80039b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80039a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80039ac:	f7ff f948 	bl	8002c40 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80039b0:	4b57      	ldr	r3, [pc, #348]	; (8003b10 <HAL_ETH_Init+0x1c0>)
 80039b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039cc:	f7ff f8fc 	bl	8002bc8 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80039d2:	e011      	b.n	80039f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80039d4:	f7ff f8f8 	bl	8002bc8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039e2:	d909      	bls.n	80039f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	22e0      	movs	r2, #224	; 0xe0
 80039f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e084      	b.n	8003b02 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e4      	bne.n	80039d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f886 	bl	8003b1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003a10:	f001 fec2 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <HAL_ETH_Init+0x1c4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	0c9a      	lsrs	r2, r3, #18
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3a01      	subs	r2, #1
 8003a24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa71 	bl	8003f10 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a36:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a3a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	22e0      	movs	r2, #224	; 0xe0
 8003a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003a7a:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_ETH_Init+0x1c8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6952      	ldr	r2, [r2, #20]
 8003a82:	0051      	lsls	r1, r2, #1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a8e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fad9 	bl	800404a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb1f 	bl	80040dc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	3305      	adds	r3, #5
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	3303      	adds	r3, #3
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	061a      	lsls	r2, r3, #24
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	3302      	adds	r3, #2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003adc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003aea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003aec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2210      	movs	r2, #16
 8003afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58000400 	.word	0x58000400
 8003b14:	431bde83 	.word	0x431bde83
 8003b18:	ffff8001 	.word	0xffff8001

08003b1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b36:	f001 fe2f 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 8003b3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d908      	bls.n	8003b56 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d804      	bhi.n	8003b56 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e027      	b.n	8003ba6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d908      	bls.n	8003b70 <HAL_ETH_SetMDIOClockRange+0x54>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d204      	bcs.n	8003b70 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e01a      	b.n	8003ba6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d303      	bcc.n	8003b80 <HAL_ETH_SetMDIOClockRange+0x64>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d911      	bls.n	8003ba4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d908      	bls.n	8003b9a <HAL_ETH_SetMDIOClockRange+0x7e>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d804      	bhi.n	8003b9a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e005      	b.n	8003ba6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e000      	b.n	8003ba6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003ba4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	01312cff 	.word	0x01312cff
 8003bbc:	02160ebf 	.word	0x02160ebf
 8003bc0:	03938700 	.word	0x03938700
 8003bc4:	05f5e0ff 	.word	0x05f5e0ff
 8003bc8:	08f0d17f 	.word	0x08f0d17f

08003bcc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	791b      	ldrb	r3, [r3, #4]
 8003be4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003be6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	7b1b      	ldrb	r3, [r3, #12]
 8003bec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	7b5b      	ldrb	r3, [r3, #13]
 8003bf4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003bf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	7b9b      	ldrb	r3, [r3, #14]
 8003bfc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003bfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	7bdb      	ldrb	r3, [r3, #15]
 8003c04:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	7c12      	ldrb	r2, [r2, #16]
 8003c0c:	2a00      	cmp	r2, #0
 8003c0e:	d102      	bne.n	8003c16 <ETH_SetMACConfig+0x4a>
 8003c10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c14:	e000      	b.n	8003c18 <ETH_SetMACConfig+0x4c>
 8003c16:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	7c52      	ldrb	r2, [r2, #17]
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	d102      	bne.n	8003c28 <ETH_SetMACConfig+0x5c>
 8003c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c26:	e000      	b.n	8003c2a <ETH_SetMACConfig+0x5e>
 8003c28:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	7c9b      	ldrb	r3, [r3, #18]
 8003c30:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c32:	431a      	orrs	r2, r3
               macconf->Speed |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c38:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7f1b      	ldrb	r3, [r3, #28]
 8003c44:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7f5b      	ldrb	r3, [r3, #29]
 8003c4c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	7f92      	ldrb	r2, [r2, #30]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d102      	bne.n	8003c5e <ETH_SetMACConfig+0x92>
 8003c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5c:	e000      	b.n	8003c60 <ETH_SetMACConfig+0x94>
 8003c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	7fdb      	ldrb	r3, [r3, #31]
 8003c66:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c70:	2a00      	cmp	r2, #0
 8003c72:	d102      	bne.n	8003c7a <ETH_SetMACConfig+0xae>
 8003c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c78:	e000      	b.n	8003c7c <ETH_SetMACConfig+0xb0>
 8003c7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c7c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003c8c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <ETH_SetMACConfig+0x22c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cc0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003ccc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	d102      	bne.n	8003cde <ETH_SetMACConfig+0x112>
 8003cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cdc:	e000      	b.n	8003ce0 <ETH_SetMACConfig+0x114>
 8003cde:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003ce0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <ETH_SetMACConfig+0x230>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d04:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <ETH_SetMACConfig+0x234>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d28:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d101      	bne.n	8003d3e <ETH_SetMACConfig+0x172>
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	e000      	b.n	8003d40 <ETH_SetMACConfig+0x174>
 8003d3e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d40:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d52:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003d68:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003d70:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f023 0103 	bic.w	r1, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003d96:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	d101      	bne.n	8003dba <ETH_SetMACConfig+0x1ee>
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	e000      	b.n	8003dbc <ETH_SetMACConfig+0x1f0>
 8003dba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003dbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003dc4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003dc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003dce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003ddc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	00048083 	.word	0x00048083
 8003dfc:	c0f88000 	.word	0xc0f88000
 8003e00:	fffffef0 	.word	0xfffffef0

08003e04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b38      	ldr	r3, [pc, #224]	; (8003efc <ETH_SetDMAConfig+0xf8>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e2a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	791b      	ldrb	r3, [r3, #4]
 8003e30:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	7b1b      	ldrb	r3, [r3, #12]
 8003e3c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <ETH_SetDMAConfig+0xfc>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	430b      	orrs	r3, r1
 8003e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e5c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7b5b      	ldrb	r3, [r3, #13]
 8003e62:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e74:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <ETH_SetDMAConfig+0x100>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	7d1b      	ldrb	r3, [r3, #20]
 8003e94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7f5b      	ldrb	r3, [r3, #29]
 8003e9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eaa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <ETH_SetDMAConfig+0x104>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ebe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7f1b      	ldrb	r3, [r3, #28]
 8003ec6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <ETH_SetDMAConfig+0x108>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	ffff87fd 	.word	0xffff87fd
 8003f00:	ffff2ffe 	.word	0xffff2ffe
 8003f04:	fffec000 	.word	0xfffec000
 8003f08:	ffc0efef 	.word	0xffc0efef
 8003f0c:	7fc0ffff 	.word	0x7fc0ffff

08003f10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0a4      	sub	sp, #144	; 0x90
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003f68:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003f6c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003f74:	2300      	movs	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003f92:	2300      	movs	r3, #0
 8003f94:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003fba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003fea:	2300      	movs	r3, #0
 8003fec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fde6 	bl	8003bcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004000:	2301      	movs	r3, #1
 8004002:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004004:	2301      	movs	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800401a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800401e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004028:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004030:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004036:	f107 0308 	add.w	r3, r7, #8
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fee1 	bl	8003e04 <ETH_SetDMAConfig>
}
 8004042:	bf00      	nop
 8004044:	3790      	adds	r7, #144	; 0x90
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e01d      	b.n	8004094 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	3206      	adds	r2, #6
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d9de      	bls.n	8004058 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	461a      	mov	r2, r3
 80040aa:	2303      	movs	r3, #3
 80040ac:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e023      	b.n	8004132 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2200      	movs	r2, #0
 8004112:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	3212      	adds	r2, #18
 8004128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d9d8      	bls.n	80040ea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	461a      	mov	r2, r3
 8004160:	2303      	movs	r3, #3
 8004162:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004186:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041a6:	4b89      	ldr	r3, [pc, #548]	; (80043cc <HAL_GPIO_Init+0x234>)
 80041a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041aa:	e194      	b.n	80044d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8186 	beq.w	80044d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d005      	beq.n	80041dc <HAL_GPIO_Init+0x44>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d130      	bne.n	800423e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004212:	2201      	movs	r2, #1
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0201 	and.w	r2, r3, #1
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b03      	cmp	r3, #3
 8004248:	d017      	beq.n	800427a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d123      	bne.n	80042ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	08da      	lsrs	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	220f      	movs	r2, #15
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0203 	and.w	r2, r3, #3
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80e0 	beq.w	80044d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004310:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004316:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_GPIO_Init+0x23c>)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	3302      	adds	r3, #2
 8004336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	220f      	movs	r2, #15
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_GPIO_Init+0x240>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d052      	beq.n	8004400 <HAL_GPIO_Init+0x268>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_GPIO_Init+0x244>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d031      	beq.n	80043c6 <HAL_GPIO_Init+0x22e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_GPIO_Init+0x248>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02b      	beq.n	80043c2 <HAL_GPIO_Init+0x22a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_GPIO_Init+0x24c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d025      	beq.n	80043be <HAL_GPIO_Init+0x226>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_GPIO_Init+0x250>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <HAL_GPIO_Init+0x222>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_GPIO_Init+0x254>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d019      	beq.n	80043b6 <HAL_GPIO_Init+0x21e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_GPIO_Init+0x258>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_GPIO_Init+0x21a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_GPIO_Init+0x25c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00d      	beq.n	80043ae <HAL_GPIO_Init+0x216>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_GPIO_Init+0x260>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <HAL_GPIO_Init+0x212>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a17      	ldr	r2, [pc, #92]	; (80043fc <HAL_GPIO_Init+0x264>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d101      	bne.n	80043a6 <HAL_GPIO_Init+0x20e>
 80043a2:	2309      	movs	r3, #9
 80043a4:	e02d      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043a6:	230a      	movs	r3, #10
 80043a8:	e02b      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043aa:	2308      	movs	r3, #8
 80043ac:	e029      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ae:	2307      	movs	r3, #7
 80043b0:	e027      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043b2:	2306      	movs	r3, #6
 80043b4:	e025      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043b6:	2305      	movs	r3, #5
 80043b8:	e023      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ba:	2304      	movs	r3, #4
 80043bc:	e021      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043be:	2303      	movs	r3, #3
 80043c0:	e01f      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e01d      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e01b      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ca:	bf00      	nop
 80043cc:	58000080 	.word	0x58000080
 80043d0:	58024400 	.word	0x58024400
 80043d4:	58000400 	.word	0x58000400
 80043d8:	58020000 	.word	0x58020000
 80043dc:	58020400 	.word	0x58020400
 80043e0:	58020800 	.word	0x58020800
 80043e4:	58020c00 	.word	0x58020c00
 80043e8:	58021000 	.word	0x58021000
 80043ec:	58021400 	.word	0x58021400
 80043f0:	58021800 	.word	0x58021800
 80043f4:	58021c00 	.word	0x58021c00
 80043f8:	58022000 	.word	0x58022000
 80043fc:	58022400 	.word	0x58022400
 8004400:	2300      	movs	r3, #0
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	4093      	lsls	r3, r2
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004412:	4938      	ldr	r1, [pc, #224]	; (80044f4 <HAL_GPIO_Init+0x35c>)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f ae63 	bne.w	80041ac <HAL_GPIO_Init+0x14>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3724      	adds	r7, #36	; 0x24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	58000400 	.word	0x58000400

080044f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
 8004504:	4613      	mov	r3, r2
 8004506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004508:	787b      	ldrb	r3, [r7, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004514:	e003      	b.n	800451e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	041a      	lsls	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	619a      	str	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4013      	ands	r3, r2
 8004542:	041a      	lsls	r2, r3, #16
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	43d9      	mvns	r1, r3
 8004548:	887b      	ldrh	r3, [r7, #2]
 800454a:	400b      	ands	r3, r1
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	619a      	str	r2, [r3, #24]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800455e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004560:	b08f      	sub	sp, #60	; 0x3c
 8004562:	af0a      	add	r7, sp, #40	; 0x28
 8004564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e116      	b.n	800479e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fec2 	bl	8002314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2203      	movs	r2, #3
 8004594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f005 fc10 	bl	8009dd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	687e      	ldr	r6, [r7, #4]
 80045bc:	466d      	mov	r5, sp
 80045be:	f106 0410 	add.w	r4, r6, #16
 80045c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80045d2:	1d33      	adds	r3, r6, #4
 80045d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d6:	6838      	ldr	r0, [r7, #0]
 80045d8:	f005 fb8e 	bl	8009cf8 <USB_CoreInit>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0d7      	b.n	800479e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f005 fbfe 	bl	8009df6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e04a      	b.n	8004696 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	333d      	adds	r3, #61	; 0x3d
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	333c      	adds	r3, #60	; 0x3c
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	b298      	uxth	r0, r3
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	3356      	adds	r3, #86	; 0x56
 800463c:	4602      	mov	r2, r0
 800463e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3340      	adds	r3, #64	; 0x40
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3344      	adds	r3, #68	; 0x44
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3348      	adds	r3, #72	; 0x48
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	334c      	adds	r3, #76	; 0x4c
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	3301      	adds	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d3af      	bcc.n	8004600 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e044      	b.n	8004730 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	3301      	adds	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d3b5      	bcc.n	80046a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	687e      	ldr	r6, [r7, #4]
 8004742:	466d      	mov	r5, sp
 8004744:	f106 0410 	add.w	r4, r6, #16
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004754:	e885 0003 	stmia.w	r5, {r0, r1}
 8004758:	1d33      	adds	r3, r6, #4
 800475a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f005 fb97 	bl	8009e90 <USB_DevInit>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e014      	b.n	800479e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	2b01      	cmp	r3, #1
 800478a:	d102      	bne.n	8004792 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f80b 	bl	80047a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f005 fd55 	bl	800a246 <USB_DevDisconnect>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_PCDEx_ActivateLPM+0x44>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	10000003 	.word	0x10000003

080047f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_PWREx_ConfigSupply+0x70>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d00a      	beq.n	800481a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004804:	4b16      	ldr	r3, [pc, #88]	; (8004860 <HAL_PWREx_ConfigSupply+0x70>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e01f      	b.n	8004856 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e01d      	b.n	8004856 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_PWREx_ConfigSupply+0x70>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	490f      	ldr	r1, [pc, #60]	; (8004860 <HAL_PWREx_ConfigSupply+0x70>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4313      	orrs	r3, r2
 8004828:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800482a:	f7fe f9cd 	bl	8002bc8 <HAL_GetTick>
 800482e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004830:	e009      	b.n	8004846 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004832:	f7fe f9c9 	bl	8002bc8 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004840:	d901      	bls.n	8004846 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e007      	b.n	8004856 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_PWREx_ConfigSupply+0x70>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004852:	d1ee      	bne.n	8004832 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	58024800 	.word	0x58024800

08004864 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	60d3      	str	r3, [r2, #12]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	58024800 	.word	0x58024800

08004884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f000 bc48 	b.w	8005128 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8088 	beq.w	80049b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	4b99      	ldr	r3, [pc, #612]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048b0:	4b96      	ldr	r3, [pc, #600]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d007      	beq.n	80048cc <HAL_RCC_OscConfig+0x48>
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b18      	cmp	r3, #24
 80048c0:	d111      	bne.n	80048e6 <HAL_RCC_OscConfig+0x62>
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d06d      	beq.n	80049b4 <HAL_RCC_OscConfig+0x130>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d169      	bne.n	80049b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f000 bc21 	b.w	8005128 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x7a>
 80048f0:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a85      	ldr	r2, [pc, #532]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e02e      	b.n	800495c <HAL_RCC_OscConfig+0xd8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x9c>
 8004906:	4b81      	ldr	r3, [pc, #516]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a80      	ldr	r2, [pc, #512]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 800490c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b7e      	ldr	r3, [pc, #504]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a7d      	ldr	r2, [pc, #500]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xd8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0xc0>
 800492a:	4b78      	ldr	r3, [pc, #480]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a77      	ldr	r2, [pc, #476]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b75      	ldr	r3, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a74      	ldr	r2, [pc, #464]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xd8>
 8004944:	4b71      	ldr	r3, [pc, #452]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a70      	ldr	r2, [pc, #448]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6d      	ldr	r2, [pc, #436]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fe f930 	bl	8002bc8 <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800496c:	f7fe f92c 	bl	8002bc8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e3d4      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800497e:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xe8>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe f91c 	bl	8002bc8 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fe f918 	bl	8002bc8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e3c0      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049a6:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x110>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80ca 	beq.w	8004b58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c4:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ce:	4b4f      	ldr	r3, [pc, #316]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_RCC_OscConfig+0x166>
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b18      	cmp	r3, #24
 80049de:	d156      	bne.n	8004a8e <HAL_RCC_OscConfig+0x20a>
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d151      	bne.n	8004a8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ea:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x17e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e392      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 0219 	bic.w	r2, r3, #25
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	493f      	ldr	r1, [pc, #252]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fe f8d8 	bl	8002bc8 <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fe f8d4 	bl	8002bc8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e37c      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a2e:	4b37      	ldr	r3, [pc, #220]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3a:	f7fe f8f5 	bl	8002c28 <HAL_GetREVID>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d817      	bhi.n	8004a78 <HAL_RCC_OscConfig+0x1f4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d108      	bne.n	8004a62 <HAL_RCC_OscConfig+0x1de>
 8004a50:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a60:	e07a      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	4926      	ldr	r1, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a76:	e06f      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	4921      	ldr	r1, [pc, #132]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	e064      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d047      	beq.n	8004b26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0219 	bic.w	r2, r3, #25
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	491a      	ldr	r1, [pc, #104]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f88e 	bl	8002bc8 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fe f88a 	bl	8002bc8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e332      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	f7fe f8ab 	bl	8002c28 <HAL_GetREVID>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d819      	bhi.n	8004b10 <HAL_RCC_OscConfig+0x28c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d108      	bne.n	8004af6 <HAL_RCC_OscConfig+0x272>
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004aec:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	e030      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	031b      	lsls	r3, r3, #12
 8004b04:	4901      	ldr	r1, [pc, #4]	; (8004b0c <HAL_RCC_OscConfig+0x288>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
 8004b0a:	e025      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	4b9a      	ldr	r3, [pc, #616]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	4997      	ldr	r1, [pc, #604]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	e018      	b.n	8004b58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b95      	ldr	r3, [pc, #596]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a94      	ldr	r2, [pc, #592]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fe f849 	bl	8002bc8 <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fe f845 	bl	8002bc8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e2ed      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b4c:	4b8b      	ldr	r3, [pc, #556]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a9 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b70:	4b82      	ldr	r3, [pc, #520]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d007      	beq.n	8004b8c <HAL_RCC_OscConfig+0x308>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b18      	cmp	r3, #24
 8004b80:	d13a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x374>
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d135      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b8c:	4b7b      	ldr	r3, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x320>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2c1      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ba4:	f7fe f840 	bl	8002c28 <HAL_GetREVID>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d817      	bhi.n	8004be2 <HAL_RCC_OscConfig+0x35e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d108      	bne.n	8004bcc <HAL_RCC_OscConfig+0x348>
 8004bba:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bc2:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bca:	e075      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	069b      	lsls	r3, r3, #26
 8004bda:	4968      	ldr	r1, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004be0:	e06a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	4962      	ldr	r1, [pc, #392]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bf6:	e05f      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d042      	beq.n	8004c86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c00:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5d      	ldr	r2, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd ffdc 	bl	8002bc8 <HAL_GetTick>
 8004c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c14:	f7fd ffd8 	bl	8002bc8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e280      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c26:	4b55      	ldr	r3, [pc, #340]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c32:	f7fd fff9 	bl	8002c28 <HAL_GetREVID>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d817      	bhi.n	8004c70 <HAL_RCC_OscConfig+0x3ec>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d108      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3d6>
 8004c48:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c50:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	6053      	str	r3, [r2, #4]
 8004c58:	e02e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
 8004c5a:	4b48      	ldr	r3, [pc, #288]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	069b      	lsls	r3, r3, #26
 8004c68:	4944      	ldr	r1, [pc, #272]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
 8004c6e:	e023      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
 8004c70:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	493f      	ldr	r1, [pc, #252]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60cb      	str	r3, [r1, #12]
 8004c84:	e018      	b.n	8004cb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fd ff99 	bl	8002bc8 <HAL_GetTick>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c9a:	f7fd ff95 	bl	8002bc8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e23d      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cac:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d036      	beq.n	8004d32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d019      	beq.n	8004d00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ccc:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd ff76 	bl	8002bc8 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd ff72 	bl	8002bc8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e21a      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x45c>
 8004cfe:	e018      	b.n	8004d32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd ff5c 	bl	8002bc8 <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d14:	f7fd ff58 	bl	8002bc8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e200      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d039      	beq.n	8004db2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d52:	f7fd ff39 	bl	8002bc8 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5a:	f7fd ff35 	bl	8002bc8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1dd      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x4d6>
 8004d78:	e01b      	b.n	8004db2 <HAL_RCC_OscConfig+0x52e>
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d80:	4b9b      	ldr	r3, [pc, #620]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a9a      	ldr	r2, [pc, #616]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd ff1c 	bl	8002bc8 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d94:	f7fd ff18 	bl	8002bc8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1c0      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004da6:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8081 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCC_OscConfig+0x770>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a8b      	ldr	r2, [pc, #556]	; (8004ff4 <HAL_RCC_OscConfig+0x770>)
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dcc:	f7fd fefc 	bl	8002bc8 <HAL_GetTick>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fd fef8 	bl	8002bc8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e1a0      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de6:	4b83      	ldr	r3, [pc, #524]	; (8004ff4 <HAL_RCC_OscConfig+0x770>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d106      	bne.n	8004e08 <HAL_RCC_OscConfig+0x584>
 8004dfa:	4b7d      	ldr	r3, [pc, #500]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a7c      	ldr	r2, [pc, #496]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	e02d      	b.n	8004e64 <HAL_RCC_OscConfig+0x5e0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10c      	bne.n	8004e2a <HAL_RCC_OscConfig+0x5a6>
 8004e10:	4b77      	ldr	r3, [pc, #476]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a76      	ldr	r2, [pc, #472]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	4b74      	ldr	r3, [pc, #464]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4a73      	ldr	r2, [pc, #460]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	f023 0304 	bic.w	r3, r3, #4
 8004e26:	6713      	str	r3, [r2, #112]	; 0x70
 8004e28:	e01c      	b.n	8004e64 <HAL_RCC_OscConfig+0x5e0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c8>
 8004e32:	4b6f      	ldr	r3, [pc, #444]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a6e      	ldr	r2, [pc, #440]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	4b6c      	ldr	r3, [pc, #432]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a6b      	ldr	r2, [pc, #428]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0x5e0>
 8004e4c:	4b68      	ldr	r3, [pc, #416]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	4a67      	ldr	r2, [pc, #412]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6713      	str	r3, [r2, #112]	; 0x70
 8004e58:	4b65      	ldr	r3, [pc, #404]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4a64      	ldr	r2, [pc, #400]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	f023 0304 	bic.w	r3, r3, #4
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6c:	f7fd feac 	bl	8002bc8 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e74:	f7fd fea8 	bl	8002bc8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e14e      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e8a:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0ee      	beq.n	8004e74 <HAL_RCC_OscConfig+0x5f0>
 8004e96:	e014      	b.n	8004ec2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fd fe96 	bl	8002bc8 <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fd fe92 	bl	8002bc8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e138      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eb6:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1ee      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 812d 	beq.w	8005126 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ecc:	4b48      	ldr	r3, [pc, #288]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed4:	2b18      	cmp	r3, #24
 8004ed6:	f000 80bd 	beq.w	8005054 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f040 809e 	bne.w	8005020 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fe6a 	bl	8002bc8 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd fe66 	bl	8002bc8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e10e      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f16:	4b36      	ldr	r3, [pc, #216]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCC_OscConfig+0x774>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	3b01      	subs	r3, #1
 8004f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	025b      	lsls	r3, r3, #9
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f60:	4923      	ldr	r1, [pc, #140]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f76:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCC_OscConfig+0x778>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f7e:	00d2      	lsls	r2, r2, #3
 8004f80:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f023 020c 	bic.w	r2, r3, #12
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4917      	ldr	r1, [pc, #92]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f023 0202 	bic.w	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	4912      	ldr	r1, [pc, #72]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_RCC_OscConfig+0x76c>)
 8004fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fd fdef 	bl	8002bc8 <HAL_GetTick>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fec:	e011      	b.n	8005012 <HAL_RCC_OscConfig+0x78e>
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	58024800 	.word	0x58024800
 8004ff8:	fffffc0c 	.word	0xfffffc0c
 8004ffc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005000:	f7fd fde2 	bl	8002bc8 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e08a      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005012:	4b47      	ldr	r3, [pc, #284]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x77c>
 800501e:	e082      	b.n	8005126 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005020:	4b43      	ldr	r3, [pc, #268]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a42      	ldr	r2, [pc, #264]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fd fdcc 	bl	8002bc8 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fd fdc8 	bl	8002bc8 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e070      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005046:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x7b0>
 8005052:	e068      	b.n	8005126 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005054:	4b36      	ldr	r3, [pc, #216]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800505a:	4b35      	ldr	r3, [pc, #212]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	2b01      	cmp	r3, #1
 8005066:	d031      	beq.n	80050cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f003 0203 	and.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d12a      	bne.n	80050cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d122      	bne.n	80050cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d11a      	bne.n	80050cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	0a5b      	lsrs	r3, r3, #9
 800509a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d111      	bne.n	80050cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d108      	bne.n	80050cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	0e1b      	lsrs	r3, r3, #24
 80050be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e02b      	b.n	8005128 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	08db      	lsrs	r3, r3, #3
 80050d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d01f      	beq.n	8005126 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a11      	ldr	r2, [pc, #68]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f2:	f7fd fd69 	bl	8002bc8 <HAL_GetTick>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050f8:	bf00      	nop
 80050fa:	f7fd fd65 	bl	8002bc8 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	4293      	cmp	r3, r2
 8005104:	d0f9      	beq.n	80050fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <HAL_RCC_OscConfig+0x8b0>)
 800510c:	4013      	ands	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005112:	00d2      	lsls	r2, r2, #3
 8005114:	4906      	ldr	r1, [pc, #24]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005116:	4313      	orrs	r3, r2
 8005118:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCC_OscConfig+0x8ac>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3730      	adds	r7, #48	; 0x30
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	58024400 	.word	0x58024400
 8005134:	ffff0007 	.word	0xffff0007

08005138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e19c      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800514c:	4b8a      	ldr	r3, [pc, #552]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d910      	bls.n	800517c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b87      	ldr	r3, [pc, #540]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 020f 	bic.w	r2, r3, #15
 8005162:	4985      	ldr	r1, [pc, #532]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b83      	ldr	r3, [pc, #524]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e184      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005194:	429a      	cmp	r2, r3
 8005196:	d908      	bls.n	80051aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4975      	ldr	r1, [pc, #468]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d010      	beq.n	80051d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	4b70      	ldr	r3, [pc, #448]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d908      	bls.n	80051d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051c6:	4b6d      	ldr	r3, [pc, #436]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	496a      	ldr	r1, [pc, #424]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d010      	beq.n	8005206 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	4b64      	ldr	r3, [pc, #400]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d908      	bls.n	8005206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	495e      	ldr	r1, [pc, #376]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005202:	4313      	orrs	r3, r2
 8005204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800521e:	429a      	cmp	r2, r3
 8005220:	d908      	bls.n	8005234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005222:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4953      	ldr	r1, [pc, #332]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005230:	4313      	orrs	r3, r2
 8005232:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f023 020f 	bic.w	r2, r3, #15
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4947      	ldr	r1, [pc, #284]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800525e:	4313      	orrs	r3, r2
 8005260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d055      	beq.n	800531a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800526e:	4b43      	ldr	r3, [pc, #268]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4940      	ldr	r1, [pc, #256]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800527c:	4313      	orrs	r3, r2
 800527e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d107      	bne.n	8005298 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005288:	4b3c      	ldr	r3, [pc, #240]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d121      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0f6      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d115      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0ea      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0de      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0d6      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f023 0207 	bic.w	r2, r3, #7
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4925      	ldr	r1, [pc, #148]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ea:	f7fd fc6d 	bl	8002bc8 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f2:	f7fd fc69 	bl	8002bc8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0be      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	429a      	cmp	r2, r3
 8005318:	d1eb      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b14      	ldr	r3, [pc, #80]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	429a      	cmp	r2, r3
 8005334:	d208      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	490e      	ldr	r1, [pc, #56]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005344:	4313      	orrs	r3, r2
 8005346:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d214      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 020f 	bic.w	r2, r3, #15
 800535e:	4906      	ldr	r1, [pc, #24]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e086      	b.n	8005486 <HAL_RCC_ClockConfig+0x34e>
 8005378:	52002000 	.word	0x52002000
 800537c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005398:	429a      	cmp	r2, r3
 800539a:	d208      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800539c:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4939      	ldr	r1, [pc, #228]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	4b34      	ldr	r3, [pc, #208]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d208      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	492e      	ldr	r1, [pc, #184]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	4b28      	ldr	r3, [pc, #160]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d208      	bcs.n	800540a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	4922      	ldr	r1, [pc, #136]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005406:	4313      	orrs	r3, r2
 8005408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005422:	429a      	cmp	r2, r3
 8005424:	d208      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4917      	ldr	r1, [pc, #92]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005434:	4313      	orrs	r3, r2
 8005436:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005438:	f000 f834 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	4912      	ldr	r1, [pc, #72]	; (8005494 <HAL_RCC_ClockConfig+0x35c>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <HAL_RCC_ClockConfig+0x358>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <HAL_RCC_ClockConfig+0x35c>)
 8005460:	5cd3      	ldrb	r3, [r2, r3]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x360>)
 800546e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x364>)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x368>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fb5a 	bl	8002b34 <HAL_InitTick>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400
 8005494:	0800adb4 	.word	0x0800adb4
 8005498:	24000014 	.word	0x24000014
 800549c:	24000010 	.word	0x24000010
 80054a0:	24000018 	.word	0x24000018

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054aa:	4bb3      	ldr	r3, [pc, #716]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b2:	2b18      	cmp	r3, #24
 80054b4:	f200 8155 	bhi.w	8005762 <HAL_RCC_GetSysClockFreq+0x2be>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	08005525 	.word	0x08005525
 80054c4:	08005763 	.word	0x08005763
 80054c8:	08005763 	.word	0x08005763
 80054cc:	08005763 	.word	0x08005763
 80054d0:	08005763 	.word	0x08005763
 80054d4:	08005763 	.word	0x08005763
 80054d8:	08005763 	.word	0x08005763
 80054dc:	08005763 	.word	0x08005763
 80054e0:	0800554b 	.word	0x0800554b
 80054e4:	08005763 	.word	0x08005763
 80054e8:	08005763 	.word	0x08005763
 80054ec:	08005763 	.word	0x08005763
 80054f0:	08005763 	.word	0x08005763
 80054f4:	08005763 	.word	0x08005763
 80054f8:	08005763 	.word	0x08005763
 80054fc:	08005763 	.word	0x08005763
 8005500:	08005551 	.word	0x08005551
 8005504:	08005763 	.word	0x08005763
 8005508:	08005763 	.word	0x08005763
 800550c:	08005763 	.word	0x08005763
 8005510:	08005763 	.word	0x08005763
 8005514:	08005763 	.word	0x08005763
 8005518:	08005763 	.word	0x08005763
 800551c:	08005763 	.word	0x08005763
 8005520:	08005557 	.word	0x08005557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005524:	4b94      	ldr	r3, [pc, #592]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005530:	4b91      	ldr	r3, [pc, #580]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	08db      	lsrs	r3, r3, #3
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	4a90      	ldr	r2, [pc, #576]	; (800577c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005542:	e111      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005544:	4b8d      	ldr	r3, [pc, #564]	; (800577c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005546:	61bb      	str	r3, [r7, #24]
      break;
 8005548:	e10e      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800554a:	4b8d      	ldr	r3, [pc, #564]	; (8005780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800554c:	61bb      	str	r3, [r7, #24]
      break;
 800554e:	e10b      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005550:	4b8c      	ldr	r3, [pc, #560]	; (8005784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005552:	61bb      	str	r3, [r7, #24]
      break;
 8005554:	e108      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005556:	4b88      	ldr	r3, [pc, #544]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005560:	4b85      	ldr	r3, [pc, #532]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800556c:	4b82      	ldr	r3, [pc, #520]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005576:	4b80      	ldr	r3, [pc, #512]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80e1 	beq.w	800575c <HAL_RCC_GetSysClockFreq+0x2b8>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b02      	cmp	r3, #2
 800559e:	f000 8083 	beq.w	80056a8 <HAL_RCC_GetSysClockFreq+0x204>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	f200 80a1 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x248>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x114>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d056      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055b6:	e099      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b8:	4b6f      	ldr	r3, [pc, #444]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02d      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055c4:	4b6c      	ldr	r3, [pc, #432]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	4a6b      	ldr	r2, [pc, #428]	; (800577c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b62      	ldr	r3, [pc, #392]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005602:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800561e:	e087      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800578c <HAL_RCC_GetSysClockFreq+0x2e8>
 800562e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005632:	4b51      	ldr	r3, [pc, #324]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005642:	ed97 6a02 	vldr	s12, [r7, #8]
 8005646:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800564a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005662:	e065      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005790 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b40      	ldr	r3, [pc, #256]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a02 	vldr	s12, [r7, #8]
 800568a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056a6:	e043      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005794 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ea:	e021      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005790 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005712:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800572e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005730:	4b11      	ldr	r3, [pc, #68]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	0a5b      	lsrs	r3, r3, #9
 8005736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573a:	3301      	adds	r3, #1
 800573c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005748:	edd7 6a07 	vldr	s13, [r7, #28]
 800574c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005754:	ee17 3a90 	vmov	r3, s15
 8005758:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
      break;
 8005760:	e002      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005764:	61bb      	str	r3, [r7, #24]
      break;
 8005766:	bf00      	nop
  }

  return sysclockfreq;
 8005768:	69bb      	ldr	r3, [r7, #24]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3724      	adds	r7, #36	; 0x24
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58024400 	.word	0x58024400
 800577c:	03d09000 	.word	0x03d09000
 8005780:	003d0900 	.word	0x003d0900
 8005784:	007a1200 	.word	0x007a1200
 8005788:	46000000 	.word	0x46000000
 800578c:	4c742400 	.word	0x4c742400
 8005790:	4a742400 	.word	0x4a742400
 8005794:	4af42400 	.word	0x4af42400

08005798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800579e:	f7ff fe81 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	490f      	ldr	r1, [pc, #60]	; (80057ec <HAL_RCC_GetHCLKFreq+0x54>)
 80057b0:	5ccb      	ldrb	r3, [r1, r3]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	4a09      	ldr	r2, [pc, #36]	; (80057ec <HAL_RCC_GetHCLKFreq+0x54>)
 80057c6:	5cd3      	ldrb	r3, [r2, r3]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	fa22 f303 	lsr.w	r3, r2, r3
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58024400 	.word	0x58024400
 80057ec:	0800adb4 	.word	0x0800adb4
 80057f0:	24000014 	.word	0x24000014
 80057f4:	24000010 	.word	0x24000010

080057f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057fc:	f7ff ffcc 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4904      	ldr	r1, [pc, #16]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	58024400 	.word	0x58024400
 8005820:	0800adb4 	.word	0x0800adb4

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005828:	f7ff ffb6 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4904      	ldr	r1, [pc, #16]	; (800584c <HAL_RCC_GetPCLK2Freq+0x28>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	58024400 	.word	0x58024400
 800584c:	0800adb4 	.word	0x0800adb4

08005850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b0ca      	sub	sp, #296	; 0x128
 8005856:	af00      	add	r7, sp, #0
 8005858:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005862:	2300      	movs	r3, #0
 8005864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005874:	2500      	movs	r5, #0
 8005876:	ea54 0305 	orrs.w	r3, r4, r5
 800587a:	d049      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005886:	d02f      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800588c:	d828      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800588e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005892:	d01a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005898:	d822      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d007      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058a4:	e01c      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4bb8      	ldr	r3, [pc, #736]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	4ab7      	ldr	r2, [pc, #732]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058b2:	e01a      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b8:	3308      	adds	r3, #8
 80058ba:	2102      	movs	r1, #2
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 fc8f 	bl	80071e0 <RCCEx_PLL2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058c8:	e00f      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	3328      	adds	r3, #40	; 0x28
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fd36 	bl	8007344 <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058de:	e004      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80058e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058f2:	4ba5      	ldr	r3, [pc, #660]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005900:	4aa1      	ldr	r2, [pc, #644]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6513      	str	r3, [r2, #80]	; 0x50
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800591c:	f04f 0900 	mov.w	r9, #0
 8005920:	ea58 0309 	orrs.w	r3, r8, r9
 8005924:	d047      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	2b04      	cmp	r3, #4
 800592e:	d82a      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800594d 	.word	0x0800594d
 800593c:	0800595b 	.word	0x0800595b
 8005940:	08005971 	.word	0x08005971
 8005944:	0800598f 	.word	0x0800598f
 8005948:	0800598f 	.word	0x0800598f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b8e      	ldr	r3, [pc, #568]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a8d      	ldr	r2, [pc, #564]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005958:	e01a      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	3308      	adds	r3, #8
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fc3c 	bl	80071e0 <RCCEx_PLL2_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800596e:	e00f      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	3328      	adds	r3, #40	; 0x28
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f001 fce3 	bl	8007344 <RCCEx_PLL3_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005984:	e004      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800598c:	e000      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800598e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005998:	4b7b      	ldr	r3, [pc, #492]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	f023 0107 	bic.w	r1, r3, #7
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	4a78      	ldr	r2, [pc, #480]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6513      	str	r3, [r2, #80]	; 0x50
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80059c2:	f04f 0b00 	mov.w	fp, #0
 80059c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80059ca:	d04c      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d030      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059dc:	d829      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059de:	2bc0      	cmp	r3, #192	; 0xc0
 80059e0:	d02d      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d825      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d018      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d821      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d007      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80059f6:	e01c      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f8:	4b63      	ldr	r3, [pc, #396]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	4a62      	ldr	r2, [pc, #392]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a04:	e01c      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fbe6 	bl	80071e0 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e011      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	3328      	adds	r3, #40	; 0x28
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fc8d 	bl	8007344 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a30:	e006      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a48:	4b4f      	ldr	r3, [pc, #316]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	4a4c      	ldr	r2, [pc, #304]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a5c:	e003      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d053      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a92:	d035      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a98:	d82e      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a9e:	d031      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005aa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aa4:	d828      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aaa:	d01a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab0:	d822      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aba:	d007      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005abc:	e01c      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abe:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	4a31      	ldr	r2, [pc, #196]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aca:	e01c      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 fb83 	bl	80071e0 <RCCEx_PLL2_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ae0:	e011      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae6:	3328      	adds	r3, #40	; 0x28
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fc2a 	bl	8007344 <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af6:	e006      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005afe:	e002      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10b      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b1e:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6593      	str	r3, [r2, #88]	; 0x58
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d056      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b5a:	d038      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b60:	d831      	bhi.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b66:	d034      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b6c:	d82b      	bhi.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b72:	d01d      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b78:	d825      	bhi.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b82:	d00a      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b84:	e01f      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b86:	bf00      	nop
 8005b88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8c:	4ba2      	ldr	r3, [pc, #648]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4aa1      	ldr	r2, [pc, #644]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fb1c 	bl	80071e0 <RCCEx_PLL2_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bae:	e011      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb4:	3328      	adds	r3, #40	; 0x28
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fbc3 	bl	8007344 <RCCEx_PLL3_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bcc:	e002      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bdc:	4b8e      	ldr	r3, [pc, #568]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bec:	4a8a      	ldr	r2, [pc, #552]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8005bf2:	e003      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c16:	460b      	mov	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d03a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c22:	2b30      	cmp	r3, #48	; 0x30
 8005c24:	d01f      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c26:	2b30      	cmp	r3, #48	; 0x30
 8005c28:	d819      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d00c      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d815      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d019      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d111      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3a:	4b77      	ldr	r3, [pc, #476]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	4a76      	ldr	r2, [pc, #472]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c46:	e011      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	2102      	movs	r1, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fac5 	bl	80071e0 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c74:	4b68      	ldr	r3, [pc, #416]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	4a65      	ldr	r2, [pc, #404]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ca8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d051      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cbc:	d035      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc2:	d82e      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc8:	d031      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005cca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cce:	d828      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d01a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	d822      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d007      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ce6:	e01c      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	4a4a      	ldr	r2, [pc, #296]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cf4:	e01c      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fa6e 	bl	80071e0 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d0a:	e011      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d10:	3328      	adds	r3, #40	; 0x28
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 fb15 	bl	8007344 <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d20:	e006      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d28:	e002      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d38:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	4a34      	ldr	r2, [pc, #208]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005d4c:	e003      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d056      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d80:	d033      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d86:	d82c      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d8c:	d02f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d92:	d826      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d98:	d02b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d9e:	d820      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da4:	d012      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005daa:	d81a      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d022      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db4:	d115      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fa0e 	bl	80071e0 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dca:	e015      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd0:	3328      	adds	r3, #40	; 0x28
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fab5 	bl	8007344 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e0e:	4a02      	ldr	r2, [pc, #8]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6513      	str	r3, [r2, #80]	; 0x50
 8005e14:	e006      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d055      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e50:	d033      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e56:	d82c      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d02f      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d826      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e68:	d02b      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e6e:	d820      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e74:	d012      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7a:	d81a      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d022      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e84:	d115      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f9a6 	bl	80071e0 <RCCEx_PLL2_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e015      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea0:	3328      	adds	r3, #40	; 0x28
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fa4d 	bl	8007344 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e004      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ed0:	4ba3      	ldr	r3, [pc, #652]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005edc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ee0:	4a9f      	ldr	r2, [pc, #636]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d037      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1a:	d00e      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f20:	d816      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f2a:	d111      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2c:	4b8c      	ldr	r3, [pc, #560]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	4a8b      	ldr	r2, [pc, #556]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f38:	e00f      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3e:	3308      	adds	r3, #8
 8005f40:	2101      	movs	r1, #1
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 f94c 	bl	80071e0 <RCCEx_PLL2_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f4e:	e004      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f56:	e000      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f62:	4b7f      	ldr	r3, [pc, #508]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a7b      	ldr	r2, [pc, #492]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f72:	430b      	orrs	r3, r1
 8005f74:	6513      	str	r3, [r2, #80]	; 0x50
 8005f76:	e003      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	d039      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d81c      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fc1 	.word	0x08005fc1
 8005fb8:	08005fcf 	.word	0x08005fcf
 8005fbc:	08005fed 	.word	0x08005fed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4b67      	ldr	r3, [pc, #412]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4a66      	ldr	r2, [pc, #408]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fcc:	e00f      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 f902 	bl	80071e0 <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fe2:	e004      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ff6:	4b5a      	ldr	r3, [pc, #360]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffa:	f023 0103 	bic.w	r1, r3, #3
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006004:	4a56      	ldr	r2, [pc, #344]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006006:	430b      	orrs	r3, r1
 8006008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800602a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	f000 809f 	beq.w	8006174 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006036:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a4a      	ldr	r2, [pc, #296]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006042:	f7fc fdc1 	bl	8002bc8 <HAL_GetTick>
 8006046:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800604a:	e00b      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604c:	f7fc fdbc 	bl	8002bc8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b64      	cmp	r3, #100	; 0x64
 800605a:	d903      	bls.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006062:	e005      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006064:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ed      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006074:	2b00      	cmp	r3, #0
 8006076:	d179      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800607a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006084:	4053      	eors	r3, r2
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	2b00      	cmp	r3, #0
 800608c:	d015      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4a30      	ldr	r2, [pc, #192]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060a6:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060b2:	4a2b      	ldr	r2, [pc, #172]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d118      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7fc fd7e 	bl	8002bc8 <HAL_GetTick>
 80060cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d0:	e00d      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d2:	f7fc fd79 	bl	8002bc8 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060dc:	1ad2      	subs	r2, r2, r3
 80060de:	f241 3388 	movw	r3, #5000	; 0x1388
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d903      	bls.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80060ec:	e005      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0eb      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d129      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d10e      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006124:	091a      	lsrs	r2, r3, #4
 8006126:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006128:	4013      	ands	r3, r2
 800612a:	4a0d      	ldr	r2, [pc, #52]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6113      	str	r3, [r2, #16]
 8006130:	e005      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006138:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800613c:	6113      	str	r3, [r2, #16]
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006140:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800614a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614e:	4a04      	ldr	r2, [pc, #16]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6713      	str	r3, [r2, #112]	; 0x70
 8006154:	e00e      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800615a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800615e:	e009      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006160:	58024400 	.word	0x58024400
 8006164:	58024800 	.word	0x58024800
 8006168:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f002 0301 	and.w	r3, r2, #1
 8006180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800618a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800618e:	460b      	mov	r3, r1
 8006190:	4313      	orrs	r3, r2
 8006192:	f000 8089 	beq.w	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619c:	2b28      	cmp	r3, #40	; 0x28
 800619e:	d86b      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	08006281 	.word	0x08006281
 80061ac:	08006279 	.word	0x08006279
 80061b0:	08006279 	.word	0x08006279
 80061b4:	08006279 	.word	0x08006279
 80061b8:	08006279 	.word	0x08006279
 80061bc:	08006279 	.word	0x08006279
 80061c0:	08006279 	.word	0x08006279
 80061c4:	08006279 	.word	0x08006279
 80061c8:	0800624d 	.word	0x0800624d
 80061cc:	08006279 	.word	0x08006279
 80061d0:	08006279 	.word	0x08006279
 80061d4:	08006279 	.word	0x08006279
 80061d8:	08006279 	.word	0x08006279
 80061dc:	08006279 	.word	0x08006279
 80061e0:	08006279 	.word	0x08006279
 80061e4:	08006279 	.word	0x08006279
 80061e8:	08006263 	.word	0x08006263
 80061ec:	08006279 	.word	0x08006279
 80061f0:	08006279 	.word	0x08006279
 80061f4:	08006279 	.word	0x08006279
 80061f8:	08006279 	.word	0x08006279
 80061fc:	08006279 	.word	0x08006279
 8006200:	08006279 	.word	0x08006279
 8006204:	08006279 	.word	0x08006279
 8006208:	08006281 	.word	0x08006281
 800620c:	08006279 	.word	0x08006279
 8006210:	08006279 	.word	0x08006279
 8006214:	08006279 	.word	0x08006279
 8006218:	08006279 	.word	0x08006279
 800621c:	08006279 	.word	0x08006279
 8006220:	08006279 	.word	0x08006279
 8006224:	08006279 	.word	0x08006279
 8006228:	08006281 	.word	0x08006281
 800622c:	08006279 	.word	0x08006279
 8006230:	08006279 	.word	0x08006279
 8006234:	08006279 	.word	0x08006279
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
 8006244:	08006279 	.word	0x08006279
 8006248:	08006281 	.word	0x08006281
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	3308      	adds	r3, #8
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f000 ffc3 	bl	80071e0 <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006260:	e00f      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	3328      	adds	r3, #40	; 0x28
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f86a 	bl	8007344 <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006276:	e004      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800628a:	4bbf      	ldr	r3, [pc, #764]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006298:	4abb      	ldr	r2, [pc, #748]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800629a:	430b      	orrs	r3, r1
 800629c:	6553      	str	r3, [r2, #84]	; 0x54
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f002 0302 	and.w	r3, r2, #2
 80062b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b8:	2300      	movs	r3, #0
 80062ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d041      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d824      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	08006325 	.word	0x08006325
 80062dc:	080062f1 	.word	0x080062f1
 80062e0:	08006307 	.word	0x08006307
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	3308      	adds	r3, #8
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 ff71 	bl	80071e0 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006304:	e00f      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630a:	3328      	adds	r3, #40	; 0x28
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f001 f818 	bl	8007344 <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800631a:	e004      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006322:	e000      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800632e:	4b96      	ldr	r3, [pc, #600]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f023 0107 	bic.w	r1, r3, #7
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633c:	4a92      	ldr	r2, [pc, #584]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800633e:	430b      	orrs	r3, r1
 8006340:	6553      	str	r3, [r2, #84]	; 0x54
 8006342:	e003      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f002 0304 	and.w	r3, r2, #4
 8006358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006362:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006366:	460b      	mov	r3, r1
 8006368:	4313      	orrs	r3, r2
 800636a:	d044      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006374:	2b05      	cmp	r3, #5
 8006376:	d825      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063cd 	.word	0x080063cd
 8006384:	08006399 	.word	0x08006399
 8006388:	080063af 	.word	0x080063af
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063cd 	.word	0x080063cd
 8006394:	080063cd 	.word	0x080063cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	3308      	adds	r3, #8
 800639e:	2101      	movs	r1, #1
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 ff1d 	bl	80071e0 <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063ac:	e00f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	3328      	adds	r3, #40	; 0x28
 80063b4:	2101      	movs	r1, #1
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 ffc4 	bl	8007344 <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063c2:	e004      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80063cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063d6:	4b6c      	ldr	r3, [pc, #432]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	f023 0107 	bic.w	r1, r3, #7
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e6:	4a68      	ldr	r2, [pc, #416]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6593      	str	r3, [r2, #88]	; 0x58
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f002 0320 	and.w	r3, r2, #32
 8006402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800640c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006410:	460b      	mov	r3, r1
 8006412:	4313      	orrs	r3, r2
 8006414:	d055      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006422:	d033      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d82c      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d02f      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d826      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006436:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800643a:	d02b      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800643c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006440:	d820      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006446:	d012      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d81a      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d022      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006456:	d115      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	3308      	adds	r3, #8
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f000 febd 	bl	80071e0 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800646c:	e015      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006472:	3328      	adds	r3, #40	; 0x28
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff64 	bl	8007344 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006482:	e00a      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800648a:	e006      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800648c:	bf00      	nop
 800648e:	e004      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a2:	4b39      	ldr	r3, [pc, #228]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	4a35      	ldr	r2, [pc, #212]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6553      	str	r3, [r2, #84]	; 0x54
 80064b8:	e003      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80064ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064d2:	2300      	movs	r3, #0
 80064d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80064dc:	460b      	mov	r3, r1
 80064de:	4313      	orrs	r3, r2
 80064e0:	d058      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064ee:	d033      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80064f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064f4:	d82c      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	d02f      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d826      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006506:	d02b      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800650c:	d820      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d012      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006518:	d81a      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d022      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d115      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006528:	3308      	adds	r3, #8
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fe57 	bl	80071e0 <RCCEx_PLL2_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006538:	e015      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653e:	3328      	adds	r3, #40	; 0x28
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fefe 	bl	8007344 <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800654e:	e00a      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006556:	e006      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006558:	bf00      	nop
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800655c:	bf00      	nop
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10e      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800657e:	4a02      	ldr	r2, [pc, #8]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6593      	str	r3, [r2, #88]	; 0x58
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80065a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d055      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065c0:	d033      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80065c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065c6:	d82c      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065cc:	d02f      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d2:	d826      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065d8:	d02b      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80065da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065de:	d820      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e4:	d012      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80065e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ea:	d81a      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d022      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f4:	d115      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	3308      	adds	r3, #8
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fdee 	bl	80071e0 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800660a:	e015      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006610:	3328      	adds	r3, #40	; 0x28
 8006612:	2102      	movs	r1, #2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fe95 	bl	8007344 <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006620:	e00a      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800662a:	bf00      	nop
 800662c:	e004      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006640:	4ba1      	ldr	r3, [pc, #644]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006650:	4a9d      	ldr	r2, [pc, #628]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 0308 	and.w	r3, r2, #8
 800666c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006676:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d01e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006692:	3328      	adds	r3, #40	; 0x28
 8006694:	2102      	movs	r1, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fe54 	bl	8007344 <RCCEx_PLL3_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066a8:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b8:	4a83      	ldr	r2, [pc, #524]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f002 0310 	and.w	r3, r2, #16
 80066ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066ce:	2300      	movs	r3, #0
 80066d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d01e      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ea:	d10c      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f0:	3328      	adds	r3, #40	; 0x28
 80066f2:	2102      	movs	r1, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fe25 	bl	8007344 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006706:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006716:	4a6c      	ldr	r2, [pc, #432]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006718:	430b      	orrs	r3, r1
 800671a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006732:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d03e      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006748:	d022      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674e:	d81b      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d00b      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800675a:	e015      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006760:	3308      	adds	r3, #8
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fd3b 	bl	80071e0 <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006770:	e00f      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	3328      	adds	r3, #40	; 0x28
 8006778:	2102      	movs	r1, #2
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fde2 	bl	8007344 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800679a:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067aa:	4a47      	ldr	r2, [pc, #284]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ac:	430b      	orrs	r3, r1
 80067ae:	6593      	str	r3, [r2, #88]	; 0x58
 80067b0:	e003      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80067c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80067c8:	2300      	movs	r3, #0
 80067ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d03b      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067e2:	d01f      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80067e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067e8:	d818      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80067ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ee:	d003      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80067f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f4:	d007      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80067f6:	e011      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f8:	4b33      	ldr	r3, [pc, #204]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4a32      	ldr	r2, [pc, #200]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006804:	e00f      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	3328      	adds	r3, #40	; 0x28
 800680c:	2101      	movs	r1, #1
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fd98 	bl	8007344 <RCCEx_PLL3_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800681a:	e004      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006822:	e000      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800682e:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006840:	430b      	orrs	r3, r1
 8006842:	6553      	str	r3, [r2, #84]	; 0x54
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800684a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800685a:	673b      	str	r3, [r7, #112]	; 0x70
 800685c:	2300      	movs	r3, #0
 800685e:	677b      	str	r3, [r7, #116]	; 0x74
 8006860:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006864:	460b      	mov	r3, r1
 8006866:	4313      	orrs	r3, r2
 8006868:	d034      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006878:	d007      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800687a:	e011      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687c:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a11      	ldr	r2, [pc, #68]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006888:	e00e      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688e:	3308      	adds	r3, #8
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fca4 	bl	80071e0 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800689e:	e003      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	4a02      	ldr	r2, [pc, #8]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068c4:	e006      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80068e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e2:	2300      	movs	r3, #0
 80068e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d00c      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	3328      	adds	r3, #40	; 0x28
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fd23 	bl	8007344 <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006916:	663b      	str	r3, [r7, #96]	; 0x60
 8006918:	2300      	movs	r3, #0
 800691a:	667b      	str	r3, [r7, #100]	; 0x64
 800691c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d038      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800692e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006932:	d018      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006938:	d811      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800693a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800693e:	d014      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006944:	d80b      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800694a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694e:	d106      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006950:	4bc3      	ldr	r3, [pc, #780]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	4ac2      	ldr	r2, [pc, #776]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800695a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800695c:	e008      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006964:	e004      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006966:	bf00      	nop
 8006968:	e002      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800696e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006978:	4bb9      	ldr	r3, [pc, #740]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	4ab5      	ldr	r2, [pc, #724]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800698a:	430b      	orrs	r3, r1
 800698c:	6553      	str	r3, [r2, #84]	; 0x54
 800698e:	e003      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80069a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a6:	2300      	movs	r3, #0
 80069a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069b4:	4baa      	ldr	r3, [pc, #680]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	4aa7      	ldr	r2, [pc, #668]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80069d4:	653b      	str	r3, [r7, #80]	; 0x50
 80069d6:	2300      	movs	r3, #0
 80069d8:	657b      	str	r3, [r7, #84]	; 0x54
 80069da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d00a      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80069e4:	4b9e      	ldr	r3, [pc, #632]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069f4:	4a9a      	ldr	r2, [pc, #616]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a08:	2300      	movs	r3, #0
 8006a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a10:	460b      	mov	r3, r1
 8006a12:	4313      	orrs	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a16:	4b92      	ldr	r3, [pc, #584]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	4a8e      	ldr	r2, [pc, #568]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006a36:	643b      	str	r3, [r7, #64]	; 0x40
 8006a38:	2300      	movs	r3, #0
 8006a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a46:	4b86      	ldr	r3, [pc, #536]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	4a85      	ldr	r2, [pc, #532]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a50:	6113      	str	r3, [r2, #16]
 8006a52:	4b83      	ldr	r3, [pc, #524]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a54:	6919      	ldr	r1, [r3, #16]
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a5e:	4a80      	ldr	r2, [pc, #512]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a80:	4b77      	ldr	r3, [pc, #476]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	4a74      	ldr	r2, [pc, #464]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a90:	430b      	orrs	r3, r1
 8006a92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4313      	orrs	r3, r2
 8006aae:	d00a      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ab0:	4b6b      	ldr	r3, [pc, #428]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac0:	4a67      	ldr	r2, [pc, #412]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006adc:	460b      	mov	r3, r1
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	d011      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fb78 	bl	80071e0 <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6239      	str	r1, [r7, #32]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d011      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	3308      	adds	r3, #8
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fb58 	bl	80071e0 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	61b9      	str	r1, [r7, #24]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d011      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b66:	3308      	adds	r3, #8
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fb38 	bl	80071e0 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6139      	str	r1, [r7, #16]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	d011      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fbca 	bl	8007344 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	2100      	movs	r1, #0
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d011      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	3328      	adds	r3, #40	; 0x28
 8006be8:	2101      	movs	r1, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fbaa 	bl	8007344 <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d011      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c26:	3328      	adds	r3, #40	; 0x28
 8006c28:	2102      	movs	r1, #2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fb8a 	bl	8007344 <RCCEx_PLL3_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006c46:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c60:	58024400 	.word	0x58024400

08006c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c68:	f7fe fd96 	bl	8005798 <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	091b      	lsrs	r3, r3, #4
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4904      	ldr	r1, [pc, #16]	; (8006c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	0800adb4 	.word	0x0800adb4

08006c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c98:	4ba1      	ldr	r3, [pc, #644]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ca2:	4b9f      	ldr	r3, [pc, #636]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	0b1b      	lsrs	r3, r3, #12
 8006ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cae:	4b9c      	ldr	r3, [pc, #624]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cba:	4b99      	ldr	r3, [pc, #612]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8111 	beq.w	8006f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	f000 8083 	beq.w	8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f200 80a1 	bhi.w	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d056      	beq.n	8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006cfa:	e099      	b.n	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cfc:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02d      	beq.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d08:	4b85      	ldr	r3, [pc, #532]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	4a84      	ldr	r2, [pc, #528]	; (8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b7b      	ldr	r3, [pc, #492]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d62:	e087      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da6:	e065      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b59      	ldr	r3, [pc, #356]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dea:	e043      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	e021      	b.n	8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e74:	4b2a      	ldr	r3, [pc, #168]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	0a5b      	lsrs	r3, r3, #9
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eac:	ee07 3a90 	vmov	s15, r3
 8006eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec8:	ee17 2a90 	vmov	r2, s15
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef6:	ee17 2a90 	vmov	r2, s15
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006efe:	e008      	b.n	8006f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	bf00      	nop
 8006f14:	3724      	adds	r7, #36	; 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
 8006f24:	03d09000 	.word	0x03d09000
 8006f28:	46000000 	.word	0x46000000
 8006f2c:	4c742400 	.word	0x4c742400
 8006f30:	4a742400 	.word	0x4a742400
 8006f34:	4af42400 	.word	0x4af42400

08006f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f4a:	4b9f      	ldr	r3, [pc, #636]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	0d1b      	lsrs	r3, r3, #20
 8006f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f56:	4b9c      	ldr	r3, [pc, #624]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f62:	4b99      	ldr	r3, [pc, #612]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	08db      	lsrs	r3, r3, #3
 8006f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8111 	beq.w	80071a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f000 8083 	beq.w	8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	f200 80a1 	bhi.w	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d056      	beq.n	8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fa2:	e099      	b.n	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa4:	4b88      	ldr	r3, [pc, #544]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02d      	beq.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb0:	4b85      	ldr	r3, [pc, #532]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a84      	ldr	r2, [pc, #528]	; (80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b7b      	ldr	r3, [pc, #492]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800700a:	e087      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007032:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704e:	e065      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007092:	e043      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d6:	e021      	b.n	800711c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800711c:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800714a:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007160:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007164:	edd7 6a07 	vldr	s13, [r7, #28]
 8007168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007170:	ee17 2a90 	vmov	r2, s15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007178:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800718e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007192:	edd7 6a07 	vldr	s13, [r7, #28]
 8007196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	ee17 2a90 	vmov	r2, s15
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071a6:	e008      	b.n	80071ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	46000000 	.word	0x46000000
 80071d4:	4c742400 	.word	0x4c742400
 80071d8:	4a742400 	.word	0x4a742400
 80071dc:	4af42400 	.word	0x4af42400

080071e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071ee:	4b53      	ldr	r3, [pc, #332]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d101      	bne.n	80071fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e099      	b.n	8007332 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071fe:	4b4f      	ldr	r3, [pc, #316]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a4e      	ldr	r2, [pc, #312]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007204:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720a:	f7fb fcdd 	bl	8002bc8 <HAL_GetTick>
 800720e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007210:	e008      	b.n	8007224 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007212:	f7fb fcd9 	bl	8002bc8 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e086      	b.n	8007332 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007224:	4b45      	ldr	r3, [pc, #276]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f0      	bne.n	8007212 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007230:	4b42      	ldr	r3, [pc, #264]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	031b      	lsls	r3, r3, #12
 800723e:	493f      	ldr	r1, [pc, #252]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	628b      	str	r3, [r1, #40]	; 0x28
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	3b01      	subs	r3, #1
 800724a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	025b      	lsls	r3, r3, #9
 8007256:	b29b      	uxth	r3, r3
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	3b01      	subs	r3, #1
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	3b01      	subs	r3, #1
 800726e:	061b      	lsls	r3, r3, #24
 8007270:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007274:	4931      	ldr	r1, [pc, #196]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800727a:	4b30      	ldr	r3, [pc, #192]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	492d      	ldr	r1, [pc, #180]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800728c:	4b2b      	ldr	r3, [pc, #172]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f023 0220 	bic.w	r2, r3, #32
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4928      	ldr	r1, [pc, #160]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800729e:	4b27      	ldr	r3, [pc, #156]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	4a26      	ldr	r2, [pc, #152]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ae:	4b24      	ldr	r3, [pc, #144]	; (8007340 <RCCEx_PLL2_Config+0x160>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	69d2      	ldr	r2, [r2, #28]
 80072b6:	00d2      	lsls	r2, r2, #3
 80072b8:	4920      	ldr	r1, [pc, #128]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072be:	4b1f      	ldr	r3, [pc, #124]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	4a1e      	ldr	r2, [pc, #120]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f043 0310 	orr.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072d0:	4b1a      	ldr	r3, [pc, #104]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072dc:	e00f      	b.n	80072fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d106      	bne.n	80072f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072e4:	4b15      	ldr	r3, [pc, #84]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	4a14      	ldr	r2, [pc, #80]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072f0:	e005      	b.n	80072fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	4a11      	ldr	r2, [pc, #68]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 80072f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a0e      	ldr	r2, [pc, #56]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730a:	f7fb fc5d 	bl	8002bc8 <HAL_GetTick>
 800730e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007310:	e008      	b.n	8007324 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007312:	f7fb fc59 	bl	8002bc8 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e006      	b.n	8007332 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <RCCEx_PLL2_Config+0x15c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	58024400 	.word	0x58024400
 8007340:	ffff0007 	.word	0xffff0007

08007344 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007352:	4b53      	ldr	r3, [pc, #332]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d101      	bne.n	8007362 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e099      	b.n	8007496 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007362:	4b4f      	ldr	r3, [pc, #316]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4e      	ldr	r2, [pc, #312]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800736c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7fb fc2b 	bl	8002bc8 <HAL_GetTick>
 8007372:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007374:	e008      	b.n	8007388 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007376:	f7fb fc27 	bl	8002bc8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e086      	b.n	8007496 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007388:	4b45      	ldr	r3, [pc, #276]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007394:	4b42      	ldr	r3, [pc, #264]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	051b      	lsls	r3, r3, #20
 80073a2:	493f      	ldr	r1, [pc, #252]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	628b      	str	r3, [r1, #40]	; 0x28
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	025b      	lsls	r3, r3, #9
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	061b      	lsls	r3, r3, #24
 80073d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073d8:	4931      	ldr	r1, [pc, #196]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073de:	4b30      	ldr	r3, [pc, #192]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	492d      	ldr	r1, [pc, #180]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	4928      	ldr	r1, [pc, #160]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	4a26      	ldr	r2, [pc, #152]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800740c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007412:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <RCCEx_PLL3_Config+0x160>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	69d2      	ldr	r2, [r2, #28]
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	4920      	ldr	r1, [pc, #128]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007422:	4b1f      	ldr	r3, [pc, #124]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007434:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800743a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800743e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007440:	e00f      	b.n	8007462 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d106      	bne.n	8007456 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800744e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007454:	e005      	b.n	8007462 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800745c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746e:	f7fb fbab 	bl	8002bc8 <HAL_GetTick>
 8007472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007474:	e008      	b.n	8007488 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007476:	f7fb fba7 	bl	8002bc8 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e006      	b.n	8007496 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
 80074a4:	ffff0007 	.word	0xffff0007

080074a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e042      	b.n	8007540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fa feaf 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2224      	movs	r2, #36	; 0x24
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fce0 	bl	8007eb0 <UART_SetConfig>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e022      	b.n	8007540 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fa3c 	bl	8008980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fac3 	bl	8008ac4 <UART_CheckIdleState>
 800753e:	4603      	mov	r3, r0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	; 0x28
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755e:	2b20      	cmp	r3, #32
 8007560:	d17b      	bne.n	800765a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_UART_Transmit+0x26>
 8007568:	88fb      	ldrh	r3, [r7, #6]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e074      	b.n	800765c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2221      	movs	r2, #33	; 0x21
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007582:	f7fb fb21 	bl	8002bc8 <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a0:	d108      	bne.n	80075b4 <HAL_UART_Transmit+0x6c>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e003      	b.n	80075bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075bc:	e030      	b.n	8007620 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2200      	movs	r2, #0
 80075c6:	2180      	movs	r1, #128	; 0x80
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 fb25 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e03d      	b.n	800765c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	3302      	adds	r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e007      	b.n	800760e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	3301      	adds	r3, #1
 800760c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1c8      	bne.n	80075be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2200      	movs	r2, #0
 8007634:	2140      	movs	r1, #64	; 0x40
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f001 faee 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e000      	b.n	800765c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800765a:	2302      	movs	r3, #2
  }
}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007678:	2b20      	cmp	r3, #32
 800767a:	d137      	bne.n	80076ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_UART_Receive_IT+0x24>
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e030      	b.n	80076ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <HAL_UART_Receive_IT+0x94>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d01f      	beq.n	80076dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	613b      	str	r3, [r7, #16]
   return(result);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	6a3a      	ldr	r2, [r7, #32]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	461a      	mov	r2, r3
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 fb00 	bl	8008ce8 <UART_Start_Receive_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	58000c00 	.word	0x58000c00

080076fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b0ba      	sub	sp, #232	; 0xe8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007726:	f640 030f 	movw	r3, #2063	; 0x80f
 800772a:	4013      	ands	r3, r2
 800772c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11b      	bne.n	8007770 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d015      	beq.n	8007770 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8377 	beq.w	8007e54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
      }
      return;
 800776e:	e371      	b.n	8007e54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8123 	beq.w	80079c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800777a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800777e:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <HAL_UART_IRQHandler+0x2b8>)
 8007780:	4013      	ands	r3, r2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800778a:	4b8b      	ldr	r3, [pc, #556]	; (80079b8 <HAL_UART_IRQHandler+0x2bc>)
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8116 	beq.w	80079c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d011      	beq.n	80077c4 <HAL_UART_IRQHandler+0xc8>
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2201      	movs	r2, #1
 80077b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f043 0201 	orr.w	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d011      	beq.n	80077f4 <HAL_UART_IRQHandler+0xf8>
 80077d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2202      	movs	r2, #2
 80077e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f043 0204 	orr.w	r2, r3, #4
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d011      	beq.n	8007824 <HAL_UART_IRQHandler+0x128>
 8007800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2204      	movs	r2, #4
 8007812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f043 0202 	orr.w	r2, r3, #2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d017      	beq.n	8007860 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800783c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007840:	4b5c      	ldr	r3, [pc, #368]	; (80079b4 <HAL_UART_IRQHandler+0x2b8>)
 8007842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2208      	movs	r2, #8
 800784e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007856:	f043 0208 	orr.w	r2, r3, #8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007868:	2b00      	cmp	r3, #0
 800786a:	d012      	beq.n	8007892 <HAL_UART_IRQHandler+0x196>
 800786c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00c      	beq.n	8007892 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 82dd 	beq.w	8007e58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800789e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d013      	beq.n	80078d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d105      	bne.n	80078c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d054      	beq.n	80079a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fb18 	bl	8008f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d146      	bne.n	8007998 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3308      	adds	r3, #8
 8007910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800793a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800794e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1d9      	bne.n	800790a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795c:	2b00      	cmp	r3, #0
 800795e:	d017      	beq.n	8007990 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <HAL_UART_IRQHandler+0x2c0>)
 8007968:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007970:	4618      	mov	r0, r3
 8007972:	f7fb fda7 	bl	80034c4 <HAL_DMA_Abort_IT>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d019      	beq.n	80079b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800798a:	4610      	mov	r0, r2
 800798c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798e:	e00f      	b.n	80079b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa77 	bl	8007e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007996:	e00b      	b.n	80079b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa73 	bl	8007e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799e:	e007      	b.n	80079b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa6f 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80079ae:	e253      	b.n	8007e58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	bf00      	nop
    return;
 80079b2:	e251      	b.n	8007e58 <HAL_UART_IRQHandler+0x75c>
 80079b4:	10000001 	.word	0x10000001
 80079b8:	04000120 	.word	0x04000120
 80079bc:	08008ff9 	.word	0x08008ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f040 81e7 	bne.w	8007d98 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 81e0 	beq.w	8007d98 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 81d9 	beq.w	8007d98 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2210      	movs	r2, #16
 80079ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	f040 8151 	bne.w	8007ca0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a96      	ldr	r2, [pc, #600]	; (8007c60 <HAL_UART_IRQHandler+0x564>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d068      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a93      	ldr	r2, [pc, #588]	; (8007c64 <HAL_UART_IRQHandler+0x568>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d061      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a91      	ldr	r2, [pc, #580]	; (8007c68 <HAL_UART_IRQHandler+0x56c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d05a      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a8e      	ldr	r2, [pc, #568]	; (8007c6c <HAL_UART_IRQHandler+0x570>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d053      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a8c      	ldr	r2, [pc, #560]	; (8007c70 <HAL_UART_IRQHandler+0x574>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04c      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a89      	ldr	r2, [pc, #548]	; (8007c74 <HAL_UART_IRQHandler+0x578>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d045      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a87      	ldr	r2, [pc, #540]	; (8007c78 <HAL_UART_IRQHandler+0x57c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d03e      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a84      	ldr	r2, [pc, #528]	; (8007c7c <HAL_UART_IRQHandler+0x580>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d037      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a82      	ldr	r2, [pc, #520]	; (8007c80 <HAL_UART_IRQHandler+0x584>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d030      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a7f      	ldr	r2, [pc, #508]	; (8007c84 <HAL_UART_IRQHandler+0x588>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d029      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a7d      	ldr	r2, [pc, #500]	; (8007c88 <HAL_UART_IRQHandler+0x58c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d022      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a7a      	ldr	r2, [pc, #488]	; (8007c8c <HAL_UART_IRQHandler+0x590>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a78      	ldr	r2, [pc, #480]	; (8007c90 <HAL_UART_IRQHandler+0x594>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d014      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a75      	ldr	r2, [pc, #468]	; (8007c94 <HAL_UART_IRQHandler+0x598>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00d      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a73      	ldr	r2, [pc, #460]	; (8007c98 <HAL_UART_IRQHandler+0x59c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d006      	beq.n	8007ade <HAL_UART_IRQHandler+0x3e2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a70      	ldr	r2, [pc, #448]	; (8007c9c <HAL_UART_IRQHandler+0x5a0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d106      	bne.n	8007aec <HAL_UART_IRQHandler+0x3f0>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	e005      	b.n	8007af8 <HAL_UART_IRQHandler+0x3fc>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 81ab 	beq.w	8007e5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b10:	429a      	cmp	r2, r3
 8007b12:	f080 81a3 	bcs.w	8007e5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2c:	f000 8087 	beq.w	8007c3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1da      	bne.n	8007b30 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e1      	bne.n	8007b7a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e3      	bne.n	8007bb6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0c:	f023 0310 	bic.w	r3, r3, #16
 8007c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e4      	bne.n	8007bfc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fb f925 	bl	8002e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f91d 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c5e:	e0fd      	b.n	8007e5c <HAL_UART_IRQHandler+0x760>
 8007c60:	40020010 	.word	0x40020010
 8007c64:	40020028 	.word	0x40020028
 8007c68:	40020040 	.word	0x40020040
 8007c6c:	40020058 	.word	0x40020058
 8007c70:	40020070 	.word	0x40020070
 8007c74:	40020088 	.word	0x40020088
 8007c78:	400200a0 	.word	0x400200a0
 8007c7c:	400200b8 	.word	0x400200b8
 8007c80:	40020410 	.word	0x40020410
 8007c84:	40020428 	.word	0x40020428
 8007c88:	40020440 	.word	0x40020440
 8007c8c:	40020458 	.word	0x40020458
 8007c90:	40020470 	.word	0x40020470
 8007c94:	40020488 	.word	0x40020488
 8007c98:	400204a0 	.word	0x400204a0
 8007c9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80cf 	beq.w	8007e60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80ca 	beq.w	8007e60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cee:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e4      	bne.n	8007ccc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	623b      	str	r3, [r7, #32]
   return(result);
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	4b55      	ldr	r3, [pc, #340]	; (8007e6c <HAL_UART_IRQHandler+0x770>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d26:	633a      	str	r2, [r7, #48]	; 0x30
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e3      	bne.n	8007d02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0310 	bic.w	r3, r3, #16
 8007d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e4      	bne.n	8007d4e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f881 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d96:	e063      	b.n	8007e60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00e      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x6c6>
 8007da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fe7a 	bl	8009ab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc0:	e051      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d105      	bne.n	8007de6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d03a      	beq.n	8007e64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
    }
    return;
 8007df6:	e035      	b.n	8007e64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d009      	beq.n	8007e18 <HAL_UART_IRQHandler+0x71c>
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f907 	bl	8009024 <UART_EndTransmit_IT>
    return;
 8007e16:	e026      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <HAL_UART_IRQHandler+0x73c>
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fe53 	bl	8009adc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e36:	e016      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d010      	beq.n	8007e66 <HAL_UART_IRQHandler+0x76a>
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da0c      	bge.n	8007e66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fe3b 	bl	8009ac8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e52:	e008      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e54:	bf00      	nop
 8007e56:	e006      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
    return;
 8007e58:	bf00      	nop
 8007e5a:	e004      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e5c:	bf00      	nop
 8007e5e:	e002      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <HAL_UART_IRQHandler+0x76a>
    return;
 8007e64:	bf00      	nop
  }
}
 8007e66:	37e8      	adds	r7, #232	; 0xe8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	effffffe 	.word	0xeffffffe

08007e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b092      	sub	sp, #72	; 0x48
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4bbe      	ldr	r3, [pc, #760]	; (80081d8 <UART_SetConfig+0x328>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4ab3      	ldr	r2, [pc, #716]	; (80081dc <UART_SetConfig+0x32c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	4baf      	ldr	r3, [pc, #700]	; (80081e0 <UART_SetConfig+0x330>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	f023 010f 	bic.w	r1, r3, #15
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4aa6      	ldr	r2, [pc, #664]	; (80081e4 <UART_SetConfig+0x334>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d177      	bne.n	8008040 <UART_SetConfig+0x190>
 8007f50:	4ba5      	ldr	r3, [pc, #660]	; (80081e8 <UART_SetConfig+0x338>)
 8007f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f58:	2b28      	cmp	r3, #40	; 0x28
 8007f5a:	d86d      	bhi.n	8008038 <UART_SetConfig+0x188>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0xb4>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08008009 	.word	0x08008009
 8007f68:	08008039 	.word	0x08008039
 8007f6c:	08008039 	.word	0x08008039
 8007f70:	08008039 	.word	0x08008039
 8007f74:	08008039 	.word	0x08008039
 8007f78:	08008039 	.word	0x08008039
 8007f7c:	08008039 	.word	0x08008039
 8007f80:	08008039 	.word	0x08008039
 8007f84:	08008011 	.word	0x08008011
 8007f88:	08008039 	.word	0x08008039
 8007f8c:	08008039 	.word	0x08008039
 8007f90:	08008039 	.word	0x08008039
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08008039 	.word	0x08008039
 8007f9c:	08008039 	.word	0x08008039
 8007fa0:	08008039 	.word	0x08008039
 8007fa4:	08008019 	.word	0x08008019
 8007fa8:	08008039 	.word	0x08008039
 8007fac:	08008039 	.word	0x08008039
 8007fb0:	08008039 	.word	0x08008039
 8007fb4:	08008039 	.word	0x08008039
 8007fb8:	08008039 	.word	0x08008039
 8007fbc:	08008039 	.word	0x08008039
 8007fc0:	08008039 	.word	0x08008039
 8007fc4:	08008021 	.word	0x08008021
 8007fc8:	08008039 	.word	0x08008039
 8007fcc:	08008039 	.word	0x08008039
 8007fd0:	08008039 	.word	0x08008039
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008039 	.word	0x08008039
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	08008029 	.word	0x08008029
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	08008039 	.word	0x08008039
 8007ff0:	08008039 	.word	0x08008039
 8007ff4:	08008039 	.word	0x08008039
 8007ff8:	08008039 	.word	0x08008039
 8007ffc:	08008039 	.word	0x08008039
 8008000:	08008039 	.word	0x08008039
 8008004:	08008031 	.word	0x08008031
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e222      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e21e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e21a      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e216      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e212      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e20e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e20a      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a69      	ldr	r2, [pc, #420]	; (80081ec <UART_SetConfig+0x33c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d130      	bne.n	80080ac <UART_SetConfig+0x1fc>
 800804a:	4b67      	ldr	r3, [pc, #412]	; (80081e8 <UART_SetConfig+0x338>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d826      	bhi.n	80080a4 <UART_SetConfig+0x1f4>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x1ac>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	08008095 	.word	0x08008095
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1ec      	b.n	8008456 <UART_SetConfig+0x5a6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1e8      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1e4      	b.n	8008456 <UART_SetConfig+0x5a6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e1e0      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e1dc      	b.n	8008456 <UART_SetConfig+0x5a6>
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e1d8      	b.n	8008456 <UART_SetConfig+0x5a6>
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e1d4      	b.n	8008456 <UART_SetConfig+0x5a6>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a4f      	ldr	r2, [pc, #316]	; (80081f0 <UART_SetConfig+0x340>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d130      	bne.n	8008118 <UART_SetConfig+0x268>
 80080b6:	4b4c      	ldr	r3, [pc, #304]	; (80081e8 <UART_SetConfig+0x338>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d826      	bhi.n	8008110 <UART_SetConfig+0x260>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x218>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e1b6      	b.n	8008456 <UART_SetConfig+0x5a6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e1b2      	b.n	8008456 <UART_SetConfig+0x5a6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e1ae      	b.n	8008456 <UART_SetConfig+0x5a6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e1aa      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e1a6      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e1a2      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e19e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a35      	ldr	r2, [pc, #212]	; (80081f4 <UART_SetConfig+0x344>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d130      	bne.n	8008184 <UART_SetConfig+0x2d4>
 8008122:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <UART_SetConfig+0x338>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b05      	cmp	r3, #5
 800812c:	d826      	bhi.n	800817c <UART_SetConfig+0x2cc>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x284>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008155 	.word	0x08008155
 800813c:	0800815d 	.word	0x0800815d
 8008140:	08008165 	.word	0x08008165
 8008144:	0800816d 	.word	0x0800816d
 8008148:	08008175 	.word	0x08008175
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e180      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008154:	2304      	movs	r3, #4
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e17c      	b.n	8008456 <UART_SetConfig+0x5a6>
 800815c:	2308      	movs	r3, #8
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e178      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008164:	2310      	movs	r3, #16
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e174      	b.n	8008456 <UART_SetConfig+0x5a6>
 800816c:	2320      	movs	r3, #32
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e170      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008174:	2340      	movs	r3, #64	; 0x40
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e16c      	b.n	8008456 <UART_SetConfig+0x5a6>
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e168      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <UART_SetConfig+0x348>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d142      	bne.n	8008214 <UART_SetConfig+0x364>
 800818e:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <UART_SetConfig+0x338>)
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b05      	cmp	r3, #5
 8008198:	d838      	bhi.n	800820c <UART_SetConfig+0x35c>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x2f0>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081fd 	.word	0x080081fd
 80081b4:	08008205 	.word	0x08008205
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e14a      	b.n	8008456 <UART_SetConfig+0x5a6>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e146      	b.n	8008456 <UART_SetConfig+0x5a6>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e142      	b.n	8008456 <UART_SetConfig+0x5a6>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e13e      	b.n	8008456 <UART_SetConfig+0x5a6>
 80081d8:	cfff69f3 	.word	0xcfff69f3
 80081dc:	58000c00 	.word	0x58000c00
 80081e0:	11fff4ff 	.word	0x11fff4ff
 80081e4:	40011000 	.word	0x40011000
 80081e8:	58024400 	.word	0x58024400
 80081ec:	40004400 	.word	0x40004400
 80081f0:	40004800 	.word	0x40004800
 80081f4:	40004c00 	.word	0x40004c00
 80081f8:	40005000 	.word	0x40005000
 80081fc:	2320      	movs	r3, #32
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e128      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e124      	b.n	8008456 <UART_SetConfig+0x5a6>
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e120      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4acb      	ldr	r2, [pc, #812]	; (8008548 <UART_SetConfig+0x698>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d176      	bne.n	800830c <UART_SetConfig+0x45c>
 800821e:	4bcb      	ldr	r3, [pc, #812]	; (800854c <UART_SetConfig+0x69c>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008226:	2b28      	cmp	r3, #40	; 0x28
 8008228:	d86c      	bhi.n	8008304 <UART_SetConfig+0x454>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0x380>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	080082d5 	.word	0x080082d5
 8008234:	08008305 	.word	0x08008305
 8008238:	08008305 	.word	0x08008305
 800823c:	08008305 	.word	0x08008305
 8008240:	08008305 	.word	0x08008305
 8008244:	08008305 	.word	0x08008305
 8008248:	08008305 	.word	0x08008305
 800824c:	08008305 	.word	0x08008305
 8008250:	080082dd 	.word	0x080082dd
 8008254:	08008305 	.word	0x08008305
 8008258:	08008305 	.word	0x08008305
 800825c:	08008305 	.word	0x08008305
 8008260:	08008305 	.word	0x08008305
 8008264:	08008305 	.word	0x08008305
 8008268:	08008305 	.word	0x08008305
 800826c:	08008305 	.word	0x08008305
 8008270:	080082e5 	.word	0x080082e5
 8008274:	08008305 	.word	0x08008305
 8008278:	08008305 	.word	0x08008305
 800827c:	08008305 	.word	0x08008305
 8008280:	08008305 	.word	0x08008305
 8008284:	08008305 	.word	0x08008305
 8008288:	08008305 	.word	0x08008305
 800828c:	08008305 	.word	0x08008305
 8008290:	080082ed 	.word	0x080082ed
 8008294:	08008305 	.word	0x08008305
 8008298:	08008305 	.word	0x08008305
 800829c:	08008305 	.word	0x08008305
 80082a0:	08008305 	.word	0x08008305
 80082a4:	08008305 	.word	0x08008305
 80082a8:	08008305 	.word	0x08008305
 80082ac:	08008305 	.word	0x08008305
 80082b0:	080082f5 	.word	0x080082f5
 80082b4:	08008305 	.word	0x08008305
 80082b8:	08008305 	.word	0x08008305
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008305 	.word	0x08008305
 80082c4:	08008305 	.word	0x08008305
 80082c8:	08008305 	.word	0x08008305
 80082cc:	08008305 	.word	0x08008305
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e0bc      	b.n	8008456 <UART_SetConfig+0x5a6>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e0b8      	b.n	8008456 <UART_SetConfig+0x5a6>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e0b4      	b.n	8008456 <UART_SetConfig+0x5a6>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e0b0      	b.n	8008456 <UART_SetConfig+0x5a6>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e0ac      	b.n	8008456 <UART_SetConfig+0x5a6>
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e0a8      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e0a4      	b.n	8008456 <UART_SetConfig+0x5a6>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a8f      	ldr	r2, [pc, #572]	; (8008550 <UART_SetConfig+0x6a0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d130      	bne.n	8008378 <UART_SetConfig+0x4c8>
 8008316:	4b8d      	ldr	r3, [pc, #564]	; (800854c <UART_SetConfig+0x69c>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x4c0>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x478>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e086      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e082      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e07e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e07a      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e076      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e072      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e06e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a75      	ldr	r2, [pc, #468]	; (8008554 <UART_SetConfig+0x6a4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d130      	bne.n	80083e4 <UART_SetConfig+0x534>
 8008382:	4b72      	ldr	r3, [pc, #456]	; (800854c <UART_SetConfig+0x69c>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b05      	cmp	r3, #5
 800838c:	d826      	bhi.n	80083dc <UART_SetConfig+0x52c>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x4e4>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083b5 	.word	0x080083b5
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e050      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e04c      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e048      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e044      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083cc:	2320      	movs	r3, #32
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e040      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e03c      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e038      	b.n	8008456 <UART_SetConfig+0x5a6>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a5b      	ldr	r2, [pc, #364]	; (8008558 <UART_SetConfig+0x6a8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d130      	bne.n	8008450 <UART_SetConfig+0x5a0>
 80083ee:	4b57      	ldr	r3, [pc, #348]	; (800854c <UART_SetConfig+0x69c>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d826      	bhi.n	8008448 <UART_SetConfig+0x598>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x550>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008419 	.word	0x08008419
 8008404:	08008421 	.word	0x08008421
 8008408:	08008429 	.word	0x08008429
 800840c:	08008431 	.word	0x08008431
 8008410:	08008439 	.word	0x08008439
 8008414:	08008441 	.word	0x08008441
 8008418:	2302      	movs	r3, #2
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e01a      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e016      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e012      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008430:	2310      	movs	r3, #16
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e00e      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008438:	2320      	movs	r3, #32
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e00a      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e006      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e002      	b.n	8008456 <UART_SetConfig+0x5a6>
 8008450:	2380      	movs	r3, #128	; 0x80
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <UART_SetConfig+0x6a8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f040 80f8 	bne.w	8008652 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008466:	2b20      	cmp	r3, #32
 8008468:	dc46      	bgt.n	80084f8 <UART_SetConfig+0x648>
 800846a:	2b02      	cmp	r3, #2
 800846c:	f2c0 8082 	blt.w	8008574 <UART_SetConfig+0x6c4>
 8008470:	3b02      	subs	r3, #2
 8008472:	2b1e      	cmp	r3, #30
 8008474:	d87e      	bhi.n	8008574 <UART_SetConfig+0x6c4>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x5cc>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084ff 	.word	0x080084ff
 8008480:	08008575 	.word	0x08008575
 8008484:	08008507 	.word	0x08008507
 8008488:	08008575 	.word	0x08008575
 800848c:	08008575 	.word	0x08008575
 8008490:	08008575 	.word	0x08008575
 8008494:	08008517 	.word	0x08008517
 8008498:	08008575 	.word	0x08008575
 800849c:	08008575 	.word	0x08008575
 80084a0:	08008575 	.word	0x08008575
 80084a4:	08008575 	.word	0x08008575
 80084a8:	08008575 	.word	0x08008575
 80084ac:	08008575 	.word	0x08008575
 80084b0:	08008575 	.word	0x08008575
 80084b4:	08008527 	.word	0x08008527
 80084b8:	08008575 	.word	0x08008575
 80084bc:	08008575 	.word	0x08008575
 80084c0:	08008575 	.word	0x08008575
 80084c4:	08008575 	.word	0x08008575
 80084c8:	08008575 	.word	0x08008575
 80084cc:	08008575 	.word	0x08008575
 80084d0:	08008575 	.word	0x08008575
 80084d4:	08008575 	.word	0x08008575
 80084d8:	08008575 	.word	0x08008575
 80084dc:	08008575 	.word	0x08008575
 80084e0:	08008575 	.word	0x08008575
 80084e4:	08008575 	.word	0x08008575
 80084e8:	08008575 	.word	0x08008575
 80084ec:	08008575 	.word	0x08008575
 80084f0:	08008575 	.word	0x08008575
 80084f4:	08008567 	.word	0x08008567
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d037      	beq.n	800856c <UART_SetConfig+0x6bc>
 80084fc:	e03a      	b.n	8008574 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084fe:	f7fe fbb1 	bl	8006c64 <HAL_RCCEx_GetD3PCLK1Freq>
 8008502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008504:	e03c      	b.n	8008580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fbc0 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008514:	e034      	b.n	8008580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008516:	f107 0318 	add.w	r3, r7, #24
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fd0c 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008524:	e02c      	b.n	8008580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <UART_SetConfig+0x69c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d016      	beq.n	8008560 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008532:	4b06      	ldr	r3, [pc, #24]	; (800854c <UART_SetConfig+0x69c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	f003 0303 	and.w	r3, r3, #3
 800853c:	4a07      	ldr	r2, [pc, #28]	; (800855c <UART_SetConfig+0x6ac>)
 800853e:	fa22 f303 	lsr.w	r3, r2, r3
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008544:	e01c      	b.n	8008580 <UART_SetConfig+0x6d0>
 8008546:	bf00      	nop
 8008548:	40011400 	.word	0x40011400
 800854c:	58024400 	.word	0x58024400
 8008550:	40007800 	.word	0x40007800
 8008554:	40007c00 	.word	0x40007c00
 8008558:	58000c00 	.word	0x58000c00
 800855c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008560:	4b9d      	ldr	r3, [pc, #628]	; (80087d8 <UART_SetConfig+0x928>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008564:	e00c      	b.n	8008580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008566:	4b9d      	ldr	r3, [pc, #628]	; (80087dc <UART_SetConfig+0x92c>)
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856a:	e009      	b.n	8008580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008572:	e005      	b.n	8008580 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800857e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 81de 	beq.w	8008944 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	4a94      	ldr	r2, [pc, #592]	; (80087e0 <UART_SetConfig+0x930>)
 800858e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008592:	461a      	mov	r2, r3
 8008594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008596:	fbb3 f3f2 	udiv	r3, r3, r2
 800859a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4413      	add	r3, r2
 80085a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d305      	bcc.n	80085b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d903      	bls.n	80085c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085be:	e1c1      	b.n	8008944 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c2:	2200      	movs	r2, #0
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	60fa      	str	r2, [r7, #12]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	4a84      	ldr	r2, [pc, #528]	; (80087e0 <UART_SetConfig+0x930>)
 80085ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2200      	movs	r2, #0
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085e2:	f7f7 fee5 	bl	80003b0 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	f04f 0200 	mov.w	r2, #0
 80085f2:	f04f 0300 	mov.w	r3, #0
 80085f6:	020b      	lsls	r3, r1, #8
 80085f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085fc:	0202      	lsls	r2, r0, #8
 80085fe:	6979      	ldr	r1, [r7, #20]
 8008600:	6849      	ldr	r1, [r1, #4]
 8008602:	0849      	lsrs	r1, r1, #1
 8008604:	2000      	movs	r0, #0
 8008606:	460c      	mov	r4, r1
 8008608:	4605      	mov	r5, r0
 800860a:	eb12 0804 	adds.w	r8, r2, r4
 800860e:	eb43 0905 	adc.w	r9, r3, r5
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	469a      	mov	sl, r3
 800861a:	4693      	mov	fp, r2
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	4640      	mov	r0, r8
 8008622:	4649      	mov	r1, r9
 8008624:	f7f7 fec4 	bl	80003b0 <__aeabi_uldivmod>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4613      	mov	r3, r2
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008636:	d308      	bcc.n	800864a <UART_SetConfig+0x79a>
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863e:	d204      	bcs.n	800864a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	e17c      	b.n	8008944 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008650:	e178      	b.n	8008944 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800865a:	f040 80c5 	bne.w	80087e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800865e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008662:	2b20      	cmp	r3, #32
 8008664:	dc48      	bgt.n	80086f8 <UART_SetConfig+0x848>
 8008666:	2b00      	cmp	r3, #0
 8008668:	db7b      	blt.n	8008762 <UART_SetConfig+0x8b2>
 800866a:	2b20      	cmp	r3, #32
 800866c:	d879      	bhi.n	8008762 <UART_SetConfig+0x8b2>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x7c4>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008707 	.word	0x08008707
 800867c:	08008763 	.word	0x08008763
 8008680:	08008763 	.word	0x08008763
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008763 	.word	0x08008763
 800868c:	08008763 	.word	0x08008763
 8008690:	08008763 	.word	0x08008763
 8008694:	0800871f 	.word	0x0800871f
 8008698:	08008763 	.word	0x08008763
 800869c:	08008763 	.word	0x08008763
 80086a0:	08008763 	.word	0x08008763
 80086a4:	08008763 	.word	0x08008763
 80086a8:	08008763 	.word	0x08008763
 80086ac:	08008763 	.word	0x08008763
 80086b0:	08008763 	.word	0x08008763
 80086b4:	0800872f 	.word	0x0800872f
 80086b8:	08008763 	.word	0x08008763
 80086bc:	08008763 	.word	0x08008763
 80086c0:	08008763 	.word	0x08008763
 80086c4:	08008763 	.word	0x08008763
 80086c8:	08008763 	.word	0x08008763
 80086cc:	08008763 	.word	0x08008763
 80086d0:	08008763 	.word	0x08008763
 80086d4:	08008763 	.word	0x08008763
 80086d8:	08008763 	.word	0x08008763
 80086dc:	08008763 	.word	0x08008763
 80086e0:	08008763 	.word	0x08008763
 80086e4:	08008763 	.word	0x08008763
 80086e8:	08008763 	.word	0x08008763
 80086ec:	08008763 	.word	0x08008763
 80086f0:	08008763 	.word	0x08008763
 80086f4:	08008755 	.word	0x08008755
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d02e      	beq.n	800875a <UART_SetConfig+0x8aa>
 80086fc:	e031      	b.n	8008762 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086fe:	f7fd f87b 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8008702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008704:	e033      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008706:	f7fd f88d 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 800870a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800870c:	e02f      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fabc 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871c:	e027      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871e:	f107 0318 	add.w	r3, r7, #24
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fc08 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872c:	e01f      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872e:	4b2d      	ldr	r3, [pc, #180]	; (80087e4 <UART_SetConfig+0x934>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800873a:	4b2a      	ldr	r3, [pc, #168]	; (80087e4 <UART_SetConfig+0x934>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a24      	ldr	r2, [pc, #144]	; (80087d8 <UART_SetConfig+0x928>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800874c:	e00f      	b.n	800876e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <UART_SetConfig+0x928>)
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008752:	e00c      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008754:	4b21      	ldr	r3, [pc, #132]	; (80087dc <UART_SetConfig+0x92c>)
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008760:	e005      	b.n	800876e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800876c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800876e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80e7 	beq.w	8008944 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <UART_SetConfig+0x930>)
 800877c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008780:	461a      	mov	r2, r3
 8008782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008784:	fbb3 f3f2 	udiv	r3, r3, r2
 8008788:	005a      	lsls	r2, r3, #1
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	441a      	add	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d916      	bls.n	80087d0 <UART_SetConfig+0x920>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d212      	bcs.n	80087d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f023 030f 	bic.w	r3, r3, #15
 80087b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	b29a      	uxth	r2, r3
 80087c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087c2:	4313      	orrs	r3, r2
 80087c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	e0b9      	b.n	8008944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087d6:	e0b5      	b.n	8008944 <UART_SetConfig+0xa94>
 80087d8:	03d09000 	.word	0x03d09000
 80087dc:	003d0900 	.word	0x003d0900
 80087e0:	0800adc4 	.word	0x0800adc4
 80087e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	dc49      	bgt.n	8008884 <UART_SetConfig+0x9d4>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db7c      	blt.n	80088ee <UART_SetConfig+0xa3e>
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d87a      	bhi.n	80088ee <UART_SetConfig+0xa3e>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x950>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	0800888b 	.word	0x0800888b
 8008804:	08008893 	.word	0x08008893
 8008808:	080088ef 	.word	0x080088ef
 800880c:	080088ef 	.word	0x080088ef
 8008810:	0800889b 	.word	0x0800889b
 8008814:	080088ef 	.word	0x080088ef
 8008818:	080088ef 	.word	0x080088ef
 800881c:	080088ef 	.word	0x080088ef
 8008820:	080088ab 	.word	0x080088ab
 8008824:	080088ef 	.word	0x080088ef
 8008828:	080088ef 	.word	0x080088ef
 800882c:	080088ef 	.word	0x080088ef
 8008830:	080088ef 	.word	0x080088ef
 8008834:	080088ef 	.word	0x080088ef
 8008838:	080088ef 	.word	0x080088ef
 800883c:	080088ef 	.word	0x080088ef
 8008840:	080088bb 	.word	0x080088bb
 8008844:	080088ef 	.word	0x080088ef
 8008848:	080088ef 	.word	0x080088ef
 800884c:	080088ef 	.word	0x080088ef
 8008850:	080088ef 	.word	0x080088ef
 8008854:	080088ef 	.word	0x080088ef
 8008858:	080088ef 	.word	0x080088ef
 800885c:	080088ef 	.word	0x080088ef
 8008860:	080088ef 	.word	0x080088ef
 8008864:	080088ef 	.word	0x080088ef
 8008868:	080088ef 	.word	0x080088ef
 800886c:	080088ef 	.word	0x080088ef
 8008870:	080088ef 	.word	0x080088ef
 8008874:	080088ef 	.word	0x080088ef
 8008878:	080088ef 	.word	0x080088ef
 800887c:	080088ef 	.word	0x080088ef
 8008880:	080088e1 	.word	0x080088e1
 8008884:	2b40      	cmp	r3, #64	; 0x40
 8008886:	d02e      	beq.n	80088e6 <UART_SetConfig+0xa36>
 8008888:	e031      	b.n	80088ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800888a:	f7fc ffb5 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 800888e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008890:	e033      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008892:	f7fc ffc7 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8008896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008898:	e02f      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe f9f6 	bl	8006c90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a8:	e027      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088aa:	f107 0318 	add.w	r3, r7, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fb42 	bl	8006f38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b8:	e01f      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ba:	4b2d      	ldr	r3, [pc, #180]	; (8008970 <UART_SetConfig+0xac0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088c6:	4b2a      	ldr	r3, [pc, #168]	; (8008970 <UART_SetConfig+0xac0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	4a28      	ldr	r2, [pc, #160]	; (8008974 <UART_SetConfig+0xac4>)
 80088d2:	fa22 f303 	lsr.w	r3, r2, r3
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088d8:	e00f      	b.n	80088fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <UART_SetConfig+0xac4>)
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088de:	e00c      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <UART_SetConfig+0xac8>)
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e4:	e009      	b.n	80088fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ec:	e005      	b.n	80088fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088f8:	bf00      	nop
    }

    if (pclk != 0U)
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d021      	beq.n	8008944 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	4a1d      	ldr	r2, [pc, #116]	; (800897c <UART_SetConfig+0xacc>)
 8008906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800890a:	461a      	mov	r2, r3
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	441a      	add	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d909      	bls.n	800893e <UART_SetConfig+0xa8e>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008930:	d205      	bcs.n	800893e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	b29a      	uxth	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e002      	b.n	8008944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008960:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008964:	4618      	mov	r0, r3
 8008966:	3748      	adds	r7, #72	; 0x48
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	03d09000 	.word	0x03d09000
 8008978:	003d0900 	.word	0x003d0900
 800897c:	0800adc4 	.word	0x0800adc4

08008980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01a      	beq.n	8008a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a7e:	d10a      	bne.n	8008a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	605a      	str	r2, [r3, #4]
  }
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b098      	sub	sp, #96	; 0x60
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ad4:	f7fa f878 	bl	8002bc8 <HAL_GetTick>
 8008ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d12f      	bne.n	8008b48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af0:	2200      	movs	r2, #0
 8008af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f88e 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d022      	beq.n	8008b48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	647b      	str	r3, [r7, #68]	; 0x44
 8008b22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e063      	b.n	8008c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d149      	bne.n	8008bea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f857 	bl	8008c18 <UART_WaitOnFlagUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d03c      	beq.n	8008bea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e6      	bne.n	8008b70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc2:	61fa      	str	r2, [r7, #28]
 8008bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	69b9      	ldr	r1, [r7, #24]
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e012      	b.n	8008c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3758      	adds	r7, #88	; 0x58
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c28:	e049      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d045      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c32:	f7f9 ffc9 	bl	8002bc8 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d302      	bcc.n	8008c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e048      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d031      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d110      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f95b 	bl	8008f2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e029      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c98:	d111      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f941 	bl	8008f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e00f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d0a6      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b0a3      	sub	sp, #140	; 0x8c
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	88fa      	ldrh	r2, [r7, #6]
 8008d08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1a:	d10e      	bne.n	8008d3a <UART_Start_Receive_IT+0x52>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <UART_Start_Receive_IT+0x48>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d2e:	e02d      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	22ff      	movs	r2, #255	; 0xff
 8008d34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d38:	e028      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10d      	bne.n	8008d5e <UART_Start_Receive_IT+0x76>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <UART_Start_Receive_IT+0x6c>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	22ff      	movs	r2, #255	; 0xff
 8008d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d52:	e01b      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	227f      	movs	r2, #127	; 0x7f
 8008d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d5c:	e016      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d66:	d10d      	bne.n	8008d84 <UART_Start_Receive_IT+0x9c>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <UART_Start_Receive_IT+0x92>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	227f      	movs	r2, #127	; 0x7f
 8008d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d78:	e008      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	223f      	movs	r2, #63	; 0x3f
 8008d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d82:	e003      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2222      	movs	r2, #34	; 0x22
 8008d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dc0:	673a      	str	r2, [r7, #112]	; 0x70
 8008dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008dc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e3      	bne.n	8008d9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ddc:	d14f      	bne.n	8008e7e <UART_Start_Receive_IT+0x196>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d349      	bcc.n	8008e7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df2:	d107      	bne.n	8008e04 <UART_Start_Receive_IT+0x11c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a47      	ldr	r2, [pc, #284]	; (8008f1c <UART_Start_Receive_IT+0x234>)
 8008e00:	675a      	str	r2, [r3, #116]	; 0x74
 8008e02:	e002      	b.n	8008e0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a46      	ldr	r2, [pc, #280]	; (8008f20 <UART_Start_Receive_IT+0x238>)
 8008e08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01a      	beq.n	8008e48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e4      	bne.n	8008e12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3308      	adds	r3, #8
 8008e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e68:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e5      	bne.n	8008e48 <UART_Start_Receive_IT+0x160>
 8008e7c:	e046      	b.n	8008f0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e86:	d107      	bne.n	8008e98 <UART_Start_Receive_IT+0x1b0>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a24      	ldr	r2, [pc, #144]	; (8008f24 <UART_Start_Receive_IT+0x23c>)
 8008e94:	675a      	str	r2, [r3, #116]	; 0x74
 8008e96:	e002      	b.n	8008e9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a23      	ldr	r2, [pc, #140]	; (8008f28 <UART_Start_Receive_IT+0x240>)
 8008e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d019      	beq.n	8008eda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008eba:	677b      	str	r3, [r7, #116]	; 0x74
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_Start_Receive_IT+0x1be>
 8008ed8:	e018      	b.n	8008f0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f043 0320 	orr.w	r3, r3, #32
 8008eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e6      	bne.n	8008eda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	378c      	adds	r7, #140	; 0x8c
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	0800974d 	.word	0x0800974d
 8008f20:	080093ed 	.word	0x080093ed
 8008f24:	08009235 	.word	0x08009235
 8008f28:	0800907d 	.word	0x0800907d

08008f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b095      	sub	sp, #84	; 0x54
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f52:	643b      	str	r3, [r7, #64]	; 0x40
 8008f54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e6      	bne.n	8008f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	4b1e      	ldr	r3, [pc, #120]	; (8008ff4 <UART_EndRxTransfer+0xc8>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e5      	bne.n	8008f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d118      	bne.n	8008fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f023 0310 	bic.w	r3, r3, #16
 8008fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6979      	ldr	r1, [r7, #20]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008fe8:	bf00      	nop
 8008fea:	3754      	adds	r7, #84	; 0x54
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	effffffe 	.word	0xeffffffe

08008ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7fe ff34 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60bb      	str	r3, [r7, #8]
   return(result);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	613b      	str	r3, [r7, #16]
   return(result);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fe feff 	bl	8007e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009072:	bf00      	nop
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b09c      	sub	sp, #112	; 0x70
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800908a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009094:	2b22      	cmp	r3, #34	; 0x22
 8009096:	f040 80be 	bne.w	8009216 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80090a8:	b2d9      	uxtb	r1, r3
 80090aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b4:	400a      	ands	r2, r1
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f040 80a1 	bne.w	8009226 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009102:	65bb      	str	r3, [r7, #88]	; 0x58
 8009104:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e6      	bne.n	80090e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	f023 0301 	bic.w	r3, r3, #1
 800912c:	667b      	str	r3, [r7, #100]	; 0x64
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009136:	647a      	str	r2, [r7, #68]	; 0x44
 8009138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800913c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e5      	bne.n	8009116 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a33      	ldr	r2, [pc, #204]	; (8009230 <UART_RxISR_8BIT+0x1b4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d01f      	beq.n	80091a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d018      	beq.n	80091a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	623b      	str	r3, [r7, #32]
   return(result);
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800918a:	663b      	str	r3, [r7, #96]	; 0x60
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009194:	633b      	str	r3, [r7, #48]	; 0x30
 8009196:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800919a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e6      	bne.n	8009176 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d12e      	bne.n	800920e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0310 	bic.w	r3, r3, #16
 80091ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	69b9      	ldr	r1, [r7, #24]
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	e841 2300 	strex	r3, r2, [r1]
 80091e0:	617b      	str	r3, [r7, #20]
   return(result);
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e6      	bne.n	80091b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d103      	bne.n	80091fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2210      	movs	r2, #16
 80091fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fe fe46 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800920c:	e00b      	b.n	8009226 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7f7 fa50 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 8009214:	e007      	b.n	8009226 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0208 	orr.w	r2, r2, #8
 8009224:	619a      	str	r2, [r3, #24]
}
 8009226:	bf00      	nop
 8009228:	3770      	adds	r7, #112	; 0x70
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	58000c00 	.word	0x58000c00

08009234 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b09c      	sub	sp, #112	; 0x70
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009242:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924c:	2b22      	cmp	r3, #34	; 0x22
 800924e:	f040 80be 	bne.w	80093ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009260:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009262:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800926a:	4013      	ands	r3, r2
 800926c:	b29a      	uxth	r2, r3
 800926e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009270:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	1c9a      	adds	r2, r3, #2
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	f040 80a1 	bne.w	80093de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092b0:	667b      	str	r3, [r7, #100]	; 0x64
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ba:	657b      	str	r3, [r7, #84]	; 0x54
 80092bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	663b      	str	r3, [r7, #96]	; 0x60
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092ee:	643a      	str	r2, [r7, #64]	; 0x40
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a33      	ldr	r2, [pc, #204]	; (80093e8 <UART_RxISR_16BIT+0x1b4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d01f      	beq.n	8009360 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	61fb      	str	r3, [r7, #28]
   return(result);
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800934e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d12e      	bne.n	80093c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60bb      	str	r3, [r7, #8]
   return(result);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	65bb      	str	r3, [r7, #88]	; 0x58
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800938c:	61bb      	str	r3, [r7, #24]
 800938e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6979      	ldr	r1, [r7, #20]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	613b      	str	r3, [r7, #16]
   return(result);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e6      	bne.n	800936e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d103      	bne.n	80093b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2210      	movs	r2, #16
 80093b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fe fd6a 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093c4:	e00b      	b.n	80093de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7f7 f974 	bl	80006b4 <HAL_UART_RxCpltCallback>
}
 80093cc:	e007      	b.n	80093de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0208 	orr.w	r2, r2, #8
 80093dc:	619a      	str	r2, [r3, #24]
}
 80093de:	bf00      	nop
 80093e0:	3770      	adds	r7, #112	; 0x70
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	58000c00 	.word	0x58000c00

080093ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b0ac      	sub	sp, #176	; 0xb0
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009422:	2b22      	cmp	r3, #34	; 0x22
 8009424:	f040 8180 	bne.w	8009728 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800942e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009432:	e123      	b.n	800967c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800943e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009442:	b2d9      	uxtb	r1, r3
 8009444:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009448:	b2da      	uxtb	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	400a      	ands	r2, r1
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b01      	subs	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800947a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b00      	cmp	r3, #0
 8009484:	d053      	beq.n	800952e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d011      	beq.n	80094b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2201      	movs	r2, #1
 80094a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ac:	f043 0201 	orr.w	r2, r3, #1
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d011      	beq.n	80094e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00b      	beq.n	80094e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2202      	movs	r2, #2
 80094d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094dc:	f043 0204 	orr.w	r2, r3, #4
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d011      	beq.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80094f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2204      	movs	r2, #4
 8009504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	f043 0202 	orr.w	r2, r3, #2
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951c:	2b00      	cmp	r3, #0
 800951e:	d006      	beq.n	800952e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7fe fcaf 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	f040 80a0 	bne.w	800967c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800954a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800955e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009560:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009564:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800956c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e4      	bne.n	800953c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3308      	adds	r3, #8
 8009578:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009584:	4b6e      	ldr	r3, [pc, #440]	; (8009740 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009586:	4013      	ands	r3, r2
 8009588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009596:	66ba      	str	r2, [r7, #104]	; 0x68
 8009598:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800959c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e3      	bne.n	8009572 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a60      	ldr	r2, [pc, #384]	; (8009744 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d021      	beq.n	800960c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01a      	beq.n	800960c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095f8:	657b      	str	r3, [r7, #84]	; 0x54
 80095fa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e4      	bne.n	80095d6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d130      	bne.n	8009676 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	f023 0310 	bic.w	r3, r3, #16
 800962e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800963c:	643b      	str	r3, [r7, #64]	; 0x40
 800963e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e4      	bne.n	800961a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b10      	cmp	r3, #16
 800965c:	d103      	bne.n	8009666 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2210      	movs	r2, #16
 8009664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fc12 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
 8009674:	e002      	b.n	800967c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f7 f81c 	bl	80006b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800967c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f aed1 	bne.w	8009434 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009698:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800969c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d049      	beq.n	8009738 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d242      	bcs.n	8009738 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80096d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e3      	bne.n	80096b2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a16      	ldr	r2, [pc, #88]	; (8009748 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80096ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f043 0320 	orr.w	r3, r3, #32
 8009704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009712:	61bb      	str	r3, [r7, #24]
 8009714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	613b      	str	r3, [r7, #16]
   return(result);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e4      	bne.n	80096f0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009726:	e007      	b.n	8009738 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	619a      	str	r2, [r3, #24]
}
 8009738:	bf00      	nop
 800973a:	37b0      	adds	r7, #176	; 0xb0
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	effffffe 	.word	0xeffffffe
 8009744:	58000c00 	.word	0x58000c00
 8009748:	0800907d 	.word	0x0800907d

0800974c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b0ae      	sub	sp, #184	; 0xb8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800975a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	2b22      	cmp	r3, #34	; 0x22
 8009784:	f040 8184 	bne.w	8009a90 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800978e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009792:	e127      	b.n	80099e4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80097a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80097aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80097ae:	4013      	ands	r3, r2
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097bc:	1c9a      	adds	r2, r3, #2
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d053      	beq.n	8009892 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d011      	beq.n	800981a <UART_RxISR_16BIT_FIFOEN+0xce>
 80097f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2201      	movs	r2, #1
 8009808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009810:	f043 0201 	orr.w	r2, r3, #1
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800981a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d011      	beq.n	800984a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00b      	beq.n	800984a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2202      	movs	r2, #2
 8009838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009840:	f043 0204 	orr.w	r2, r3, #4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800984a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d011      	beq.n	800987a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2204      	movs	r2, #4
 8009868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009870:	f043 0202 	orr.w	r2, r3, #2
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7fe fafd 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009898:	b29b      	uxth	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 80a2 	bne.w	80099e4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098a8:	e853 3f00 	ldrex	r3, [r3]
 80098ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e2      	bne.n	80098a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ec:	4b6e      	ldr	r3, [pc, #440]	; (8009aa8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80098fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800990c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e3      	bne.n	80098da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a60      	ldr	r2, [pc, #384]	; (8009aac <UART_RxISR_16BIT_FIFOEN+0x360>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d021      	beq.n	8009974 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01a      	beq.n	8009974 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009946:	e853 3f00 	ldrex	r3, [r3]
 800994a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800994c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009960:	65bb      	str	r3, [r7, #88]	; 0x58
 8009962:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800996e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e4      	bne.n	800993e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d130      	bne.n	80099de <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	f023 0310 	bic.w	r3, r3, #16
 8009996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099a4:	647b      	str	r3, [r7, #68]	; 0x44
 80099a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e4      	bne.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d103      	bne.n	80099ce <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2210      	movs	r2, #16
 80099cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fe fa5e 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
 80099dc:	e002      	b.n	80099e4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7f6 fe68 	bl	80006b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80099ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f47f aecd 	bne.w	8009794 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a00:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a04:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d049      	beq.n	8009aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a12:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d242      	bcs.n	8009aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	623b      	str	r3, [r7, #32]
   return(result);
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e3      	bne.n	8009a1a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a16      	ldr	r2, [pc, #88]	; (8009ab0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009a56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	69b9      	ldr	r1, [r7, #24]
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	e841 2300 	strex	r3, r2, [r1]
 8009a86:	617b      	str	r3, [r7, #20]
   return(result);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e4      	bne.n	8009a58 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a8e:	e007      	b.n	8009aa0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0208 	orr.w	r2, r2, #8
 8009a9e:	619a      	str	r2, [r3, #24]
}
 8009aa0:	bf00      	nop
 8009aa2:	37b8      	adds	r7, #184	; 0xb8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	effffffe 	.word	0xeffffffe
 8009aac:	58000c00 	.word	0x58000c00
 8009ab0:	08009235 	.word	0x08009235

08009ab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b02:	2302      	movs	r3, #2
 8009b04:	e027      	b.n	8009b56 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2224      	movs	r2, #36	; 0x24
 8009b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0201 	bic.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d101      	bne.n	8009b7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b76:	2302      	movs	r3, #2
 8009b78:	e02d      	b.n	8009bd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2224      	movs	r2, #36	; 0x24
 8009b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0201 	bic.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f850 	bl	8009c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e02d      	b.n	8009c52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2224      	movs	r2, #36	; 0x24
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0201 	bic.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f812 	bl	8009c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d108      	bne.n	8009c7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c7c:	e031      	b.n	8009ce2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c7e:	2310      	movs	r3, #16
 8009c80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c82:	2310      	movs	r3, #16
 8009c84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	0e5b      	lsrs	r3, r3, #25
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	f003 0307 	and.w	r3, r3, #7
 8009c94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	0f5b      	lsrs	r3, r3, #29
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f003 0307 	and.w	r3, r3, #7
 8009ca4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	7b3a      	ldrb	r2, [r7, #12]
 8009caa:	4911      	ldr	r1, [pc, #68]	; (8009cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8009cac:	5c8a      	ldrb	r2, [r1, r2]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cb2:	7b3a      	ldrb	r2, [r7, #12]
 8009cb4:	490f      	ldr	r1, [pc, #60]	; (8009cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8009cb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	7b7a      	ldrb	r2, [r7, #13]
 8009cc8:	4909      	ldr	r1, [pc, #36]	; (8009cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8009cca:	5c8a      	ldrb	r2, [r1, r2]
 8009ccc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cd0:	7b7a      	ldrb	r2, [r7, #13]
 8009cd2:	4908      	ldr	r1, [pc, #32]	; (8009cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8009cd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ce2:	bf00      	nop
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	0800addc 	.word	0x0800addc
 8009cf4:	0800ade4 	.word	0x0800ade4

08009cf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	f107 001c 	add.w	r0, r7, #28
 8009d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d120      	bne.n	8009d52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <USB_CoreInit+0xd4>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d105      	bne.n	8009d46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 faac 	bl	800a2a4 <USB_CoreReset>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
 8009d50:	e01a      	b.n	8009d88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 faa0 	bl	800a2a4 <USB_CoreReset>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	639a      	str	r2, [r3, #56]	; 0x38
 8009d7a:	e005      	b.n	8009d88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d116      	bne.n	8009dbc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d9c:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <USB_CoreInit+0xd8>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f043 0206 	orr.w	r2, r3, #6
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f043 0220 	orr.w	r2, r3, #32
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dc8:	b004      	add	sp, #16
 8009dca:	4770      	bx	lr
 8009dcc:	ffbdffbf 	.word	0xffbdffbf
 8009dd0:	03ee0000 	.word	0x03ee0000

08009dd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 0201 	bic.w	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d115      	bne.n	8009e44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7f8 fedb 	bl	8002be0 <HAL_Delay>
      ms++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fa29 	bl	800a288 <USB_GetMode>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d01e      	beq.n	8009e7a <USB_SetCurrentMode+0x84>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b31      	cmp	r3, #49	; 0x31
 8009e40:	d9f0      	bls.n	8009e24 <USB_SetCurrentMode+0x2e>
 8009e42:	e01a      	b.n	8009e7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d115      	bne.n	8009e76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e56:	2001      	movs	r0, #1
 8009e58:	f7f8 fec2 	bl	8002be0 <HAL_Delay>
      ms++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fa10 	bl	800a288 <USB_GetMode>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <USB_SetCurrentMode+0x84>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b31      	cmp	r3, #49	; 0x31
 8009e72:	d9f0      	bls.n	8009e56 <USB_SetCurrentMode+0x60>
 8009e74:	e001      	b.n	8009e7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e005      	b.n	8009e86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b32      	cmp	r3, #50	; 0x32
 8009e7e:	d101      	bne.n	8009e84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e90:	b084      	sub	sp, #16
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b086      	sub	sp, #24
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	613b      	str	r3, [r7, #16]
 8009eae:	e009      	b.n	8009ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3340      	adds	r3, #64	; 0x40
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2b0e      	cmp	r3, #14
 8009ec8:	d9f2      	bls.n	8009eb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11c      	bne.n	8009f0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ede:	f043 0302 	orr.w	r3, r3, #2
 8009ee2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e005      	b.n	8009f16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f30:	461a      	mov	r2, r3
 8009f32:	680b      	ldr	r3, [r1, #0]
 8009f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d10c      	bne.n	8009f56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d104      	bne.n	8009f4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f42:	2100      	movs	r1, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f965 	bl	800a214 <USB_SetDevSpeed>
 8009f4a:	e008      	b.n	8009f5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f960 	bl	800a214 <USB_SetDevSpeed>
 8009f54:	e003      	b.n	8009f5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f56:	2103      	movs	r1, #3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f95b 	bl	800a214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f5e:	2110      	movs	r1, #16
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f8f3 	bl	800a14c <USB_FlushTxFifo>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f91f 	bl	800a1b4 <USB_FlushRxFifo>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	461a      	mov	r2, r3
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	461a      	mov	r2, r3
 8009f94:	2300      	movs	r3, #0
 8009f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	e043      	b.n	800a032 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fc0:	d118      	bne.n	8009ff4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	e013      	b.n	800a006 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fea:	461a      	mov	r2, r3
 8009fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e008      	b.n	800a006 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a000:	461a      	mov	r2, r3
 800a002:	2300      	movs	r3, #0
 800a004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a012:	461a      	mov	r2, r3
 800a014:	2300      	movs	r3, #0
 800a016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	461a      	mov	r2, r3
 800a026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a02a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3301      	adds	r3, #1
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	d3b7      	bcc.n	8009faa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	e043      	b.n	800a0c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a056:	d118      	bne.n	800a08a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e013      	b.n	800a09c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a080:	461a      	mov	r2, r3
 800a082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	e008      	b.n	800a09c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a096:	461a      	mov	r2, r3
 800a098:	2300      	movs	r3, #0
 800a09a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d3b7      	bcc.n	800a040 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	f043 0210 	orr.w	r2, r3, #16
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699a      	ldr	r2, [r3, #24]
 800a108:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <USB_DevInit+0x2b4>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	f043 0208 	orr.w	r2, r3, #8
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d105      	bne.n	800a134 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699a      	ldr	r2, [r3, #24]
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <USB_DevInit+0x2b8>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a140:	b004      	add	sp, #16
 800a142:	4770      	bx	lr
 800a144:	803c3800 	.word	0x803c3800
 800a148:	40000004 	.word	0x40000004

0800a14c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3301      	adds	r3, #1
 800a15e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4a13      	ldr	r2, [pc, #76]	; (800a1b0 <USB_FlushTxFifo+0x64>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d901      	bls.n	800a16c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e01b      	b.n	800a1a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	daf2      	bge.n	800a15a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	019b      	lsls	r3, r3, #6
 800a17c:	f043 0220 	orr.w	r2, r3, #32
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3301      	adds	r3, #1
 800a188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4a08      	ldr	r2, [pc, #32]	; (800a1b0 <USB_FlushTxFifo+0x64>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d901      	bls.n	800a196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e006      	b.n	800a1a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	d0f0      	beq.n	800a184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	00030d40 	.word	0x00030d40

0800a1b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4a11      	ldr	r2, [pc, #68]	; (800a210 <USB_FlushRxFifo+0x5c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d901      	bls.n	800a1d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e018      	b.n	800a204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	daf2      	bge.n	800a1c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4a08      	ldr	r2, [pc, #32]	; (800a210 <USB_FlushRxFifo+0x5c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d901      	bls.n	800a1f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e006      	b.n	800a204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	f003 0310 	and.w	r3, r3, #16
 800a1fe:	2b10      	cmp	r3, #16
 800a200:	d0f0      	beq.n	800a1e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	00030d40 	.word	0x00030d40

0800a214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a234:	4313      	orrs	r3, r2
 800a236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a246:	b480      	push	{r7}
 800a248:	b085      	sub	sp, #20
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a274:	f043 0302 	orr.w	r3, r3, #2
 800a278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	f003 0301 	and.w	r3, r3, #1
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4a13      	ldr	r2, [pc, #76]	; (800a308 <USB_CoreReset+0x64>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d901      	bls.n	800a2c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e01b      	b.n	800a2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	daf2      	bge.n	800a2b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	f043 0201 	orr.w	r2, r3, #1
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a09      	ldr	r2, [pc, #36]	; (800a308 <USB_CoreReset+0x64>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d901      	bls.n	800a2ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e006      	b.n	800a2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d0f0      	beq.n	800a2da <USB_CoreReset+0x36>

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	00030d40 	.word	0x00030d40

0800a30c <__errno>:
 800a30c:	4b01      	ldr	r3, [pc, #4]	; (800a314 <__errno+0x8>)
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	24000020 	.word	0x24000020

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	4d0d      	ldr	r5, [pc, #52]	; (800a350 <__libc_init_array+0x38>)
 800a31c:	4c0d      	ldr	r4, [pc, #52]	; (800a354 <__libc_init_array+0x3c>)
 800a31e:	1b64      	subs	r4, r4, r5
 800a320:	10a4      	asrs	r4, r4, #2
 800a322:	2600      	movs	r6, #0
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	4d0b      	ldr	r5, [pc, #44]	; (800a358 <__libc_init_array+0x40>)
 800a32a:	4c0c      	ldr	r4, [pc, #48]	; (800a35c <__libc_init_array+0x44>)
 800a32c:	f000 fc96 	bl	800ac5c <_init>
 800a330:	1b64      	subs	r4, r4, r5
 800a332:	10a4      	asrs	r4, r4, #2
 800a334:	2600      	movs	r6, #0
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0800ae28 	.word	0x0800ae28
 800a354:	0800ae28 	.word	0x0800ae28
 800a358:	0800ae28 	.word	0x0800ae28
 800a35c:	0800ae2c 	.word	0x0800ae2c

0800a360 <memset>:
 800a360:	4402      	add	r2, r0
 800a362:	4603      	mov	r3, r0
 800a364:	4293      	cmp	r3, r2
 800a366:	d100      	bne.n	800a36a <memset+0xa>
 800a368:	4770      	bx	lr
 800a36a:	f803 1b01 	strb.w	r1, [r3], #1
 800a36e:	e7f9      	b.n	800a364 <memset+0x4>

0800a370 <siprintf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	b500      	push	{lr}
 800a374:	b09c      	sub	sp, #112	; 0x70
 800a376:	ab1d      	add	r3, sp, #116	; 0x74
 800a378:	9002      	str	r0, [sp, #8]
 800a37a:	9006      	str	r0, [sp, #24]
 800a37c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a380:	4809      	ldr	r0, [pc, #36]	; (800a3a8 <siprintf+0x38>)
 800a382:	9107      	str	r1, [sp, #28]
 800a384:	9104      	str	r1, [sp, #16]
 800a386:	4909      	ldr	r1, [pc, #36]	; (800a3ac <siprintf+0x3c>)
 800a388:	f853 2b04 	ldr.w	r2, [r3], #4
 800a38c:	9105      	str	r1, [sp, #20]
 800a38e:	6800      	ldr	r0, [r0, #0]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	a902      	add	r1, sp, #8
 800a394:	f000 f870 	bl	800a478 <_svfiprintf_r>
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	b01c      	add	sp, #112	; 0x70
 800a3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a4:	b003      	add	sp, #12
 800a3a6:	4770      	bx	lr
 800a3a8:	24000020 	.word	0x24000020
 800a3ac:	ffff0208 	.word	0xffff0208

0800a3b0 <strcpy>:
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3b6:	f803 2b01 	strb.w	r2, [r3], #1
 800a3ba:	2a00      	cmp	r2, #0
 800a3bc:	d1f9      	bne.n	800a3b2 <strcpy+0x2>
 800a3be:	4770      	bx	lr

0800a3c0 <__ssputs_r>:
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	688e      	ldr	r6, [r1, #8]
 800a3c6:	429e      	cmp	r6, r3
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	461f      	mov	r7, r3
 800a3d0:	d838      	bhi.n	800a444 <__ssputs_r+0x84>
 800a3d2:	898a      	ldrh	r2, [r1, #12]
 800a3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3d8:	d032      	beq.n	800a440 <__ssputs_r+0x80>
 800a3da:	6825      	ldr	r5, [r4, #0]
 800a3dc:	6909      	ldr	r1, [r1, #16]
 800a3de:	eba5 0901 	sub.w	r9, r5, r1
 800a3e2:	6965      	ldr	r5, [r4, #20]
 800a3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	444b      	add	r3, r9
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	bf38      	it	cc
 800a3f6:	461d      	movcc	r5, r3
 800a3f8:	0553      	lsls	r3, r2, #21
 800a3fa:	d531      	bpl.n	800a460 <__ssputs_r+0xa0>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f000 fb63 	bl	800aac8 <_malloc_r>
 800a402:	4606      	mov	r6, r0
 800a404:	b950      	cbnz	r0, 800a41c <__ssputs_r+0x5c>
 800a406:	230c      	movs	r3, #12
 800a408:	f8ca 3000 	str.w	r3, [sl]
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	6921      	ldr	r1, [r4, #16]
 800a41e:	464a      	mov	r2, r9
 800a420:	f000 fabe 	bl	800a9a0 <memcpy>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	6126      	str	r6, [r4, #16]
 800a432:	6165      	str	r5, [r4, #20]
 800a434:	444e      	add	r6, r9
 800a436:	eba5 0509 	sub.w	r5, r5, r9
 800a43a:	6026      	str	r6, [r4, #0]
 800a43c:	60a5      	str	r5, [r4, #8]
 800a43e:	463e      	mov	r6, r7
 800a440:	42be      	cmp	r6, r7
 800a442:	d900      	bls.n	800a446 <__ssputs_r+0x86>
 800a444:	463e      	mov	r6, r7
 800a446:	6820      	ldr	r0, [r4, #0]
 800a448:	4632      	mov	r2, r6
 800a44a:	4641      	mov	r1, r8
 800a44c:	f000 fab6 	bl	800a9bc <memmove>
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	1b9b      	subs	r3, r3, r6
 800a454:	60a3      	str	r3, [r4, #8]
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	4433      	add	r3, r6
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7db      	b.n	800a418 <__ssputs_r+0x58>
 800a460:	462a      	mov	r2, r5
 800a462:	f000 fba5 	bl	800abb0 <_realloc_r>
 800a466:	4606      	mov	r6, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	d1e1      	bne.n	800a430 <__ssputs_r+0x70>
 800a46c:	6921      	ldr	r1, [r4, #16]
 800a46e:	4650      	mov	r0, sl
 800a470:	f000 fabe 	bl	800a9f0 <_free_r>
 800a474:	e7c7      	b.n	800a406 <__ssputs_r+0x46>
	...

0800a478 <_svfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4698      	mov	r8, r3
 800a47e:	898b      	ldrh	r3, [r1, #12]
 800a480:	061b      	lsls	r3, r3, #24
 800a482:	b09d      	sub	sp, #116	; 0x74
 800a484:	4607      	mov	r7, r0
 800a486:	460d      	mov	r5, r1
 800a488:	4614      	mov	r4, r2
 800a48a:	d50e      	bpl.n	800a4aa <_svfiprintf_r+0x32>
 800a48c:	690b      	ldr	r3, [r1, #16]
 800a48e:	b963      	cbnz	r3, 800a4aa <_svfiprintf_r+0x32>
 800a490:	2140      	movs	r1, #64	; 0x40
 800a492:	f000 fb19 	bl	800aac8 <_malloc_r>
 800a496:	6028      	str	r0, [r5, #0]
 800a498:	6128      	str	r0, [r5, #16]
 800a49a:	b920      	cbnz	r0, 800a4a6 <_svfiprintf_r+0x2e>
 800a49c:	230c      	movs	r3, #12
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e0d1      	b.n	800a64a <_svfiprintf_r+0x1d2>
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	616b      	str	r3, [r5, #20]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	2320      	movs	r3, #32
 800a4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b8:	2330      	movs	r3, #48	; 0x30
 800a4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a664 <_svfiprintf_r+0x1ec>
 800a4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4c2:	f04f 0901 	mov.w	r9, #1
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	469a      	mov	sl, r3
 800a4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ce:	b10a      	cbz	r2, 800a4d4 <_svfiprintf_r+0x5c>
 800a4d0:	2a25      	cmp	r2, #37	; 0x25
 800a4d2:	d1f9      	bne.n	800a4c8 <_svfiprintf_r+0x50>
 800a4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d8:	d00b      	beq.n	800a4f2 <_svfiprintf_r+0x7a>
 800a4da:	465b      	mov	r3, fp
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff ff6d 	bl	800a3c0 <__ssputs_r>
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f000 80aa 	beq.w	800a640 <_svfiprintf_r+0x1c8>
 800a4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ee:	445a      	add	r2, fp
 800a4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 80a2 	beq.w	800a640 <_svfiprintf_r+0x1c8>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a506:	f10a 0a01 	add.w	sl, sl, #1
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	9307      	str	r3, [sp, #28]
 800a50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a512:	931a      	str	r3, [sp, #104]	; 0x68
 800a514:	4654      	mov	r4, sl
 800a516:	2205      	movs	r2, #5
 800a518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51c:	4851      	ldr	r0, [pc, #324]	; (800a664 <_svfiprintf_r+0x1ec>)
 800a51e:	f7f5 fef7 	bl	8000310 <memchr>
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	b9d8      	cbnz	r0, 800a55e <_svfiprintf_r+0xe6>
 800a526:	06d0      	lsls	r0, r2, #27
 800a528:	bf44      	itt	mi
 800a52a:	2320      	movmi	r3, #32
 800a52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a530:	0711      	lsls	r1, r2, #28
 800a532:	bf44      	itt	mi
 800a534:	232b      	movmi	r3, #43	; 0x2b
 800a536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a53a:	f89a 3000 	ldrb.w	r3, [sl]
 800a53e:	2b2a      	cmp	r3, #42	; 0x2a
 800a540:	d015      	beq.n	800a56e <_svfiprintf_r+0xf6>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	4654      	mov	r4, sl
 800a546:	2000      	movs	r0, #0
 800a548:	f04f 0c0a 	mov.w	ip, #10
 800a54c:	4621      	mov	r1, r4
 800a54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a552:	3b30      	subs	r3, #48	; 0x30
 800a554:	2b09      	cmp	r3, #9
 800a556:	d94e      	bls.n	800a5f6 <_svfiprintf_r+0x17e>
 800a558:	b1b0      	cbz	r0, 800a588 <_svfiprintf_r+0x110>
 800a55a:	9207      	str	r2, [sp, #28]
 800a55c:	e014      	b.n	800a588 <_svfiprintf_r+0x110>
 800a55e:	eba0 0308 	sub.w	r3, r0, r8
 800a562:	fa09 f303 	lsl.w	r3, r9, r3
 800a566:	4313      	orrs	r3, r2
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	46a2      	mov	sl, r4
 800a56c:	e7d2      	b.n	800a514 <_svfiprintf_r+0x9c>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	1d19      	adds	r1, r3, #4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	9103      	str	r1, [sp, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfbb      	ittet	lt
 800a57a:	425b      	neglt	r3, r3
 800a57c:	f042 0202 	orrlt.w	r2, r2, #2
 800a580:	9307      	strge	r3, [sp, #28]
 800a582:	9307      	strlt	r3, [sp, #28]
 800a584:	bfb8      	it	lt
 800a586:	9204      	strlt	r2, [sp, #16]
 800a588:	7823      	ldrb	r3, [r4, #0]
 800a58a:	2b2e      	cmp	r3, #46	; 0x2e
 800a58c:	d10c      	bne.n	800a5a8 <_svfiprintf_r+0x130>
 800a58e:	7863      	ldrb	r3, [r4, #1]
 800a590:	2b2a      	cmp	r3, #42	; 0x2a
 800a592:	d135      	bne.n	800a600 <_svfiprintf_r+0x188>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1d1a      	adds	r2, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9203      	str	r2, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfb8      	it	lt
 800a5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a674 <_svfiprintf_r+0x1fc>
 800a5ac:	7821      	ldrb	r1, [r4, #0]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	f7f5 fead 	bl	8000310 <memchr>
 800a5b6:	b140      	cbz	r0, 800a5ca <_svfiprintf_r+0x152>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	eba0 000a 	sub.w	r0, r0, sl
 800a5be:	fa03 f000 	lsl.w	r0, r3, r0
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	4303      	orrs	r3, r0
 800a5c6:	3401      	adds	r4, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ce:	4826      	ldr	r0, [pc, #152]	; (800a668 <_svfiprintf_r+0x1f0>)
 800a5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5d4:	2206      	movs	r2, #6
 800a5d6:	f7f5 fe9b 	bl	8000310 <memchr>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d038      	beq.n	800a650 <_svfiprintf_r+0x1d8>
 800a5de:	4b23      	ldr	r3, [pc, #140]	; (800a66c <_svfiprintf_r+0x1f4>)
 800a5e0:	bb1b      	cbnz	r3, 800a62a <_svfiprintf_r+0x1b2>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	3307      	adds	r3, #7
 800a5e6:	f023 0307 	bic.w	r3, r3, #7
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f0:	4433      	add	r3, r6
 800a5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f4:	e767      	b.n	800a4c6 <_svfiprintf_r+0x4e>
 800a5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	e7a5      	b.n	800a54c <_svfiprintf_r+0xd4>
 800a600:	2300      	movs	r3, #0
 800a602:	3401      	adds	r4, #1
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	4619      	mov	r1, r3
 800a608:	f04f 0c0a 	mov.w	ip, #10
 800a60c:	4620      	mov	r0, r4
 800a60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a612:	3a30      	subs	r2, #48	; 0x30
 800a614:	2a09      	cmp	r2, #9
 800a616:	d903      	bls.n	800a620 <_svfiprintf_r+0x1a8>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0c5      	beq.n	800a5a8 <_svfiprintf_r+0x130>
 800a61c:	9105      	str	r1, [sp, #20]
 800a61e:	e7c3      	b.n	800a5a8 <_svfiprintf_r+0x130>
 800a620:	fb0c 2101 	mla	r1, ip, r1, r2
 800a624:	4604      	mov	r4, r0
 800a626:	2301      	movs	r3, #1
 800a628:	e7f0      	b.n	800a60c <_svfiprintf_r+0x194>
 800a62a:	ab03      	add	r3, sp, #12
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	462a      	mov	r2, r5
 800a630:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <_svfiprintf_r+0x1f8>)
 800a632:	a904      	add	r1, sp, #16
 800a634:	4638      	mov	r0, r7
 800a636:	f3af 8000 	nop.w
 800a63a:	1c42      	adds	r2, r0, #1
 800a63c:	4606      	mov	r6, r0
 800a63e:	d1d6      	bne.n	800a5ee <_svfiprintf_r+0x176>
 800a640:	89ab      	ldrh	r3, [r5, #12]
 800a642:	065b      	lsls	r3, r3, #25
 800a644:	f53f af2c 	bmi.w	800a4a0 <_svfiprintf_r+0x28>
 800a648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64a:	b01d      	add	sp, #116	; 0x74
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4b06      	ldr	r3, [pc, #24]	; (800a670 <_svfiprintf_r+0x1f8>)
 800a658:	a904      	add	r1, sp, #16
 800a65a:	4638      	mov	r0, r7
 800a65c:	f000 f87a 	bl	800a754 <_printf_i>
 800a660:	e7eb      	b.n	800a63a <_svfiprintf_r+0x1c2>
 800a662:	bf00      	nop
 800a664:	0800adec 	.word	0x0800adec
 800a668:	0800adf6 	.word	0x0800adf6
 800a66c:	00000000 	.word	0x00000000
 800a670:	0800a3c1 	.word	0x0800a3c1
 800a674:	0800adf2 	.word	0x0800adf2

0800a678 <_printf_common>:
 800a678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	4616      	mov	r6, r2
 800a67e:	4699      	mov	r9, r3
 800a680:	688a      	ldr	r2, [r1, #8]
 800a682:	690b      	ldr	r3, [r1, #16]
 800a684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a688:	4293      	cmp	r3, r2
 800a68a:	bfb8      	it	lt
 800a68c:	4613      	movlt	r3, r2
 800a68e:	6033      	str	r3, [r6, #0]
 800a690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a694:	4607      	mov	r7, r0
 800a696:	460c      	mov	r4, r1
 800a698:	b10a      	cbz	r2, 800a69e <_printf_common+0x26>
 800a69a:	3301      	adds	r3, #1
 800a69c:	6033      	str	r3, [r6, #0]
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	0699      	lsls	r1, r3, #26
 800a6a2:	bf42      	ittt	mi
 800a6a4:	6833      	ldrmi	r3, [r6, #0]
 800a6a6:	3302      	addmi	r3, #2
 800a6a8:	6033      	strmi	r3, [r6, #0]
 800a6aa:	6825      	ldr	r5, [r4, #0]
 800a6ac:	f015 0506 	ands.w	r5, r5, #6
 800a6b0:	d106      	bne.n	800a6c0 <_printf_common+0x48>
 800a6b2:	f104 0a19 	add.w	sl, r4, #25
 800a6b6:	68e3      	ldr	r3, [r4, #12]
 800a6b8:	6832      	ldr	r2, [r6, #0]
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	42ab      	cmp	r3, r5
 800a6be:	dc26      	bgt.n	800a70e <_printf_common+0x96>
 800a6c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6c4:	1e13      	subs	r3, r2, #0
 800a6c6:	6822      	ldr	r2, [r4, #0]
 800a6c8:	bf18      	it	ne
 800a6ca:	2301      	movne	r3, #1
 800a6cc:	0692      	lsls	r2, r2, #26
 800a6ce:	d42b      	bmi.n	800a728 <_printf_common+0xb0>
 800a6d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	47c0      	blx	r8
 800a6da:	3001      	adds	r0, #1
 800a6dc:	d01e      	beq.n	800a71c <_printf_common+0xa4>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	68e5      	ldr	r5, [r4, #12]
 800a6e2:	6832      	ldr	r2, [r6, #0]
 800a6e4:	f003 0306 	and.w	r3, r3, #6
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	bf08      	it	eq
 800a6ec:	1aad      	subeq	r5, r5, r2
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	6922      	ldr	r2, [r4, #16]
 800a6f2:	bf0c      	ite	eq
 800a6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6f8:	2500      	movne	r5, #0
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	bfc4      	itt	gt
 800a6fe:	1a9b      	subgt	r3, r3, r2
 800a700:	18ed      	addgt	r5, r5, r3
 800a702:	2600      	movs	r6, #0
 800a704:	341a      	adds	r4, #26
 800a706:	42b5      	cmp	r5, r6
 800a708:	d11a      	bne.n	800a740 <_printf_common+0xc8>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e008      	b.n	800a720 <_printf_common+0xa8>
 800a70e:	2301      	movs	r3, #1
 800a710:	4652      	mov	r2, sl
 800a712:	4649      	mov	r1, r9
 800a714:	4638      	mov	r0, r7
 800a716:	47c0      	blx	r8
 800a718:	3001      	adds	r0, #1
 800a71a:	d103      	bne.n	800a724 <_printf_common+0xac>
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a724:	3501      	adds	r5, #1
 800a726:	e7c6      	b.n	800a6b6 <_printf_common+0x3e>
 800a728:	18e1      	adds	r1, r4, r3
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	2030      	movs	r0, #48	; 0x30
 800a72e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a732:	4422      	add	r2, r4
 800a734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a73c:	3302      	adds	r3, #2
 800a73e:	e7c7      	b.n	800a6d0 <_printf_common+0x58>
 800a740:	2301      	movs	r3, #1
 800a742:	4622      	mov	r2, r4
 800a744:	4649      	mov	r1, r9
 800a746:	4638      	mov	r0, r7
 800a748:	47c0      	blx	r8
 800a74a:	3001      	adds	r0, #1
 800a74c:	d0e6      	beq.n	800a71c <_printf_common+0xa4>
 800a74e:	3601      	adds	r6, #1
 800a750:	e7d9      	b.n	800a706 <_printf_common+0x8e>
	...

0800a754 <_printf_i>:
 800a754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a758:	7e0f      	ldrb	r7, [r1, #24]
 800a75a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a75c:	2f78      	cmp	r7, #120	; 0x78
 800a75e:	4691      	mov	r9, r2
 800a760:	4680      	mov	r8, r0
 800a762:	460c      	mov	r4, r1
 800a764:	469a      	mov	sl, r3
 800a766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a76a:	d807      	bhi.n	800a77c <_printf_i+0x28>
 800a76c:	2f62      	cmp	r7, #98	; 0x62
 800a76e:	d80a      	bhi.n	800a786 <_printf_i+0x32>
 800a770:	2f00      	cmp	r7, #0
 800a772:	f000 80d8 	beq.w	800a926 <_printf_i+0x1d2>
 800a776:	2f58      	cmp	r7, #88	; 0x58
 800a778:	f000 80a3 	beq.w	800a8c2 <_printf_i+0x16e>
 800a77c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a784:	e03a      	b.n	800a7fc <_printf_i+0xa8>
 800a786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a78a:	2b15      	cmp	r3, #21
 800a78c:	d8f6      	bhi.n	800a77c <_printf_i+0x28>
 800a78e:	a101      	add	r1, pc, #4	; (adr r1, 800a794 <_printf_i+0x40>)
 800a790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a794:	0800a7ed 	.word	0x0800a7ed
 800a798:	0800a801 	.word	0x0800a801
 800a79c:	0800a77d 	.word	0x0800a77d
 800a7a0:	0800a77d 	.word	0x0800a77d
 800a7a4:	0800a77d 	.word	0x0800a77d
 800a7a8:	0800a77d 	.word	0x0800a77d
 800a7ac:	0800a801 	.word	0x0800a801
 800a7b0:	0800a77d 	.word	0x0800a77d
 800a7b4:	0800a77d 	.word	0x0800a77d
 800a7b8:	0800a77d 	.word	0x0800a77d
 800a7bc:	0800a77d 	.word	0x0800a77d
 800a7c0:	0800a90d 	.word	0x0800a90d
 800a7c4:	0800a831 	.word	0x0800a831
 800a7c8:	0800a8ef 	.word	0x0800a8ef
 800a7cc:	0800a77d 	.word	0x0800a77d
 800a7d0:	0800a77d 	.word	0x0800a77d
 800a7d4:	0800a92f 	.word	0x0800a92f
 800a7d8:	0800a77d 	.word	0x0800a77d
 800a7dc:	0800a831 	.word	0x0800a831
 800a7e0:	0800a77d 	.word	0x0800a77d
 800a7e4:	0800a77d 	.word	0x0800a77d
 800a7e8:	0800a8f7 	.word	0x0800a8f7
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	602a      	str	r2, [r5, #0]
 800a7f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0a3      	b.n	800a948 <_printf_i+0x1f4>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	6829      	ldr	r1, [r5, #0]
 800a804:	0606      	lsls	r6, r0, #24
 800a806:	f101 0304 	add.w	r3, r1, #4
 800a80a:	d50a      	bpl.n	800a822 <_printf_i+0xce>
 800a80c:	680e      	ldr	r6, [r1, #0]
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	2e00      	cmp	r6, #0
 800a812:	da03      	bge.n	800a81c <_printf_i+0xc8>
 800a814:	232d      	movs	r3, #45	; 0x2d
 800a816:	4276      	negs	r6, r6
 800a818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a81c:	485e      	ldr	r0, [pc, #376]	; (800a998 <_printf_i+0x244>)
 800a81e:	230a      	movs	r3, #10
 800a820:	e019      	b.n	800a856 <_printf_i+0x102>
 800a822:	680e      	ldr	r6, [r1, #0]
 800a824:	602b      	str	r3, [r5, #0]
 800a826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a82a:	bf18      	it	ne
 800a82c:	b236      	sxthne	r6, r6
 800a82e:	e7ef      	b.n	800a810 <_printf_i+0xbc>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	6820      	ldr	r0, [r4, #0]
 800a834:	1d19      	adds	r1, r3, #4
 800a836:	6029      	str	r1, [r5, #0]
 800a838:	0601      	lsls	r1, r0, #24
 800a83a:	d501      	bpl.n	800a840 <_printf_i+0xec>
 800a83c:	681e      	ldr	r6, [r3, #0]
 800a83e:	e002      	b.n	800a846 <_printf_i+0xf2>
 800a840:	0646      	lsls	r6, r0, #25
 800a842:	d5fb      	bpl.n	800a83c <_printf_i+0xe8>
 800a844:	881e      	ldrh	r6, [r3, #0]
 800a846:	4854      	ldr	r0, [pc, #336]	; (800a998 <_printf_i+0x244>)
 800a848:	2f6f      	cmp	r7, #111	; 0x6f
 800a84a:	bf0c      	ite	eq
 800a84c:	2308      	moveq	r3, #8
 800a84e:	230a      	movne	r3, #10
 800a850:	2100      	movs	r1, #0
 800a852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a856:	6865      	ldr	r5, [r4, #4]
 800a858:	60a5      	str	r5, [r4, #8]
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	bfa2      	ittt	ge
 800a85e:	6821      	ldrge	r1, [r4, #0]
 800a860:	f021 0104 	bicge.w	r1, r1, #4
 800a864:	6021      	strge	r1, [r4, #0]
 800a866:	b90e      	cbnz	r6, 800a86c <_printf_i+0x118>
 800a868:	2d00      	cmp	r5, #0
 800a86a:	d04d      	beq.n	800a908 <_printf_i+0x1b4>
 800a86c:	4615      	mov	r5, r2
 800a86e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a872:	fb03 6711 	mls	r7, r3, r1, r6
 800a876:	5dc7      	ldrb	r7, [r0, r7]
 800a878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a87c:	4637      	mov	r7, r6
 800a87e:	42bb      	cmp	r3, r7
 800a880:	460e      	mov	r6, r1
 800a882:	d9f4      	bls.n	800a86e <_printf_i+0x11a>
 800a884:	2b08      	cmp	r3, #8
 800a886:	d10b      	bne.n	800a8a0 <_printf_i+0x14c>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	07de      	lsls	r6, r3, #31
 800a88c:	d508      	bpl.n	800a8a0 <_printf_i+0x14c>
 800a88e:	6923      	ldr	r3, [r4, #16]
 800a890:	6861      	ldr	r1, [r4, #4]
 800a892:	4299      	cmp	r1, r3
 800a894:	bfde      	ittt	le
 800a896:	2330      	movle	r3, #48	; 0x30
 800a898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a89c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8a0:	1b52      	subs	r2, r2, r5
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	f8cd a000 	str.w	sl, [sp]
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	aa03      	add	r2, sp, #12
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	f7ff fee2 	bl	800a678 <_printf_common>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d14c      	bne.n	800a952 <_printf_i+0x1fe>
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	b004      	add	sp, #16
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	4835      	ldr	r0, [pc, #212]	; (800a998 <_printf_i+0x244>)
 800a8c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8c8:	6829      	ldr	r1, [r5, #0]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8d0:	6029      	str	r1, [r5, #0]
 800a8d2:	061d      	lsls	r5, r3, #24
 800a8d4:	d514      	bpl.n	800a900 <_printf_i+0x1ac>
 800a8d6:	07df      	lsls	r7, r3, #31
 800a8d8:	bf44      	itt	mi
 800a8da:	f043 0320 	orrmi.w	r3, r3, #32
 800a8de:	6023      	strmi	r3, [r4, #0]
 800a8e0:	b91e      	cbnz	r6, 800a8ea <_printf_i+0x196>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	f023 0320 	bic.w	r3, r3, #32
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	2310      	movs	r3, #16
 800a8ec:	e7b0      	b.n	800a850 <_printf_i+0xfc>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	f043 0320 	orr.w	r3, r3, #32
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	2378      	movs	r3, #120	; 0x78
 800a8f8:	4828      	ldr	r0, [pc, #160]	; (800a99c <_printf_i+0x248>)
 800a8fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8fe:	e7e3      	b.n	800a8c8 <_printf_i+0x174>
 800a900:	0659      	lsls	r1, r3, #25
 800a902:	bf48      	it	mi
 800a904:	b2b6      	uxthmi	r6, r6
 800a906:	e7e6      	b.n	800a8d6 <_printf_i+0x182>
 800a908:	4615      	mov	r5, r2
 800a90a:	e7bb      	b.n	800a884 <_printf_i+0x130>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	6826      	ldr	r6, [r4, #0]
 800a910:	6961      	ldr	r1, [r4, #20]
 800a912:	1d18      	adds	r0, r3, #4
 800a914:	6028      	str	r0, [r5, #0]
 800a916:	0635      	lsls	r5, r6, #24
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	d501      	bpl.n	800a920 <_printf_i+0x1cc>
 800a91c:	6019      	str	r1, [r3, #0]
 800a91e:	e002      	b.n	800a926 <_printf_i+0x1d2>
 800a920:	0670      	lsls	r0, r6, #25
 800a922:	d5fb      	bpl.n	800a91c <_printf_i+0x1c8>
 800a924:	8019      	strh	r1, [r3, #0]
 800a926:	2300      	movs	r3, #0
 800a928:	6123      	str	r3, [r4, #16]
 800a92a:	4615      	mov	r5, r2
 800a92c:	e7ba      	b.n	800a8a4 <_printf_i+0x150>
 800a92e:	682b      	ldr	r3, [r5, #0]
 800a930:	1d1a      	adds	r2, r3, #4
 800a932:	602a      	str	r2, [r5, #0]
 800a934:	681d      	ldr	r5, [r3, #0]
 800a936:	6862      	ldr	r2, [r4, #4]
 800a938:	2100      	movs	r1, #0
 800a93a:	4628      	mov	r0, r5
 800a93c:	f7f5 fce8 	bl	8000310 <memchr>
 800a940:	b108      	cbz	r0, 800a946 <_printf_i+0x1f2>
 800a942:	1b40      	subs	r0, r0, r5
 800a944:	6060      	str	r0, [r4, #4]
 800a946:	6863      	ldr	r3, [r4, #4]
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	2300      	movs	r3, #0
 800a94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a950:	e7a8      	b.n	800a8a4 <_printf_i+0x150>
 800a952:	6923      	ldr	r3, [r4, #16]
 800a954:	462a      	mov	r2, r5
 800a956:	4649      	mov	r1, r9
 800a958:	4640      	mov	r0, r8
 800a95a:	47d0      	blx	sl
 800a95c:	3001      	adds	r0, #1
 800a95e:	d0ab      	beq.n	800a8b8 <_printf_i+0x164>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	079b      	lsls	r3, r3, #30
 800a964:	d413      	bmi.n	800a98e <_printf_i+0x23a>
 800a966:	68e0      	ldr	r0, [r4, #12]
 800a968:	9b03      	ldr	r3, [sp, #12]
 800a96a:	4298      	cmp	r0, r3
 800a96c:	bfb8      	it	lt
 800a96e:	4618      	movlt	r0, r3
 800a970:	e7a4      	b.n	800a8bc <_printf_i+0x168>
 800a972:	2301      	movs	r3, #1
 800a974:	4632      	mov	r2, r6
 800a976:	4649      	mov	r1, r9
 800a978:	4640      	mov	r0, r8
 800a97a:	47d0      	blx	sl
 800a97c:	3001      	adds	r0, #1
 800a97e:	d09b      	beq.n	800a8b8 <_printf_i+0x164>
 800a980:	3501      	adds	r5, #1
 800a982:	68e3      	ldr	r3, [r4, #12]
 800a984:	9903      	ldr	r1, [sp, #12]
 800a986:	1a5b      	subs	r3, r3, r1
 800a988:	42ab      	cmp	r3, r5
 800a98a:	dcf2      	bgt.n	800a972 <_printf_i+0x21e>
 800a98c:	e7eb      	b.n	800a966 <_printf_i+0x212>
 800a98e:	2500      	movs	r5, #0
 800a990:	f104 0619 	add.w	r6, r4, #25
 800a994:	e7f5      	b.n	800a982 <_printf_i+0x22e>
 800a996:	bf00      	nop
 800a998:	0800adfd 	.word	0x0800adfd
 800a99c:	0800ae0e 	.word	0x0800ae0e

0800a9a0 <memcpy>:
 800a9a0:	440a      	add	r2, r1
 800a9a2:	4291      	cmp	r1, r2
 800a9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a8:	d100      	bne.n	800a9ac <memcpy+0xc>
 800a9aa:	4770      	bx	lr
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	d1f9      	bne.n	800a9ae <memcpy+0xe>
 800a9ba:	bd10      	pop	{r4, pc}

0800a9bc <memmove>:
 800a9bc:	4288      	cmp	r0, r1
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	eb01 0402 	add.w	r4, r1, r2
 800a9c4:	d902      	bls.n	800a9cc <memmove+0x10>
 800a9c6:	4284      	cmp	r4, r0
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	d807      	bhi.n	800a9dc <memmove+0x20>
 800a9cc:	1e43      	subs	r3, r0, #1
 800a9ce:	42a1      	cmp	r1, r4
 800a9d0:	d008      	beq.n	800a9e4 <memmove+0x28>
 800a9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9da:	e7f8      	b.n	800a9ce <memmove+0x12>
 800a9dc:	4402      	add	r2, r0
 800a9de:	4601      	mov	r1, r0
 800a9e0:	428a      	cmp	r2, r1
 800a9e2:	d100      	bne.n	800a9e6 <memmove+0x2a>
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ee:	e7f7      	b.n	800a9e0 <memmove+0x24>

0800a9f0 <_free_r>:
 800a9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	d044      	beq.n	800aa80 <_free_r+0x90>
 800a9f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9fa:	9001      	str	r0, [sp, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f1a1 0404 	sub.w	r4, r1, #4
 800aa02:	bfb8      	it	lt
 800aa04:	18e4      	addlt	r4, r4, r3
 800aa06:	f000 f913 	bl	800ac30 <__malloc_lock>
 800aa0a:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <_free_r+0x94>)
 800aa0c:	9801      	ldr	r0, [sp, #4]
 800aa0e:	6813      	ldr	r3, [r2, #0]
 800aa10:	b933      	cbnz	r3, 800aa20 <_free_r+0x30>
 800aa12:	6063      	str	r3, [r4, #4]
 800aa14:	6014      	str	r4, [r2, #0]
 800aa16:	b003      	add	sp, #12
 800aa18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa1c:	f000 b90e 	b.w	800ac3c <__malloc_unlock>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d908      	bls.n	800aa36 <_free_r+0x46>
 800aa24:	6825      	ldr	r5, [r4, #0]
 800aa26:	1961      	adds	r1, r4, r5
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	bf01      	itttt	eq
 800aa2c:	6819      	ldreq	r1, [r3, #0]
 800aa2e:	685b      	ldreq	r3, [r3, #4]
 800aa30:	1949      	addeq	r1, r1, r5
 800aa32:	6021      	streq	r1, [r4, #0]
 800aa34:	e7ed      	b.n	800aa12 <_free_r+0x22>
 800aa36:	461a      	mov	r2, r3
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	b10b      	cbz	r3, 800aa40 <_free_r+0x50>
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d9fa      	bls.n	800aa36 <_free_r+0x46>
 800aa40:	6811      	ldr	r1, [r2, #0]
 800aa42:	1855      	adds	r5, r2, r1
 800aa44:	42a5      	cmp	r5, r4
 800aa46:	d10b      	bne.n	800aa60 <_free_r+0x70>
 800aa48:	6824      	ldr	r4, [r4, #0]
 800aa4a:	4421      	add	r1, r4
 800aa4c:	1854      	adds	r4, r2, r1
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	6011      	str	r1, [r2, #0]
 800aa52:	d1e0      	bne.n	800aa16 <_free_r+0x26>
 800aa54:	681c      	ldr	r4, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	6053      	str	r3, [r2, #4]
 800aa5a:	4421      	add	r1, r4
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	e7da      	b.n	800aa16 <_free_r+0x26>
 800aa60:	d902      	bls.n	800aa68 <_free_r+0x78>
 800aa62:	230c      	movs	r3, #12
 800aa64:	6003      	str	r3, [r0, #0]
 800aa66:	e7d6      	b.n	800aa16 <_free_r+0x26>
 800aa68:	6825      	ldr	r5, [r4, #0]
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	bf04      	itt	eq
 800aa70:	6819      	ldreq	r1, [r3, #0]
 800aa72:	685b      	ldreq	r3, [r3, #4]
 800aa74:	6063      	str	r3, [r4, #4]
 800aa76:	bf04      	itt	eq
 800aa78:	1949      	addeq	r1, r1, r5
 800aa7a:	6021      	streq	r1, [r4, #0]
 800aa7c:	6054      	str	r4, [r2, #4]
 800aa7e:	e7ca      	b.n	800aa16 <_free_r+0x26>
 800aa80:	b003      	add	sp, #12
 800aa82:	bd30      	pop	{r4, r5, pc}
 800aa84:	2400156c 	.word	0x2400156c

0800aa88 <sbrk_aligned>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4e0e      	ldr	r6, [pc, #56]	; (800aac4 <sbrk_aligned+0x3c>)
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	6831      	ldr	r1, [r6, #0]
 800aa90:	4605      	mov	r5, r0
 800aa92:	b911      	cbnz	r1, 800aa9a <sbrk_aligned+0x12>
 800aa94:	f000 f8bc 	bl	800ac10 <_sbrk_r>
 800aa98:	6030      	str	r0, [r6, #0]
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f000 f8b7 	bl	800ac10 <_sbrk_r>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d00a      	beq.n	800aabc <sbrk_aligned+0x34>
 800aaa6:	1cc4      	adds	r4, r0, #3
 800aaa8:	f024 0403 	bic.w	r4, r4, #3
 800aaac:	42a0      	cmp	r0, r4
 800aaae:	d007      	beq.n	800aac0 <sbrk_aligned+0x38>
 800aab0:	1a21      	subs	r1, r4, r0
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 f8ac 	bl	800ac10 <_sbrk_r>
 800aab8:	3001      	adds	r0, #1
 800aaba:	d101      	bne.n	800aac0 <sbrk_aligned+0x38>
 800aabc:	f04f 34ff 	mov.w	r4, #4294967295
 800aac0:	4620      	mov	r0, r4
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	24001570 	.word	0x24001570

0800aac8 <_malloc_r>:
 800aac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aacc:	1ccd      	adds	r5, r1, #3
 800aace:	f025 0503 	bic.w	r5, r5, #3
 800aad2:	3508      	adds	r5, #8
 800aad4:	2d0c      	cmp	r5, #12
 800aad6:	bf38      	it	cc
 800aad8:	250c      	movcc	r5, #12
 800aada:	2d00      	cmp	r5, #0
 800aadc:	4607      	mov	r7, r0
 800aade:	db01      	blt.n	800aae4 <_malloc_r+0x1c>
 800aae0:	42a9      	cmp	r1, r5
 800aae2:	d905      	bls.n	800aaf0 <_malloc_r+0x28>
 800aae4:	230c      	movs	r3, #12
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	2600      	movs	r6, #0
 800aaea:	4630      	mov	r0, r6
 800aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf0:	4e2e      	ldr	r6, [pc, #184]	; (800abac <_malloc_r+0xe4>)
 800aaf2:	f000 f89d 	bl	800ac30 <__malloc_lock>
 800aaf6:	6833      	ldr	r3, [r6, #0]
 800aaf8:	461c      	mov	r4, r3
 800aafa:	bb34      	cbnz	r4, 800ab4a <_malloc_r+0x82>
 800aafc:	4629      	mov	r1, r5
 800aafe:	4638      	mov	r0, r7
 800ab00:	f7ff ffc2 	bl	800aa88 <sbrk_aligned>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	4604      	mov	r4, r0
 800ab08:	d14d      	bne.n	800aba6 <_malloc_r+0xde>
 800ab0a:	6834      	ldr	r4, [r6, #0]
 800ab0c:	4626      	mov	r6, r4
 800ab0e:	2e00      	cmp	r6, #0
 800ab10:	d140      	bne.n	800ab94 <_malloc_r+0xcc>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	4631      	mov	r1, r6
 800ab16:	4638      	mov	r0, r7
 800ab18:	eb04 0803 	add.w	r8, r4, r3
 800ab1c:	f000 f878 	bl	800ac10 <_sbrk_r>
 800ab20:	4580      	cmp	r8, r0
 800ab22:	d13a      	bne.n	800ab9a <_malloc_r+0xd2>
 800ab24:	6821      	ldr	r1, [r4, #0]
 800ab26:	3503      	adds	r5, #3
 800ab28:	1a6d      	subs	r5, r5, r1
 800ab2a:	f025 0503 	bic.w	r5, r5, #3
 800ab2e:	3508      	adds	r5, #8
 800ab30:	2d0c      	cmp	r5, #12
 800ab32:	bf38      	it	cc
 800ab34:	250c      	movcc	r5, #12
 800ab36:	4629      	mov	r1, r5
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7ff ffa5 	bl	800aa88 <sbrk_aligned>
 800ab3e:	3001      	adds	r0, #1
 800ab40:	d02b      	beq.n	800ab9a <_malloc_r+0xd2>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	442b      	add	r3, r5
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	e00e      	b.n	800ab68 <_malloc_r+0xa0>
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	1b52      	subs	r2, r2, r5
 800ab4e:	d41e      	bmi.n	800ab8e <_malloc_r+0xc6>
 800ab50:	2a0b      	cmp	r2, #11
 800ab52:	d916      	bls.n	800ab82 <_malloc_r+0xba>
 800ab54:	1961      	adds	r1, r4, r5
 800ab56:	42a3      	cmp	r3, r4
 800ab58:	6025      	str	r5, [r4, #0]
 800ab5a:	bf18      	it	ne
 800ab5c:	6059      	strne	r1, [r3, #4]
 800ab5e:	6863      	ldr	r3, [r4, #4]
 800ab60:	bf08      	it	eq
 800ab62:	6031      	streq	r1, [r6, #0]
 800ab64:	5162      	str	r2, [r4, r5]
 800ab66:	604b      	str	r3, [r1, #4]
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f104 060b 	add.w	r6, r4, #11
 800ab6e:	f000 f865 	bl	800ac3c <__malloc_unlock>
 800ab72:	f026 0607 	bic.w	r6, r6, #7
 800ab76:	1d23      	adds	r3, r4, #4
 800ab78:	1af2      	subs	r2, r6, r3
 800ab7a:	d0b6      	beq.n	800aaea <_malloc_r+0x22>
 800ab7c:	1b9b      	subs	r3, r3, r6
 800ab7e:	50a3      	str	r3, [r4, r2]
 800ab80:	e7b3      	b.n	800aaea <_malloc_r+0x22>
 800ab82:	6862      	ldr	r2, [r4, #4]
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	bf0c      	ite	eq
 800ab88:	6032      	streq	r2, [r6, #0]
 800ab8a:	605a      	strne	r2, [r3, #4]
 800ab8c:	e7ec      	b.n	800ab68 <_malloc_r+0xa0>
 800ab8e:	4623      	mov	r3, r4
 800ab90:	6864      	ldr	r4, [r4, #4]
 800ab92:	e7b2      	b.n	800aafa <_malloc_r+0x32>
 800ab94:	4634      	mov	r4, r6
 800ab96:	6876      	ldr	r6, [r6, #4]
 800ab98:	e7b9      	b.n	800ab0e <_malloc_r+0x46>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	4638      	mov	r0, r7
 800aba0:	f000 f84c 	bl	800ac3c <__malloc_unlock>
 800aba4:	e7a1      	b.n	800aaea <_malloc_r+0x22>
 800aba6:	6025      	str	r5, [r4, #0]
 800aba8:	e7de      	b.n	800ab68 <_malloc_r+0xa0>
 800abaa:	bf00      	nop
 800abac:	2400156c 	.word	0x2400156c

0800abb0 <_realloc_r>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	4680      	mov	r8, r0
 800abb6:	4614      	mov	r4, r2
 800abb8:	460e      	mov	r6, r1
 800abba:	b921      	cbnz	r1, 800abc6 <_realloc_r+0x16>
 800abbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	4611      	mov	r1, r2
 800abc2:	f7ff bf81 	b.w	800aac8 <_malloc_r>
 800abc6:	b92a      	cbnz	r2, 800abd4 <_realloc_r+0x24>
 800abc8:	f7ff ff12 	bl	800a9f0 <_free_r>
 800abcc:	4625      	mov	r5, r4
 800abce:	4628      	mov	r0, r5
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd4:	f000 f838 	bl	800ac48 <_malloc_usable_size_r>
 800abd8:	4284      	cmp	r4, r0
 800abda:	4607      	mov	r7, r0
 800abdc:	d802      	bhi.n	800abe4 <_realloc_r+0x34>
 800abde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abe2:	d812      	bhi.n	800ac0a <_realloc_r+0x5a>
 800abe4:	4621      	mov	r1, r4
 800abe6:	4640      	mov	r0, r8
 800abe8:	f7ff ff6e 	bl	800aac8 <_malloc_r>
 800abec:	4605      	mov	r5, r0
 800abee:	2800      	cmp	r0, #0
 800abf0:	d0ed      	beq.n	800abce <_realloc_r+0x1e>
 800abf2:	42bc      	cmp	r4, r7
 800abf4:	4622      	mov	r2, r4
 800abf6:	4631      	mov	r1, r6
 800abf8:	bf28      	it	cs
 800abfa:	463a      	movcs	r2, r7
 800abfc:	f7ff fed0 	bl	800a9a0 <memcpy>
 800ac00:	4631      	mov	r1, r6
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7ff fef4 	bl	800a9f0 <_free_r>
 800ac08:	e7e1      	b.n	800abce <_realloc_r+0x1e>
 800ac0a:	4635      	mov	r5, r6
 800ac0c:	e7df      	b.n	800abce <_realloc_r+0x1e>
	...

0800ac10 <_sbrk_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_sbrk_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f7 fc2a 	bl	8002474 <_sbrk>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_sbrk_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_sbrk_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	24001574 	.word	0x24001574

0800ac30 <__malloc_lock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__malloc_lock+0x8>)
 800ac32:	f000 b811 	b.w	800ac58 <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	24001578 	.word	0x24001578

0800ac3c <__malloc_unlock>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	; (800ac44 <__malloc_unlock+0x8>)
 800ac3e:	f000 b80c 	b.w	800ac5a <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	24001578 	.word	0x24001578

0800ac48 <_malloc_usable_size_r>:
 800ac48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac4c:	1f18      	subs	r0, r3, #4
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bfbc      	itt	lt
 800ac52:	580b      	ldrlt	r3, [r1, r0]
 800ac54:	18c0      	addlt	r0, r0, r3
 800ac56:	4770      	bx	lr

0800ac58 <__retarget_lock_acquire_recursive>:
 800ac58:	4770      	bx	lr

0800ac5a <__retarget_lock_release_recursive>:
 800ac5a:	4770      	bx	lr

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
